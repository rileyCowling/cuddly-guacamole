
/Users/rileycowling/Documents/GitHub/cuddly-guacamole/firmware/target/2.2.0/photon/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002894  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a28b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a28b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c0c  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2930  080a2930  00022930  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2958  080a2958  00022958  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00129a31  00000000  00000000  0002295c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000153be  00000000  00000000  0014c38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001badd  00000000  00000000  0016174b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002150  00000000  00000000  0017d228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050e0  00000000  00000000  0017f378  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000297c8  00000000  00000000  00184458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002feea  00000000  00000000  001adc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b650d  00000000  00000000  001ddb0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005514  00000000  00000000  00294018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f9e4 	bl	80a23fa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f9ec 	bl	80a2416 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a28b4 	.word	0x080a28b4
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000c85 	.word	0x20000c85
 80a0058:	20000c85 	.word	0x20000c85

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8b9 	bl	80a21d4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2884 	.word	0x080a2884
 80a0080:	080a28a4 	.word	0x080a28a4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b82a 	b.w	80a00dc <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f877 	bl	80a017c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b857 	b.w	80a2144 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 b85f 	b.w	80a1158 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 b85d 	b.w	80a1158 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 b863 	b.w	80a1168 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN5Print5printIlLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a00b4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 80a00b6:	4607      	mov	r7, r0
 80a00b8:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
 80a00ba:	da0c      	bge.n	80a00d6 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
 80a00bc:	2a0a      	cmp	r2, #10
 80a00be:	d10a      	bne.n	80a00d6 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
 80a00c0:	212d      	movs	r1, #45	; 0x2d
 80a00c2:	f001 fce5 	bl	80a1a90 <_ZN5Print5printEc>
 80a00c6:	4605      	mov	r5, r0
            val = -n;
 80a00c8:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a00ca:	4638      	mov	r0, r7
 80a00cc:	b2f2      	uxtb	r2, r6
 80a00ce:	f001 fcfe 	bl	80a1ace <_ZN5Print11printNumberEmh>
    }
}
 80a00d2:	4428      	add	r0, r5
 80a00d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
 80a00d6:	4621      	mov	r1, r4
        size_t t = 0;
 80a00d8:	2500      	movs	r5, #0
 80a00da:	e7f6      	b.n	80a00ca <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

080a00dc <setup>:
int fingerPresent;
bool rangeSetter = false;


void setup()
{
 80a00dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
 80a00de:	f001 fef9 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a00e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00e6:	f001 fedb 	bl	80a1ea0 <_ZN9USBSerial5beginEl>

  //setting up status LEDS
  pinMode(R_LED,OUTPUT);
 80a00ea:	4b1c      	ldr	r3, [pc, #112]	; (80a015c <setup+0x80>)
 80a00ec:	2101      	movs	r1, #1
 80a00ee:	8818      	ldrh	r0, [r3, #0]
 80a00f0:	f002 f8ec 	bl	80a22cc <pinMode>
  pinMode(G_LED,OUTPUT);
 80a00f4:	4b1a      	ldr	r3, [pc, #104]	; (80a0160 <setup+0x84>)
 80a00f6:	2101      	movs	r1, #1
 80a00f8:	8818      	ldrh	r0, [r3, #0]
 80a00fa:	f002 f8e7 	bl	80a22cc <pinMode>
  pinMode(B_LED,OUTPUT);
 80a00fe:	4b19      	ldr	r3, [pc, #100]	; (80a0164 <setup+0x88>)
 80a0100:	2101      	movs	r1, #1
 80a0102:	8818      	ldrh	r0, [r3, #0]
 80a0104:	f002 f8e2 	bl	80a22cc <pinMode>
  pinMode(W_LED,OUTPUT);
 80a0108:	4b17      	ldr	r3, [pc, #92]	; (80a0168 <setup+0x8c>)
 80a010a:	2101      	movs	r1, #1
 80a010c:	8818      	ldrh	r0, [r3, #0]
 80a010e:	f002 f8dd 	bl	80a22cc <pinMode>

  // Initialize sensor, if something is wrong go into the following infinite loop
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a0112:	f002 f91f 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a0116:	2357      	movs	r3, #87	; 0x57
 80a0118:	4601      	mov	r1, r0
 80a011a:	4a14      	ldr	r2, [pc, #80]	; (80a016c <setup+0x90>)
 80a011c:	4814      	ldr	r0, [pc, #80]	; (80a0170 <setup+0x94>)
 80a011e:	f000 fae9 	bl	80a06f4 <_ZN8MAX301055beginER7TwoWiremh>
 80a0122:	b928      	cbnz	r0, 80a0130 <setup+0x54>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
 80a0124:	f001 fed6 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0128:	4912      	ldr	r1, [pc, #72]	; (80a0174 <setup+0x98>)
 80a012a:	f001 fcce 	bl	80a1aca <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
 80a012e:	e7fe      	b.n	80a012e <setup+0x52>
  }

  //Print the OK Message to continue
  Serial.println(F("Attach sensor to finger with rubber band to Begin!"));
 80a0130:	f001 fed0 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0134:	4910      	ldr	r1, [pc, #64]	; (80a0178 <setup+0x9c>)
 80a0136:	f001 fcc8 	bl	80a1aca <_ZN5Print7printlnEPK19__FlashStringHelper>
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  //Configure sensor with these settings
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); 
 80a013a:	f240 139b 	movw	r3, #411	; 0x19b
 80a013e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a0142:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a0146:	2364      	movs	r3, #100	; 0x64
 80a0148:	2204      	movs	r2, #4
 80a014a:	9300      	str	r3, [sp, #0]
 80a014c:	213c      	movs	r1, #60	; 0x3c
 80a014e:	2302      	movs	r3, #2
 80a0150:	4807      	ldr	r0, [pc, #28]	; (80a0170 <setup+0x94>)
 80a0152:	f000 fb8e 	bl	80a0872 <_ZN8MAX301055setupEhhhiii>
}
 80a0156:	b005      	add	sp, #20
 80a0158:	f85d fb04 	ldr.w	pc, [sp], #4
 80a015c:	20000008 	.word	0x20000008
 80a0160:	20000004 	.word	0x20000004
 80a0164:	20000000 	.word	0x20000000
 80a0168:	2000000c 	.word	0x2000000c
 80a016c:	00061a80 	.word	0x00061a80
 80a0170:	2000021c 	.word	0x2000021c
 80a0174:	080a25ac 	.word	0x080a25ac
 80a0178:	080a25df 	.word	0x080a25df

080a017c <loop>:

void loop(){ 
 80a017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** Finger detection before getting started **/
  if (particleSensor.getIR() < 50000){
 80a0180:	48af      	ldr	r0, [pc, #700]	; (80a0440 <loop+0x2c4>)
void loop(){ 
 80a0182:	b095      	sub	sp, #84	; 0x54
  if (particleSensor.getIR() < 50000){
 80a0184:	f000 fa9e 	bl	80a06c4 <_ZN8MAX301055getIREv>
 80a0188:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a018c:	4298      	cmp	r0, r3
 80a018e:	4fad      	ldr	r7, [pc, #692]	; (80a0444 <loop+0x2c8>)
 80a0190:	4ead      	ldr	r6, [pc, #692]	; (80a0448 <loop+0x2cc>)
 80a0192:	d838      	bhi.n	80a0206 <loop+0x8a>
    //Setting finger status to zero for not present
    fingerPresent=0;
 80a0194:	2500      	movs	r5, #0
 80a0196:	4cad      	ldr	r4, [pc, #692]	; (80a044c <loop+0x2d0>)

    //No finger turn turn off B/G LEDs
    digitalWrite(G_LED,LOW);
 80a0198:	4629      	mov	r1, r5
 80a019a:	8838      	ldrh	r0, [r7, #0]
    fingerPresent=0;
 80a019c:	6025      	str	r5, [r4, #0]
    digitalWrite(G_LED,LOW);
 80a019e:	f002 f8a6 	bl	80a22ee <digitalWrite>
    digitalWrite(B_LED, LOW);
 80a01a2:	4bab      	ldr	r3, [pc, #684]	; (80a0450 <loop+0x2d4>)
 80a01a4:	4629      	mov	r1, r5
 80a01a6:	8818      	ldrh	r0, [r3, #0]
 80a01a8:	f002 f8a1 	bl	80a22ee <digitalWrite>
    Serial.println(" No finger?");
 80a01ac:	f001 fe92 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a01b0:	49a8      	ldr	r1, [pc, #672]	; (80a0454 <loop+0x2d8>)
 80a01b2:	f001 fc80 	bl	80a1ab6 <_ZN5Print7printlnEPKc>
    
    //we dont want to take unnecessary data
    //while there is no finger flash red LED
    while(fingerPresent==0){ 
      digitalWrite(R_LED,HIGH);
 80a01b6:	f04f 0901 	mov.w	r9, #1
      delay(200);
      digitalWrite(R_LED,LOW);
      delay(200);
      if(!(particleSensor.getIR() < 50000)){
 80a01ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 80a0440 <loop+0x2c4>
        fingerPresent=1; //Set finger status to 1 for present
        Serial.println("Finger Detected -- Initializing");
 80a01be:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80a04a4 <loop+0x328>
    while(fingerPresent==0){ 
 80a01c2:	6825      	ldr	r5, [r4, #0]
 80a01c4:	b9e5      	cbnz	r5, 80a0200 <loop+0x84>
      digitalWrite(R_LED,HIGH);
 80a01c6:	2101      	movs	r1, #1
 80a01c8:	8830      	ldrh	r0, [r6, #0]
 80a01ca:	f002 f890 	bl	80a22ee <digitalWrite>
      delay(200);
 80a01ce:	20c8      	movs	r0, #200	; 0xc8
 80a01d0:	f000 fff2 	bl	80a11b8 <delay>
      digitalWrite(R_LED,LOW);
 80a01d4:	4629      	mov	r1, r5
 80a01d6:	8830      	ldrh	r0, [r6, #0]
 80a01d8:	f002 f889 	bl	80a22ee <digitalWrite>
      delay(200);
 80a01dc:	20c8      	movs	r0, #200	; 0xc8
 80a01de:	f000 ffeb 	bl	80a11b8 <delay>
      if(!(particleSensor.getIR() < 50000)){
 80a01e2:	4650      	mov	r0, sl
 80a01e4:	f000 fa6e 	bl	80a06c4 <_ZN8MAX301055getIREv>
 80a01e8:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a01ec:	4298      	cmp	r0, r3
 80a01ee:	d9e8      	bls.n	80a01c2 <loop+0x46>
        fingerPresent=1; //Set finger status to 1 for present
 80a01f0:	f8c4 9000 	str.w	r9, [r4]
        Serial.println("Finger Detected -- Initializing");
 80a01f4:	f001 fe6e 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a01f8:	4641      	mov	r1, r8
 80a01fa:	f001 fc5c 	bl	80a1ab6 <_ZN5Print7printlnEPKc>
 80a01fe:	e7e0      	b.n	80a01c2 <loop+0x46>
      }
    }
    rangeSetter=false; // this recalculates the range if the finger has been removed 
 80a0200:	2200      	movs	r2, #0
 80a0202:	4b95      	ldr	r3, [pc, #596]	; (80a0458 <loop+0x2dc>)
 80a0204:	701a      	strb	r2, [r3, #0]
  }

  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a0206:	2364      	movs	r3, #100	; 0x64
 80a0208:	4c94      	ldr	r4, [pc, #592]	; (80a045c <loop+0x2e0>)
  
  //Finger present turn off Red LED and turn on Green LED
  digitalWrite(G_LED,HIGH);
 80a020a:	2101      	movs	r1, #1
 80a020c:	8838      	ldrh	r0, [r7, #0]
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a020e:	6023      	str	r3, [r4, #0]
  digitalWrite(G_LED,HIGH);
 80a0210:	f002 f86d 	bl	80a22ee <digitalWrite>
  digitalWrite(R_LED,LOW);
 80a0214:	2100      	movs	r1, #0
 80a0216:	8830      	ldrh	r0, [r6, #0]
 80a0218:	f002 f869 	bl	80a22ee <digitalWrite>

  if(!rangeSetter){
 80a021c:	4b8e      	ldr	r3, [pc, #568]	; (80a0458 <loop+0x2dc>)
 80a021e:	781d      	ldrb	r5, [r3, #0]
 80a0220:	4698      	mov	r8, r3
 80a0222:	2d00      	cmp	r5, #0
 80a0224:	d162      	bne.n	80a02ec <loop+0x170>
    //read the first 100 samples, and determine the signal range
    digitalWrite(W_LED,HIGH);
 80a0226:	4f8e      	ldr	r7, [pc, #568]	; (80a0460 <loop+0x2e4>)
 80a0228:	2101      	movs	r1, #1
 80a022a:	8838      	ldrh	r0, [r7, #0]
 80a022c:	f002 f85f 	bl	80a22ee <digitalWrite>
    Serial.println("...");
 80a0230:	f001 fe50 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0234:	498b      	ldr	r1, [pc, #556]	; (80a0464 <loop+0x2e8>)
 80a0236:	f001 fc3e 	bl	80a1ab6 <_ZN5Print7printlnEPKc>
    for (byte i = 0 ; i < bufferLength ; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
 80a023a:	4e81      	ldr	r6, [pc, #516]	; (80a0440 <loop+0x2c4>)
        particleSensor.check(); //Check the sensor for new data

      redBuffer[i] = particleSensor.getRed();
 80a023c:	f8df b238 	ldr.w	fp, [pc, #568]	; 80a0478 <loop+0x2fc>
      irBuffer[i] = particleSensor.getIR();
 80a0240:	f8df a238 	ldr.w	sl, [pc, #568]	; 80a047c <loop+0x300>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0244:	6823      	ldr	r3, [r4, #0]
 80a0246:	fa5f f985 	uxtb.w	r9, r5
 80a024a:	4599      	cmp	r9, r3
 80a024c:	da16      	bge.n	80a027c <loop+0x100>
      while (particleSensor.available() == false) //do we have new data?
 80a024e:	4630      	mov	r0, r6
 80a0250:	f000 f935 	bl	80a04be <_ZN8MAX301059availableEv>
 80a0254:	b918      	cbnz	r0, 80a025e <loop+0xe2>
        particleSensor.check(); //Check the sensor for new data
 80a0256:	4630      	mov	r0, r6
 80a0258:	f000 f973 	bl	80a0542 <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
 80a025c:	e7f7      	b.n	80a024e <loop+0xd2>
      redBuffer[i] = particleSensor.getRed();
 80a025e:	4630      	mov	r0, r6
 80a0260:	f000 fa24 	bl	80a06ac <_ZN8MAX301056getRedEv>
 80a0264:	f84b 0029 	str.w	r0, [fp, r9, lsl #2]
      irBuffer[i] = particleSensor.getIR();
 80a0268:	4630      	mov	r0, r6
 80a026a:	f000 fa2b 	bl	80a06c4 <_ZN8MAX301055getIREv>
 80a026e:	f84a 0029 	str.w	r0, [sl, r9, lsl #2]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a0272:	4630      	mov	r0, r6
 80a0274:	f000 f930 	bl	80a04d8 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0278:	3501      	adds	r5, #1
 80a027a:	e7e3      	b.n	80a0244 <loop+0xc8>

    }
    rangeSetter=true; 
 80a027c:	2301      	movs	r3, #1
    digitalWrite(W_LED,LOW);
 80a027e:	2100      	movs	r1, #0
 80a0280:	8838      	ldrh	r0, [r7, #0]
    rangeSetter=true; 
 80a0282:	f888 3000 	strb.w	r3, [r8]
    digitalWrite(W_LED,LOW);
 80a0286:	f002 f832 	bl	80a22ee <digitalWrite>
    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a028a:	4b77      	ldr	r3, [pc, #476]	; (80a0468 <loop+0x2ec>)
 80a028c:	4e77      	ldr	r6, [pc, #476]	; (80a046c <loop+0x2f0>)
 80a028e:	9302      	str	r3, [sp, #8]
 80a0290:	4b77      	ldr	r3, [pc, #476]	; (80a0470 <loop+0x2f4>)
 80a0292:	4d78      	ldr	r5, [pc, #480]	; (80a0474 <loop+0x2f8>)
 80a0294:	9300      	str	r3, [sp, #0]
 80a0296:	9601      	str	r6, [sp, #4]
 80a0298:	462b      	mov	r3, r5
 80a029a:	4a77      	ldr	r2, [pc, #476]	; (80a0478 <loop+0x2fc>)
 80a029c:	6821      	ldr	r1, [r4, #0]
 80a029e:	4877      	ldr	r0, [pc, #476]	; (80a047c <loop+0x300>)
 80a02a0:	f000 fc4c 	bl	80a0b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
    //** DATA PRINTING **//
    //Heart Rate Values
    Serial.print(F("HR= "));
 80a02a4:	f001 fe16 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02a8:	4975      	ldr	r1, [pc, #468]	; (80a0480 <loop+0x304>)
 80a02aa:	f001 fbf4 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(heartRate, DEC);
 80a02ae:	f001 fe11 	bl	80a1ed4 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
 80a02b2:	220a      	movs	r2, #10
 80a02b4:	6831      	ldr	r1, [r6, #0]
 80a02b6:	f7ff fefc 	bl	80a00b2 <_ZN5Print5printIlLi0EEEjT_i.part.0>
    Serial.print(F(" BPM"));
 80a02ba:	f001 fe0b 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02be:	4971      	ldr	r1, [pc, #452]	; (80a0484 <loop+0x308>)
 80a02c0:	f001 fbe9 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
    //Blood Oxygen Values 
    Serial.print(F(", SPO2= "));
 80a02c4:	f001 fe06 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02c8:	496f      	ldr	r1, [pc, #444]	; (80a0488 <loop+0x30c>)
 80a02ca:	f001 fbe4 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(spo2, DEC);
 80a02ce:	f001 fe01 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02d2:	220a      	movs	r2, #10
 80a02d4:	6829      	ldr	r1, [r5, #0]
 80a02d6:	f7ff feec 	bl	80a00b2 <_ZN5Print5printIlLi0EEEjT_i.part.0>
    Serial.print(F("%"));
 80a02da:	f001 fdfb 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02de:	496b      	ldr	r1, [pc, #428]	; (80a048c <loop+0x310>)
 80a02e0:	f001 fbd9 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println();  
 80a02e4:	f001 fdf6 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a02e8:	f001 fbd9 	bl	80a1a9e <_ZN5Print7printlnEv>
  }
  
  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  
  digitalWrite(B_LED,HIGH); //Status
 80a02ec:	4b58      	ldr	r3, [pc, #352]	; (80a0450 <loop+0x2d4>)
 80a02ee:	2101      	movs	r1, #1
 80a02f0:	8818      	ldrh	r0, [r3, #0]
 80a02f2:	f001 fffc 	bl	80a22ee <digitalWrite>

  //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
  for (byte i = 25; i < 100; i++)
 80a02f6:	4960      	ldr	r1, [pc, #384]	; (80a0478 <loop+0x2fc>)
 80a02f8:	4a60      	ldr	r2, [pc, #384]	; (80a047c <loop+0x300>)
  digitalWrite(B_LED,HIGH); //Status
 80a02fa:	234b      	movs	r3, #75	; 0x4b
 80a02fc:	4688      	mov	r8, r1
 80a02fe:	4617      	mov	r7, r2
  {
    redBuffer[i - 25] = redBuffer[i];
 80a0300:	6e48      	ldr	r0, [r1, #100]	; 0x64
 80a0302:	3b01      	subs	r3, #1
 80a0304:	f841 0b04 	str.w	r0, [r1], #4
    irBuffer[i - 25] = irBuffer[i];
 80a0308:	6e50      	ldr	r0, [r2, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a030a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    irBuffer[i - 25] = irBuffer[i];
 80a030e:	f842 0b04 	str.w	r0, [r2], #4
  for (byte i = 25; i < 100; i++)
 80a0312:	d1f5      	bne.n	80a0300 <loop+0x184>
 80a0314:	254b      	movs	r5, #75	; 0x4b
  
  //take 25 sets of samples before calculating the heart rate.
  for (byte i = 75; i < 100; i++)
  {

    while (particleSensor.available() == false) //do we have new data?
 80a0316:	4e4a      	ldr	r6, [pc, #296]	; (80a0440 <loop+0x2c4>)
 80a0318:	4630      	mov	r0, r6
 80a031a:	f000 f8d0 	bl	80a04be <_ZN8MAX301059availableEv>
 80a031e:	b918      	cbnz	r0, 80a0328 <loop+0x1ac>
      particleSensor.check(); //Check the sensor for new data
 80a0320:	4630      	mov	r0, r6
 80a0322:	f000 f90e 	bl	80a0542 <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
 80a0326:	e7f7      	b.n	80a0318 <loop+0x19c>

    redBuffer[i] = particleSensor.getRed();
 80a0328:	4630      	mov	r0, r6
 80a032a:	f000 f9bf 	bl	80a06ac <_ZN8MAX301056getRedEv>
 80a032e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    irBuffer[i] = particleSensor.getIR();
 80a0332:	4630      	mov	r0, r6
 80a0334:	f000 f9c6 	bl	80a06c4 <_ZN8MAX301055getIREv>
 80a0338:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a033c:	4630      	mov	r0, r6
 80a033e:	3501      	adds	r5, #1
 80a0340:	f000 f8ca 	bl	80a04d8 <_ZN8MAX3010510nextSampleEv>
  for (byte i = 75; i < 100; i++)
 80a0344:	2d64      	cmp	r5, #100	; 0x64
 80a0346:	d1e7      	bne.n	80a0318 <loop+0x19c>
  }
  
  //After gathering 25 new samples recalculate HR and SP02
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a0348:	4b47      	ldr	r3, [pc, #284]	; (80a0468 <loop+0x2ec>)
 80a034a:	4e48      	ldr	r6, [pc, #288]	; (80a046c <loop+0x2f0>)
 80a034c:	9302      	str	r3, [sp, #8]
 80a034e:	4b48      	ldr	r3, [pc, #288]	; (80a0470 <loop+0x2f4>)
 80a0350:	4d48      	ldr	r5, [pc, #288]	; (80a0474 <loop+0x2f8>)
 80a0352:	9300      	str	r3, [sp, #0]
 80a0354:	9601      	str	r6, [sp, #4]
 80a0356:	462b      	mov	r3, r5
 80a0358:	4a47      	ldr	r2, [pc, #284]	; (80a0478 <loop+0x2fc>)
 80a035a:	6821      	ldr	r1, [r4, #0]
 80a035c:	4847      	ldr	r0, [pc, #284]	; (80a047c <loop+0x300>)
 80a035e:	f000 fbed 	bl	80a0b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  
  //** DATA PRINTING **//
  //Heart Rate Values
  Serial.print(F("HR= "));
 80a0362:	f001 fdb7 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0366:	4946      	ldr	r1, [pc, #280]	; (80a0480 <loop+0x304>)
 80a0368:	f001 fb95 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(heartRate, DEC);
 80a036c:	f001 fdb2 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0370:	220a      	movs	r2, #10
 80a0372:	6831      	ldr	r1, [r6, #0]
 80a0374:	f7ff fe9d 	bl	80a00b2 <_ZN5Print5printIlLi0EEEjT_i.part.0>
  Serial.print(F(" BPM"));
 80a0378:	f001 fdac 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a037c:	4941      	ldr	r1, [pc, #260]	; (80a0484 <loop+0x308>)
 80a037e:	f001 fb8a 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
  //Blood Oxygen Values 
  Serial.print(F(", SPO2= "));
 80a0382:	f001 fda7 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0386:	4940      	ldr	r1, [pc, #256]	; (80a0488 <loop+0x30c>)
 80a0388:	f001 fb85 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(spo2, DEC);
 80a038c:	f001 fda2 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a0390:	220a      	movs	r2, #10
 80a0392:	6829      	ldr	r1, [r5, #0]
 80a0394:	f7ff fe8d 	bl	80a00b2 <_ZN5Print5printIlLi0EEEjT_i.part.0>
  Serial.print(F("%"));
 80a0398:	f001 fd9c 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a039c:	493b      	ldr	r1, [pc, #236]	; (80a048c <loop+0x310>)
 80a039e:	f001 fb7a 	bl	80a1a96 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println();
 80a03a2:	f001 fd97 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a03a6:	f001 fb7a 	bl	80a1a9e <_ZN5Print7printlnEv>
  
  //Webhook for sending data to the server
  String data1 = String(heartRate);
 80a03aa:	220a      	movs	r2, #10
 80a03ac:	6831      	ldr	r1, [r6, #0]
 80a03ae:	a804      	add	r0, sp, #16
 80a03b0:	f001 fc47 	bl	80a1c42 <_ZN6StringC1Elh>
  String data2 = String(spo2);
 80a03b4:	220a      	movs	r2, #10
 80a03b6:	6829      	ldr	r1, [r5, #0]
 80a03b8:	a808      	add	r0, sp, #32
 80a03ba:	f001 fc42 	bl	80a1c42 <_ZN6StringC1Elh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03be:	4934      	ldr	r1, [pc, #208]	; (80a0490 <loop+0x314>)
 80a03c0:	a810      	add	r0, sp, #64	; 0x40
 80a03c2:	f001 fc00 	bl	80a1bc6 <_ZN6StringC1EPKc>
  String data = "heartRate:" + data1 + ", " + "spo2:" + data2;
 80a03c6:	a904      	add	r1, sp, #16
 80a03c8:	a810      	add	r0, sp, #64	; 0x40
 80a03ca:	f001 fc64 	bl	80a1c96 <_ZplRK15StringSumHelperRK6String>
 80a03ce:	4931      	ldr	r1, [pc, #196]	; (80a0494 <loop+0x318>)
 80a03d0:	f001 fc6d 	bl	80a1cae <_ZplRK15StringSumHelperPKc>
 80a03d4:	4930      	ldr	r1, [pc, #192]	; (80a0498 <loop+0x31c>)
 80a03d6:	f001 fc6a 	bl	80a1cae <_ZplRK15StringSumHelperPKc>
 80a03da:	a908      	add	r1, sp, #32
 80a03dc:	f001 fc5b 	bl	80a1c96 <_ZplRK15StringSumHelperRK6String>
 80a03e0:	4601      	mov	r1, r0
 80a03e2:	a80c      	add	r0, sp, #48	; 0x30
 80a03e4:	f001 fc11 	bl	80a1c0a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a03e8:	a810      	add	r0, sp, #64	; 0x40
 80a03ea:	f001 fba2 	bl	80a1b32 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a03ee:	4b2b      	ldr	r3, [pc, #172]	; (80a049c <loop+0x320>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a03f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a03f2:	781b      	ldrb	r3, [r3, #0]
 80a03f4:	492a      	ldr	r1, [pc, #168]	; (80a04a0 <loop+0x324>)
 80a03f6:	f88d 3000 	strb.w	r3, [sp]
 80a03fa:	a810      	add	r0, sp, #64	; 0x40
 80a03fc:	233c      	movs	r3, #60	; 0x3c
 80a03fe:	f001 f84f 	bl	80a14a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0402:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a0404:	b17c      	cbz	r4, 80a0426 <loop+0x2aa>
      if (--_M_use_count == 0)
 80a0406:	6863      	ldr	r3, [r4, #4]
 80a0408:	3b01      	subs	r3, #1
 80a040a:	6063      	str	r3, [r4, #4]
 80a040c:	b95b      	cbnz	r3, 80a0426 <loop+0x2aa>
          _M_dispose();
 80a040e:	6823      	ldr	r3, [r4, #0]
 80a0410:	4620      	mov	r0, r4
 80a0412:	689b      	ldr	r3, [r3, #8]
 80a0414:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0416:	68a3      	ldr	r3, [r4, #8]
 80a0418:	3b01      	subs	r3, #1
 80a041a:	60a3      	str	r3, [r4, #8]
 80a041c:	b91b      	cbnz	r3, 80a0426 <loop+0x2aa>
            _M_destroy();
 80a041e:	6823      	ldr	r3, [r4, #0]
 80a0420:	4620      	mov	r0, r4
 80a0422:	68db      	ldr	r3, [r3, #12]
 80a0424:	4798      	blx	r3
 80a0426:	a80c      	add	r0, sp, #48	; 0x30
 80a0428:	f001 fb83 	bl	80a1b32 <_ZN6StringD1Ev>
  String data2 = String(spo2);
 80a042c:	a808      	add	r0, sp, #32
 80a042e:	f001 fb80 	bl	80a1b32 <_ZN6StringD1Ev>
  String data1 = String(heartRate);
 80a0432:	a804      	add	r0, sp, #16
 80a0434:	f001 fb7d 	bl	80a1b32 <_ZN6StringD1Ev>
  Particle.publish("dataEntry", data, PRIVATE);
  

}
 80a0438:	b015      	add	sp, #84	; 0x54
 80a043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a043e:	bf00      	nop
 80a0440:	2000021c 	.word	0x2000021c
 80a0444:	20000004 	.word	0x20000004
 80a0448:	20000008 	.word	0x20000008
 80a044c:	20000084 	.word	0x20000084
 80a0450:	20000000 	.word	0x20000000
 80a0454:	080a2612 	.word	0x080a2612
 80a0458:	20000258 	.word	0x20000258
 80a045c:	20000080 	.word	0x20000080
 80a0460:	2000000c 	.word	0x2000000c
 80a0464:	080a263e 	.word	0x080a263e
 80a0468:	200003f0 	.word	0x200003f0
 80a046c:	20000088 	.word	0x20000088
 80a0470:	200003f1 	.word	0x200003f1
 80a0474:	200003ec 	.word	0x200003ec
 80a0478:	2000025c 	.word	0x2000025c
 80a047c:	2000008c 	.word	0x2000008c
 80a0480:	080a2642 	.word	0x080a2642
 80a0484:	080a2647 	.word	0x080a2647
 80a0488:	080a264c 	.word	0x080a264c
 80a048c:	080a2655 	.word	0x080a2655
 80a0490:	080a2657 	.word	0x080a2657
 80a0494:	080a2662 	.word	0x080a2662
 80a0498:	080a2665 	.word	0x080a2665
 80a049c:	2000007c 	.word	0x2000007c
 80a04a0:	080a266b 	.word	0x080a266b
 80a04a4:	080a261e 	.word	0x080a261e

080a04a8 <_GLOBAL__sub_I_particleSensor>:
        val_(val) {
 80a04a8:	2201      	movs	r2, #1
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <_GLOBAL__sub_I_particleSensor+0xc>)
MAX30105 particleSensor;
 80a04ac:	4802      	ldr	r0, [pc, #8]	; (80a04b8 <_GLOBAL__sub_I_particleSensor+0x10>)
 80a04ae:	701a      	strb	r2, [r3, #0]
 80a04b0:	f000 b804 	b.w	80a04bc <_ZN8MAX30105C1Ev>
 80a04b4:	2000007c 	.word	0x2000007c
 80a04b8:	2000021c 	.word	0x2000021c

080a04bc <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a04bc:	4770      	bx	lr

080a04be <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
 80a04be:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a04c2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80a04c6:	1a18      	subs	r0, r3, r0
 80a04c8:	b2c3      	uxtb	r3, r0
 80a04ca:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 80a04cc:	2800      	cmp	r0, #0
 80a04ce:	bfbc      	itt	lt
 80a04d0:	1d18      	addlt	r0, r3, #4
 80a04d2:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
 80a04d4:	b2c0      	uxtb	r0, r0
 80a04d6:	4770      	bx	lr

080a04d8 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
 80a04dc:	f7ff ffef 	bl	80a04be <_ZN8MAX301059availableEv>
 80a04e0:	b130      	cbz	r0, 80a04f0 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
 80a04e2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80a04e6:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
 80a04e8:	f003 0303 	and.w	r3, r3, #3
 80a04ec:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
 80a04f0:	bd08      	pop	{r3, pc}

080a04f2 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a04f2:	b570      	push	{r4, r5, r6, lr}
 80a04f4:	4604      	mov	r4, r0
 80a04f6:	4616      	mov	r6, r2
 80a04f8:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a04fa:	6800      	ldr	r0, [r0, #0]
 80a04fc:	f001 f9ba 	bl	80a1874 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0500:	6820      	ldr	r0, [r4, #0]
 80a0502:	4631      	mov	r1, r6
 80a0504:	6803      	ldr	r3, [r0, #0]
 80a0506:	689b      	ldr	r3, [r3, #8]
 80a0508:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a050a:	2100      	movs	r1, #0
 80a050c:	6820      	ldr	r0, [r4, #0]
 80a050e:	f001 f9b8 	bl	80a1882 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a0512:	2201      	movs	r2, #1
 80a0514:	4629      	mov	r1, r5
 80a0516:	6820      	ldr	r0, [r4, #0]
 80a0518:	f001 f9a9 	bl	80a186e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a051c:	6820      	ldr	r0, [r4, #0]
 80a051e:	6803      	ldr	r3, [r0, #0]
 80a0520:	691b      	ldr	r3, [r3, #16]
 80a0522:	4798      	blx	r3
 80a0524:	b120      	cbz	r0, 80a0530 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a0526:	6820      	ldr	r0, [r4, #0]
 80a0528:	6803      	ldr	r3, [r0, #0]
 80a052a:	695b      	ldr	r3, [r3, #20]
 80a052c:	4798      	blx	r3
 80a052e:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a0530:	bd70      	pop	{r4, r5, r6, pc}

080a0532 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a0532:	2204      	movs	r2, #4
 80a0534:	7901      	ldrb	r1, [r0, #4]
 80a0536:	f7ff bfdc 	b.w	80a04f2 <_ZN8MAX3010513readRegister8Ehh>

080a053a <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a053a:	2206      	movs	r2, #6
 80a053c:	7901      	ldrb	r1, [r0, #4]
 80a053e:	f7ff bfd8 	b.w	80a04f2 <_ZN8MAX3010513readRegister8Ehh>

080a0542 <_ZN8MAX301055checkEv>:
{
 80a0542:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0546:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
 80a0548:	f7ff fff7 	bl	80a053a <_ZN8MAX3010514getReadPointerEv>
 80a054c:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
 80a054e:	4620      	mov	r0, r4
 80a0550:	f7ff ffef 	bl	80a0532 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
 80a0554:	4286      	cmp	r6, r0
 80a0556:	f000 808e 	beq.w	80a0676 <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a055a:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a055c:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a0560:	6820      	ldr	r0, [r4, #0]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a0562:	bf48      	it	mi
 80a0564:	3620      	addmi	r6, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0566:	7967      	ldrb	r7, [r4, #5]
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0568:	f001 f988 	bl	80a187c <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a056c:	6820      	ldr	r0, [r4, #0]
 80a056e:	2107      	movs	r1, #7
 80a0570:	6803      	ldr	r3, [r0, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0572:	f04f 0820 	mov.w	r8, #32
    _i2cPort->write(MAX30105_FIFODATA);
 80a0576:	689b      	ldr	r3, [r3, #8]
 80a0578:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a057a:	6820      	ldr	r0, [r4, #0]
 80a057c:	f001 f985 	bl	80a188a <_ZN7TwoWire15endTransmissionEv>
        temp[3] = 0;
 80a0580:	f04f 0900 	mov.w	r9, #0
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0584:	4377      	muls	r7, r6
 80a0586:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
 80a058a:	2f00      	cmp	r7, #0
 80a058c:	dd74      	ble.n	80a0678 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
 80a058e:	2f20      	cmp	r7, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0590:	bfc9      	itett	gt
 80a0592:	7965      	ldrbgt	r5, [r4, #5]
 80a0594:	463d      	movle	r5, r7
 80a0596:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a059a:	fbb8 f2f5 	udivgt	r2, r8, r5
 80a059e:	bfc8      	it	gt
 80a05a0:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a05a2:	2157      	movs	r1, #87	; 0x57
 80a05a4:	462a      	mov	r2, r5
 80a05a6:	6820      	ldr	r0, [r4, #0]
      bytesLeftToRead -= toGet;
 80a05a8:	1b7f      	subs	r7, r7, r5
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a05aa:	f001 f960 	bl	80a186e <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
 80a05ae:	2d00      	cmp	r5, #0
 80a05b0:	ddeb      	ble.n	80a058a <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
 80a05b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a05b6:	6820      	ldr	r0, [r4, #0]
        sense.head++; //Advance the head of the storage struct
 80a05b8:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a05ba:	f003 0303 	and.w	r3, r3, #3
 80a05be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a05c2:	6803      	ldr	r3, [r0, #0]
        temp[3] = 0;
 80a05c4:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a05c8:	695b      	ldr	r3, [r3, #20]
 80a05ca:	4798      	blx	r3
 80a05cc:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a05d0:	6820      	ldr	r0, [r4, #0]
 80a05d2:	6803      	ldr	r3, [r0, #0]
 80a05d4:	695b      	ldr	r3, [r3, #20]
 80a05d6:	4798      	blx	r3
 80a05d8:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a05dc:	6820      	ldr	r0, [r4, #0]
 80a05de:	6803      	ldr	r3, [r0, #0]
 80a05e0:	695b      	ldr	r3, [r3, #20]
 80a05e2:	4798      	blx	r3
 80a05e4:	f88d 0004 	strb.w	r0, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a05e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05ec:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a05ee:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05f0:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a05f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
 80a05f8:	7963      	ldrb	r3, [r4, #5]
 80a05fa:	2b01      	cmp	r3, #1
 80a05fc:	d919      	bls.n	80a0632 <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
 80a05fe:	6820      	ldr	r0, [r4, #0]
 80a0600:	6803      	ldr	r3, [r0, #0]
 80a0602:	695b      	ldr	r3, [r3, #20]
 80a0604:	4798      	blx	r3
 80a0606:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a060a:	6820      	ldr	r0, [r4, #0]
 80a060c:	6803      	ldr	r3, [r0, #0]
 80a060e:	695b      	ldr	r3, [r3, #20]
 80a0610:	4798      	blx	r3
 80a0612:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0616:	6820      	ldr	r0, [r4, #0]
 80a0618:	6803      	ldr	r3, [r0, #0]
 80a061a:	695b      	ldr	r3, [r3, #20]
 80a061c:	4798      	blx	r3
 80a061e:	f88d 0004 	strb.w	r0, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0622:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0626:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0628:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a062a:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
 80a062e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
 80a0632:	7963      	ldrb	r3, [r4, #5]
 80a0634:	2b02      	cmp	r3, #2
 80a0636:	d919      	bls.n	80a066c <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
 80a0638:	6820      	ldr	r0, [r4, #0]
 80a063a:	6803      	ldr	r3, [r0, #0]
 80a063c:	695b      	ldr	r3, [r3, #20]
 80a063e:	4798      	blx	r3
 80a0640:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0644:	6820      	ldr	r0, [r4, #0]
 80a0646:	6803      	ldr	r3, [r0, #0]
 80a0648:	695b      	ldr	r3, [r3, #20]
 80a064a:	4798      	blx	r3
 80a064c:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0650:	6820      	ldr	r0, [r4, #0]
 80a0652:	6803      	ldr	r3, [r0, #0]
 80a0654:	695b      	ldr	r3, [r3, #20]
 80a0656:	4798      	blx	r3
 80a0658:	f88d 0004 	strb.w	r0, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a065c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0660:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a0662:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0664:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
 80a0668:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
 80a066c:	7963      	ldrb	r3, [r4, #5]
 80a066e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a0672:	441d      	add	r5, r3
      while (toGet > 0)
 80a0674:	e79b      	b.n	80a05ae <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
 80a0676:	2600      	movs	r6, #0
}
 80a0678:	b2b0      	uxth	r0, r6
 80a067a:	b003      	add	sp, #12
 80a067c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0680 <_ZN8MAX301059safeCheckEh>:
{
 80a0680:	b570      	push	{r4, r5, r6, lr}
 80a0682:	4605      	mov	r5, r0
 80a0684:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0686:	f000 fba7 	bl	80a0dd8 <HAL_Timer_Get_Milli_Seconds>
 80a068a:	4604      	mov	r4, r0
 80a068c:	f000 fba4 	bl	80a0dd8 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a0690:	1b00      	subs	r0, r0, r4
 80a0692:	42b0      	cmp	r0, r6
 80a0694:	d808      	bhi.n	80a06a8 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
 80a0696:	4628      	mov	r0, r5
 80a0698:	f7ff ff53 	bl	80a0542 <_ZN8MAX301055checkEv>
 80a069c:	2801      	cmp	r0, #1
 80a069e:	d004      	beq.n	80a06aa <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
 80a06a0:	2001      	movs	r0, #1
 80a06a2:	f000 fd89 	bl	80a11b8 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a06a6:	e7f1      	b.n	80a068c <_ZN8MAX301059safeCheckEh+0xc>
 80a06a8:	2000      	movs	r0, #0
}
 80a06aa:	bd70      	pop	{r4, r5, r6, pc}

080a06ac <_ZN8MAX301056getRedEv>:
{
 80a06ac:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a06ae:	21fa      	movs	r1, #250	; 0xfa
{
 80a06b0:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a06b2:	f7ff ffe5 	bl	80a0680 <_ZN8MAX301059safeCheckEh>
 80a06b6:	b120      	cbz	r0, 80a06c2 <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
 80a06b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a06bc:	3302      	adds	r3, #2
 80a06be:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a06c2:	bd10      	pop	{r4, pc}

080a06c4 <_ZN8MAX301055getIREv>:
{
 80a06c4:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a06c6:	21fa      	movs	r1, #250	; 0xfa
{
 80a06c8:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a06ca:	f7ff ffd9 	bl	80a0680 <_ZN8MAX301059safeCheckEh>
 80a06ce:	b120      	cbz	r0, 80a06da <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a06d0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a06d4:	3306      	adds	r3, #6
 80a06d6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a06da:	bd10      	pop	{r4, pc}

080a06dc <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a06dc:	22ff      	movs	r2, #255	; 0xff
 80a06de:	7901      	ldrb	r1, [r0, #4]
 80a06e0:	f7ff bf07 	b.w	80a04f2 <_ZN8MAX3010513readRegister8Ehh>

080a06e4 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
 80a06e4:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a06e6:	22fe      	movs	r2, #254	; 0xfe
 80a06e8:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
 80a06ea:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a06ec:	f7ff ff01 	bl	80a04f2 <_ZN8MAX3010513readRegister8Ehh>
 80a06f0:	71a0      	strb	r0, [r4, #6]
}
 80a06f2:	bd10      	pop	{r4, pc}

080a06f4 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a06f4:	b570      	push	{r4, r5, r6, lr}
 80a06f6:	4604      	mov	r4, r0
 80a06f8:	4616      	mov	r6, r2
 80a06fa:	461d      	mov	r5, r3
 80a06fc:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a06fe:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
 80a0700:	f001 f886 	bl	80a1810 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0704:	4631      	mov	r1, r6
 80a0706:	6820      	ldr	r0, [r4, #0]
 80a0708:	f001 f87e 	bl	80a1808 <_ZN7TwoWire8setSpeedEm>
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a070c:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
 80a070e:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a0710:	f7ff ffe4 	bl	80a06dc <_ZN8MAX3010510readPartIDEv>
 80a0714:	2815      	cmp	r0, #21
 80a0716:	d104      	bne.n	80a0722 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
  readRevisionID();
 80a0718:	4620      	mov	r0, r4
 80a071a:	f7ff ffe3 	bl	80a06e4 <_ZN8MAX3010514readRevisionIDEv>
  return true;
 80a071e:	2001      	movs	r0, #1
}
 80a0720:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a0722:	2000      	movs	r0, #0
 80a0724:	e7fc      	b.n	80a0720 <_ZN8MAX301055beginER7TwoWiremh+0x2c>

080a0726 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a0726:	b570      	push	{r4, r5, r6, lr}
 80a0728:	4604      	mov	r4, r0
 80a072a:	4616      	mov	r6, r2
 80a072c:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a072e:	6800      	ldr	r0, [r0, #0]
 80a0730:	f001 f8a0 	bl	80a1874 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0734:	6820      	ldr	r0, [r4, #0]
 80a0736:	4631      	mov	r1, r6
 80a0738:	6803      	ldr	r3, [r0, #0]
 80a073a:	689b      	ldr	r3, [r3, #8]
 80a073c:	4798      	blx	r3
  _i2cPort->write(value);
 80a073e:	6820      	ldr	r0, [r4, #0]
 80a0740:	4629      	mov	r1, r5
 80a0742:	6803      	ldr	r3, [r0, #0]
 80a0744:	689b      	ldr	r3, [r3, #8]
 80a0746:	4798      	blx	r3
  _i2cPort->endTransmission();
 80a0748:	6820      	ldr	r0, [r4, #0]
}
 80a074a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
 80a074e:	f001 b89c 	b.w	80a188a <_ZN7TwoWire15endTransmissionEv>

080a0752 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
 80a0752:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a0754:	220c      	movs	r2, #12
 80a0756:	7901      	ldrb	r1, [r0, #4]
 80a0758:	f7ff bfe5 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a075c <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
 80a075c:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a075e:	220d      	movs	r2, #13
 80a0760:	7901      	ldrb	r1, [r0, #4]
 80a0762:	f7ff bfe0 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a0766 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
 80a0766:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a0768:	220e      	movs	r2, #14
 80a076a:	7901      	ldrb	r1, [r0, #4]
 80a076c:	f7ff bfdb 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a0770 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
 80a0770:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a0772:	2210      	movs	r2, #16
 80a0774:	7901      	ldrb	r1, [r0, #4]
 80a0776:	f7ff bfd6 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a077a <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
 80a077a:	b510      	push	{r4, lr}
 80a077c:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a077e:	7901      	ldrb	r1, [r0, #4]
 80a0780:	2300      	movs	r3, #0
 80a0782:	2204      	movs	r2, #4
 80a0784:	f7ff ffcf 	bl	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a0788:	4620      	mov	r0, r4
 80a078a:	7921      	ldrb	r1, [r4, #4]
 80a078c:	2300      	movs	r3, #0
 80a078e:	2205      	movs	r2, #5
 80a0790:	f7ff ffc9 	bl	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0794:	4620      	mov	r0, r4
 80a0796:	7921      	ldrb	r1, [r4, #4]
 80a0798:	2300      	movs	r3, #0
}
 80a079a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a079e:	2206      	movs	r2, #6
 80a07a0:	f7ff bfc1 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a07a4 <_ZN8MAX301057bitMaskEhhh>:
{
 80a07a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a07a8:	460d      	mov	r5, r1
 80a07aa:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a07ac:	460a      	mov	r2, r1
 80a07ae:	7901      	ldrb	r1, [r0, #4]
{
 80a07b0:	4604      	mov	r4, r0
 80a07b2:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a07b4:	f7ff fe9d 	bl	80a04f2 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
 80a07b8:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a07bc:	462a      	mov	r2, r5
 80a07be:	4620      	mov	r0, r4
 80a07c0:	7921      	ldrb	r1, [r4, #4]
 80a07c2:	4333      	orrs	r3, r6
}
 80a07c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a07c8:	f7ff bfad 	b.w	80a0726 <_ZN8MAX3010514writeRegister8Ehhh>

080a07cc <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
 80a07cc:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a07ce:	22bf      	movs	r2, #191	; 0xbf
 80a07d0:	2340      	movs	r3, #64	; 0x40
 80a07d2:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
 80a07d4:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a07d6:	f7ff ffe5 	bl	80a07a4 <_ZN8MAX301057bitMaskEhhh>
 80a07da:	f000 fafd 	bl	80a0dd8 <HAL_Timer_Get_Milli_Seconds>
 80a07de:	4605      	mov	r5, r0
 80a07e0:	f000 fafa 	bl	80a0dd8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
 80a07e4:	1b40      	subs	r0, r0, r5
 80a07e6:	2863      	cmp	r0, #99	; 0x63
 80a07e8:	d80a      	bhi.n	80a0800 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a07ea:	2209      	movs	r2, #9
 80a07ec:	4620      	mov	r0, r4
 80a07ee:	7921      	ldrb	r1, [r4, #4]
 80a07f0:	f7ff fe7f 	bl	80a04f2 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a07f4:	0643      	lsls	r3, r0, #25
 80a07f6:	d503      	bpl.n	80a0800 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a07f8:	2001      	movs	r0, #1
 80a07fa:	f000 fcdd 	bl	80a11b8 <delay>
  while (millis() - startTime < 100)
 80a07fe:	e7ef      	b.n	80a07e0 <_ZN8MAX301059softResetEv+0x14>
}
 80a0800:	bd38      	pop	{r3, r4, r5, pc}

080a0802 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
 80a0802:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a0804:	22f8      	movs	r2, #248	; 0xf8
 80a0806:	2109      	movs	r1, #9
 80a0808:	f7ff bfcc 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a080c <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
 80a080c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a080e:	229f      	movs	r2, #159	; 0x9f
 80a0810:	210a      	movs	r1, #10
 80a0812:	f7ff bfc7 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a0816 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
 80a0816:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0818:	22e3      	movs	r2, #227	; 0xe3
 80a081a:	210a      	movs	r1, #10
 80a081c:	f7ff bfc2 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a0820 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
 80a0820:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a0822:	22fc      	movs	r2, #252	; 0xfc
 80a0824:	210a      	movs	r1, #10
 80a0826:	f7ff bfbd 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a082a <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
 80a082a:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a082c:	221f      	movs	r2, #31
 80a082e:	2108      	movs	r1, #8
 80a0830:	f7ff bfb8 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a0834 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a0834:	2310      	movs	r3, #16
 80a0836:	22ef      	movs	r2, #239	; 0xef
 80a0838:	2108      	movs	r1, #8
 80a083a:	f7ff bfb3 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>

080a083e <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
 80a083e:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a0840:	4613      	mov	r3, r2
 80a0842:	2903      	cmp	r1, #3
 80a0844:	d814      	bhi.n	80a0870 <_ZN8MAX3010510enableSlotEhh+0x32>
 80a0846:	e8df f001 	tbb	[pc, r1]
 80a084a:	0602      	.short	0x0602
 80a084c:	0e0b      	.short	0x0e0b
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a084e:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0850:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a0852:	f7ff bfa7 	b.w	80a07a4 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0856:	011b      	lsls	r3, r3, #4
 80a0858:	228f      	movs	r2, #143	; 0x8f
 80a085a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a085e:	e7f7      	b.n	80a0850 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a0860:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a0862:	2112      	movs	r1, #18
 80a0864:	e7f5      	b.n	80a0852 <_ZN8MAX3010510enableSlotEhh+0x14>
 80a0866:	011b      	lsls	r3, r3, #4
 80a0868:	228f      	movs	r2, #143	; 0x8f
 80a086a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a086e:	e7f8      	b.n	80a0862 <_ZN8MAX3010510enableSlotEhh+0x24>
}
 80a0870:	4770      	bx	lr

080a0872 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a0872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0876:	4615      	mov	r5, r2
 80a0878:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
 80a087c:	4604      	mov	r4, r0
 80a087e:	4688      	mov	r8, r1
 80a0880:	461e      	mov	r6, r3
 80a0882:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a0886:	f7ff ffa1 	bl	80a07cc <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a088a:	2d01      	cmp	r5, #1
 80a088c:	d14a      	bne.n	80a0924 <_ZN8MAX301055setupEhhhiii+0xb2>
 80a088e:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a0890:	4620      	mov	r0, r4
 80a0892:	f7ff ffca 	bl	80a082a <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a0896:	4620      	mov	r0, r4
 80a0898:	f7ff ffcc 	bl	80a0834 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a089c:	2e03      	cmp	r6, #3
 80a089e:	d155      	bne.n	80a094c <_ZN8MAX301055setupEhhhiii+0xda>
 80a08a0:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a08a2:	4620      	mov	r0, r4
 80a08a4:	f7ff ffad 	bl	80a0802 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a08a8:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a08ac:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a08ae:	da52      	bge.n	80a0956 <_ZN8MAX301055setupEhhhiii+0xe4>
 80a08b0:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a08b2:	4620      	mov	r0, r4
 80a08b4:	f7ff ffaa 	bl	80a080c <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a08b8:	2f63      	cmp	r7, #99	; 0x63
 80a08ba:	dc59      	bgt.n	80a0970 <_ZN8MAX301055setupEhhhiii+0xfe>
 80a08bc:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a08be:	4620      	mov	r0, r4
 80a08c0:	f7ff ffa9 	bl	80a0816 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a08c4:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a08c8:	dc72      	bgt.n	80a09b0 <_ZN8MAX301055setupEhhhiii+0x13e>
 80a08ca:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	f7ff ffa7 	bl	80a0820 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
 80a08d2:	4641      	mov	r1, r8
 80a08d4:	4620      	mov	r0, r4
 80a08d6:	f7ff ff3c 	bl	80a0752 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a08da:	4641      	mov	r1, r8
 80a08dc:	4620      	mov	r0, r4
 80a08de:	f7ff ff3d 	bl	80a075c <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a08e2:	4641      	mov	r1, r8
 80a08e4:	4620      	mov	r0, r4
 80a08e6:	f7ff ff3e 	bl	80a0766 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a08ea:	4641      	mov	r1, r8
 80a08ec:	4620      	mov	r0, r4
 80a08ee:	f7ff ff3f 	bl	80a0770 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
 80a08f2:	2201      	movs	r2, #1
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	4611      	mov	r1, r2
 80a08f8:	f7ff ffa1 	bl	80a083e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a08fc:	2e01      	cmp	r6, #1
 80a08fe:	d90c      	bls.n	80a091a <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0900:	2320      	movs	r3, #32
 80a0902:	228f      	movs	r2, #143	; 0x8f
 80a0904:	2111      	movs	r1, #17
 80a0906:	4620      	mov	r0, r4
 80a0908:	f7ff ff4c 	bl	80a07a4 <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a090c:	2e02      	cmp	r6, #2
 80a090e:	d004      	beq.n	80a091a <_ZN8MAX301055setupEhhhiii+0xa8>
 80a0910:	2203      	movs	r2, #3
 80a0912:	4620      	mov	r0, r4
 80a0914:	4611      	mov	r1, r2
 80a0916:	f7ff ff92 	bl	80a083e <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a091a:	4620      	mov	r0, r4
}
 80a091c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0920:	f7ff bf2b 	b.w	80a077a <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a0924:	2d02      	cmp	r5, #2
 80a0926:	d101      	bne.n	80a092c <_ZN8MAX301055setupEhhhiii+0xba>
 80a0928:	2120      	movs	r1, #32
 80a092a:	e7b1      	b.n	80a0890 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a092c:	2d04      	cmp	r5, #4
 80a092e:	d101      	bne.n	80a0934 <_ZN8MAX301055setupEhhhiii+0xc2>
 80a0930:	2140      	movs	r1, #64	; 0x40
 80a0932:	e7ad      	b.n	80a0890 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a0934:	2d08      	cmp	r5, #8
 80a0936:	d101      	bne.n	80a093c <_ZN8MAX301055setupEhhhiii+0xca>
 80a0938:	2160      	movs	r1, #96	; 0x60
 80a093a:	e7a9      	b.n	80a0890 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a093c:	2d10      	cmp	r5, #16
 80a093e:	d101      	bne.n	80a0944 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a0940:	2180      	movs	r1, #128	; 0x80
 80a0942:	e7a5      	b.n	80a0890 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a0944:	2d20      	cmp	r5, #32
 80a0946:	d1f3      	bne.n	80a0930 <_ZN8MAX301055setupEhhhiii+0xbe>
 80a0948:	21a0      	movs	r1, #160	; 0xa0
 80a094a:	e7a1      	b.n	80a0890 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a094c:	2e02      	cmp	r6, #2
 80a094e:	bf0c      	ite	eq
 80a0950:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a0952:	2102      	movne	r1, #2
 80a0954:	e7a5      	b.n	80a08a2 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a0956:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a095a:	da01      	bge.n	80a0960 <_ZN8MAX301055setupEhhhiii+0xee>
 80a095c:	2120      	movs	r1, #32
 80a095e:	e7a8      	b.n	80a08b2 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a0960:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a0964:	da01      	bge.n	80a096a <_ZN8MAX301055setupEhhhiii+0xf8>
 80a0966:	2140      	movs	r1, #64	; 0x40
 80a0968:	e7a3      	b.n	80a08b2 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a096a:	d1a1      	bne.n	80a08b0 <_ZN8MAX301055setupEhhhiii+0x3e>
 80a096c:	2160      	movs	r1, #96	; 0x60
 80a096e:	e7a0      	b.n	80a08b2 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a0970:	2fc7      	cmp	r7, #199	; 0xc7
 80a0972:	dc01      	bgt.n	80a0978 <_ZN8MAX301055setupEhhhiii+0x106>
 80a0974:	2104      	movs	r1, #4
 80a0976:	e7a2      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a0978:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
 80a097c:	da01      	bge.n	80a0982 <_ZN8MAX301055setupEhhhiii+0x110>
 80a097e:	2108      	movs	r1, #8
 80a0980:	e79d      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a0982:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 80a0986:	da01      	bge.n	80a098c <_ZN8MAX301055setupEhhhiii+0x11a>
 80a0988:	210c      	movs	r1, #12
 80a098a:	e798      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a098c:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 80a0990:	da01      	bge.n	80a0996 <_ZN8MAX301055setupEhhhiii+0x124>
 80a0992:	2110      	movs	r1, #16
 80a0994:	e793      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a0996:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 80a099a:	da01      	bge.n	80a09a0 <_ZN8MAX301055setupEhhhiii+0x12e>
 80a099c:	2114      	movs	r1, #20
 80a099e:	e78e      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a09a0:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 80a09a4:	da01      	bge.n	80a09aa <_ZN8MAX301055setupEhhhiii+0x138>
 80a09a6:	2118      	movs	r1, #24
 80a09a8:	e789      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a09aa:	d187      	bne.n	80a08bc <_ZN8MAX301055setupEhhhiii+0x4a>
 80a09ac:	211c      	movs	r1, #28
 80a09ae:	e786      	b.n	80a08be <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a09b0:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a09b4:	dc01      	bgt.n	80a09ba <_ZN8MAX301055setupEhhhiii+0x148>
 80a09b6:	2101      	movs	r1, #1
 80a09b8:	e788      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a09ba:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a09be:	dc01      	bgt.n	80a09c4 <_ZN8MAX301055setupEhhhiii+0x152>
 80a09c0:	2102      	movs	r1, #2
 80a09c2:	e783      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a09c4:	f240 139b 	movw	r3, #411	; 0x19b
 80a09c8:	4599      	cmp	r9, r3
 80a09ca:	f47f af7e 	bne.w	80a08ca <_ZN8MAX301055setupEhhhiii+0x58>
 80a09ce:	2103      	movs	r1, #3
 80a09d0:	e77c      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x5a>

080a09d2 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80a09d2:	4684      	mov	ip, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
 80a09d4:	2000      	movs	r0, #0
{
 80a09d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
 80a09da:	2401      	movs	r4, #1
  *n_npks = 0;
 80a09dc:	6008      	str	r0, [r1, #0]
  
  while (i < n_size-1){
 80a09de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a09e2:	45a0      	cmp	r8, r4
 80a09e4:	dd26      	ble.n	80a0a34 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 80a09e6:	9d06      	ldr	r5, [sp, #24]
 80a09e8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80a09ec:	00a6      	lsls	r6, r4, #2
 80a09ee:	42a8      	cmp	r0, r5
 80a09f0:	f104 0501 	add.w	r5, r4, #1
 80a09f4:	dd1c      	ble.n	80a0a30 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a09f6:	4416      	add	r6, r2
 80a09f8:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80a09fc:	42b0      	cmp	r0, r6
 80a09fe:	dd17      	ble.n	80a0a30 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0a00:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80a0a02:	429e      	cmp	r6, r3
 80a0a04:	4635      	mov	r5, r6
 80a0a06:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80a0a0a:	eba6 0e04 	sub.w	lr, r6, r4
 80a0a0e:	d003      	beq.n	80a0a18 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
 80a0a10:	42b8      	cmp	r0, r7
 80a0a12:	f106 0601 	add.w	r6, r6, #1
 80a0a16:	d0f4      	beq.n	80a0a02 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80a0a18:	42b8      	cmp	r0, r7
 80a0a1a:	dd09      	ble.n	80a0a30 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0a1c:	6808      	ldr	r0, [r1, #0]
 80a0a1e:	280e      	cmp	r0, #14
 80a0a20:	dc06      	bgt.n	80a0a30 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
 80a0a22:	1c45      	adds	r5, r0, #1
 80a0a24:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 80a0a26:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
 80a0a2a:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
        i += n_width+1;
 80a0a2e:	4425      	add	r5, r4
{
 80a0a30:	462c      	mov	r4, r5
 80a0a32:	e7d6      	b.n	80a09e2 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
        i += n_width;
    }
    else
      i++;
  }
}
 80a0a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a38 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80a0a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a0a3a:	2301      	movs	r3, #1
 80a0a3c:	4604      	mov	r4, r0
 80a0a3e:	428b      	cmp	r3, r1
 80a0a40:	da0f      	bge.n	80a0a62 <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
 80a0a42:	f854 6f04 	ldr.w	r6, [r4, #4]!
 80a0a46:	461a      	mov	r2, r3
 80a0a48:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a0a4a:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80a0a4e:	42b7      	cmp	r7, r6
 80a0a50:	dd03      	ble.n	80a0a5a <_Z17maxim_sort_ascendPll+0x22>
 80a0a52:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
 80a0a54:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a0a58:	d1f7      	bne.n	80a0a4a <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
 80a0a5a:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a0a5e:	3301      	adds	r3, #1
 80a0a60:	e7ed      	b.n	80a0a3e <_Z17maxim_sort_ascendPll+0x6>
  }
}
 80a0a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a64 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80a0a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a0a68:	2301      	movs	r3, #1
{
 80a0a6a:	4690      	mov	r8, r2
 80a0a6c:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
 80a0a6e:	4543      	cmp	r3, r8
 80a0a70:	da16      	bge.n	80a0aa0 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
 80a0a72:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a0a76:	461c      	mov	r4, r3
 80a0a78:	46ac      	mov	ip, r5
 80a0a7a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 80a0a7e:	f8d9 2000 	ldr.w	r2, [r9]
 80a0a82:	f85c 7c04 	ldr.w	r7, [ip, #-4]
 80a0a86:	4696      	mov	lr, r2
 80a0a88:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80a0a8c:	4596      	cmp	lr, r2
 80a0a8e:	dd03      	ble.n	80a0a98 <_Z26maxim_sort_indices_descendPlS_l+0x34>
 80a0a90:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
 80a0a92:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a0a96:	d1f2      	bne.n	80a0a7e <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
 80a0a98:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a0a9c:	3301      	adds	r3, #1
 80a0a9e:	e7e6      	b.n	80a0a6e <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
 80a0aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0aa4 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
 80a0aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0aa8:	4604      	mov	r4, r0
 80a0aaa:	461e      	mov	r6, r3
 80a0aac:	4610      	mov	r0, r2
 80a0aae:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80a0ab0:	680a      	ldr	r2, [r1, #0]
 80a0ab2:	4621      	mov	r1, r4
 80a0ab4:	f7ff ffd6 	bl	80a0a64 <_Z26maxim_sort_indices_descendPlS_l>
 80a0ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0abc:	1f27      	subs	r7, r4, #4
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0abe:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
 80a0ac2:	6829      	ldr	r1, [r5, #0]
 80a0ac4:	4694      	mov	ip, r2
 80a0ac6:	4291      	cmp	r1, r2
 80a0ac8:	dd1f      	ble.n	80a0b0a <_Z24maxim_remove_close_peaksPlS_S_l+0x66>
    *pn_npks = i+1;
 80a0aca:	3201      	adds	r2, #1
 80a0acc:	4610      	mov	r0, r2
 80a0ace:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0ad0:	4281      	cmp	r1, r0
 80a0ad2:	d101      	bne.n	80a0ad8 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
 80a0ad4:	3704      	adds	r7, #4
 80a0ad6:	e7f4      	b.n	80a0ac2 <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80a0ad8:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80a0adc:	bf0c      	ite	eq
 80a0ade:	46e6      	moveq	lr, ip
 80a0ae0:	f8d7 e000 	ldrne.w	lr, [r7]
 80a0ae4:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0ae8:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0aec:	42b3      	cmp	r3, r6
 80a0aee:	dc01      	bgt.n	80a0af4 <_Z24maxim_remove_close_peaksPlS_S_l+0x50>
 80a0af0:	4598      	cmp	r8, r3
 80a0af2:	dd08      	ble.n	80a0b06 <_Z24maxim_remove_close_peaksPlS_S_l+0x62>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 80a0af4:	f8d5 e000 	ldr.w	lr, [r5]
 80a0af8:	f10e 0301 	add.w	r3, lr, #1
 80a0afc:	602b      	str	r3, [r5, #0]
 80a0afe:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0b02:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0b06:	3001      	adds	r0, #1
 80a0b08:	e7e2      	b.n	80a0ad0 <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0b0a:	4620      	mov	r0, r4
}
 80a0b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0b10:	f7ff bf92 	b.w	80a0a38 <_Z17maxim_sort_ascendPll>

080a0b14 <_Z16maxim_find_peaksPlS_S_llll>:
{
 80a0b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0b16:	4605      	mov	r5, r0
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0b18:	9f08      	ldr	r7, [sp, #32]
{
 80a0b1a:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0b1c:	9700      	str	r7, [sp, #0]
 80a0b1e:	f7ff ff58 	bl	80a09d2 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 80a0b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b24:	4628      	mov	r0, r5
 80a0b26:	f7ff ffbd 	bl	80a0aa4 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
 80a0b2a:	6822      	ldr	r2, [r4, #0]
 80a0b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0b2e:	429a      	cmp	r2, r3
 80a0b30:	bfd4      	ite	le
 80a0b32:	6022      	strle	r2, [r4, #0]
 80a0b34:	6023      	strgt	r3, [r4, #0]
}
 80a0b36:	b003      	add	sp, #12
 80a0b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
 80a0b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b40:	4617      	mov	r7, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0b42:	2200      	movs	r2, #0
{
 80a0b44:	469b      	mov	fp, r3
 80a0b46:	4605      	mov	r5, r0
 80a0b48:	460c      	mov	r4, r1
  un_ir_mean =0; 
 80a0b4a:	4613      	mov	r3, r2
{
 80a0b4c:	b09f      	sub	sp, #124	; 0x7c
 80a0b4e:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0b52:	42a2      	cmp	r2, r4
 80a0b54:	da04      	bge.n	80a0b60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
 80a0b56:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0b5a:	3201      	adds	r2, #1
 80a0b5c:	440b      	add	r3, r1
 80a0b5e:	e7f8      	b.n	80a0b52 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80a0b60:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80a0d98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
 80a0b64:	fbb3 f3f4 	udiv	r3, r3, r4
 80a0b68:	4640      	mov	r0, r8
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0b6a:	2200      	movs	r2, #0
 80a0b6c:	42a2      	cmp	r2, r4
 80a0b6e:	da06      	bge.n	80a0b7e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0b70:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0b74:	3201      	adds	r2, #1
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0b76:	1a59      	subs	r1, r3, r1
 80a0b78:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0b7c:	e7f6      	b.n	80a0b6c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0b7e:	2100      	movs	r1, #0
 80a0b80:	4a85      	ldr	r2, [pc, #532]	; (80a0d98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0b82:	6813      	ldr	r3, [r2, #0]
 80a0b84:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a0b88:	3101      	adds	r1, #1
 80a0b8a:	4403      	add	r3, r0
 80a0b8c:	6850      	ldr	r0, [r2, #4]
 80a0b8e:	4403      	add	r3, r0
 80a0b90:	6890      	ldr	r0, [r2, #8]
 80a0b92:	181b      	adds	r3, r3, r0
 80a0b94:	bf48      	it	mi
 80a0b96:	3303      	addmi	r3, #3
 80a0b98:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0b9a:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0b9c:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0ba0:	d1ef      	bne.n	80a0b82 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x46>
  n_th1=0; 
 80a0ba2:	2300      	movs	r3, #0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0ba4:	461a      	mov	r2, r3
 80a0ba6:	497c      	ldr	r1, [pc, #496]	; (80a0d98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    n_th1 +=  an_x[k];
 80a0ba8:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0bac:	3201      	adds	r2, #1
 80a0bae:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
 80a0bb0:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0bb2:	d1f9      	bne.n	80a0ba8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6c>
  if( n_th1<30) n_th1=30; // min allowed
 80a0bb4:	f640 31b7 	movw	r1, #2999	; 0xbb7
 80a0bb8:	428b      	cmp	r3, r1
 80a0bba:	dd4b      	ble.n	80a0c54 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80a0bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0bc0:	2b3c      	cmp	r3, #60	; 0x3c
 80a0bc2:	bfa8      	it	ge
 80a0bc4:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0bc6:	2200      	movs	r2, #0
 80a0bc8:	ae0f      	add	r6, sp, #60	; 0x3c
  if( n_th1<30) n_th1=30; // min allowed
 80a0bca:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0bcc:	4692      	mov	sl, r2
 80a0bce:	3201      	adds	r2, #1
 80a0bd0:	2a0f      	cmp	r2, #15
 80a0bd2:	f841 ab04 	str.w	sl, [r1], #4
 80a0bd6:	d1fa      	bne.n	80a0bce <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x92>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 80a0bd8:	9202      	str	r2, [sp, #8]
 80a0bda:	2204      	movs	r2, #4
 80a0bdc:	4630      	mov	r0, r6
 80a0bde:	e9cd 3200 	strd	r3, r2, [sp]
 80a0be2:	a909      	add	r1, sp, #36	; 0x24
 80a0be4:	2364      	movs	r3, #100	; 0x64
 80a0be6:	4a6c      	ldr	r2, [pc, #432]	; (80a0d98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
 80a0be8:	f7ff ff94 	bl	80a0b14 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
 80a0bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0bee:	2b01      	cmp	r3, #1
 80a0bf0:	dd32      	ble.n	80a0c58 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x11c>
 80a0bf2:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
 80a0bf4:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0bf6:	2001      	movs	r0, #1
 80a0bf8:	4671      	mov	r1, lr
 80a0bfa:	f8de c004 	ldr.w	ip, [lr, #4]
 80a0bfe:	6809      	ldr	r1, [r1, #0]
 80a0c00:	3001      	adds	r0, #1
 80a0c02:	ebac 0c01 	sub.w	ip, ip, r1
 80a0c06:	4283      	cmp	r3, r0
 80a0c08:	f10e 0e04 	add.w	lr, lr, #4
 80a0c0c:	4462      	add	r2, ip
 80a0c0e:	d1f3      	bne.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xbc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80a0c10:	1e59      	subs	r1, r3, #1
 80a0c12:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80a0c16:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0c1a:	fb91 f2f2 	sdiv	r2, r1, r2
 80a0c1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0c20:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
 80a0c22:	2201      	movs	r2, #1
 80a0c24:	f889 2000 	strb.w	r2, [r9]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0c28:	2200      	movs	r2, #0
 80a0c2a:	485c      	ldr	r0, [pc, #368]	; (80a0d9c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0c2c:	42a2      	cmp	r2, r4
 80a0c2e:	db19      	blt.n	80a0c64 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
  for(k=0; k< 5; k++) an_ratio[k]=0;
 80a0c30:	2200      	movs	r2, #0
 80a0c32:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 80a0c36:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80a0c3a:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0c3c:	a90f      	add	r1, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0c3e:	4293      	cmp	r3, r2
 80a0c40:	dd1c      	ble.n	80a0c7c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x140>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0c42:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80a0c46:	2864      	cmp	r0, #100	; 0x64
 80a0c48:	dd16      	ble.n	80a0c78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13c>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80a0c4a:	4b55      	ldr	r3, [pc, #340]	; (80a0da0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0c4c:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
 80a0c50:	2300      	movs	r3, #0
 80a0c52:	e097      	b.n	80a0d84 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
 80a0c54:	231e      	movs	r3, #30
 80a0c56:	e7b6      	b.n	80a0bc6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8a>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 80a0c58:	4a51      	ldr	r2, [pc, #324]	; (80a0da0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0c5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0c5c:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
 80a0c5e:	f889 a000 	strb.w	sl, [r9]
 80a0c62:	e7e1      	b.n	80a0c28 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
      an_x[k] =  pun_ir_buffer[k] ; 
 80a0c64:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0c68:	f848 1b04 	str.w	r1, [r8], #4
      an_y[k] =  pun_red_buffer[k] ; 
 80a0c6c:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0c70:	3201      	adds	r2, #1
      an_y[k] =  pun_red_buffer[k] ; 
 80a0c72:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0c76:	e7d9      	b.n	80a0c2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0c78:	3201      	adds	r2, #1
 80a0c7a:	e7e0      	b.n	80a0c3e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x102>
  int32_t n_x_dc_max_idx = 0; 
 80a0c7c:	2000      	movs	r0, #0
  int32_t n_y_dc_max_idx = 0;
 80a0c7e:	4607      	mov	r7, r0
  n_i_ratio_count = 0; 
 80a0c80:	4601      	mov	r1, r0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0c82:	3b01      	subs	r3, #1
 80a0c84:	f8df c110 	ldr.w	ip, [pc, #272]	; 80a0d98 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c88:	f8df e110 	ldr.w	lr, [pc, #272]	; 80a0d9c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0c8c:	9005      	str	r0, [sp, #20]
 80a0c8e:	9307      	str	r3, [sp, #28]
 80a0c90:	9b07      	ldr	r3, [sp, #28]
 80a0c92:	9a05      	ldr	r2, [sp, #20]
 80a0c94:	4293      	cmp	r3, r2
 80a0c96:	dd59      	ble.n	80a0d4c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 80a0c98:	4613      	mov	r3, r2
 80a0c9a:	3301      	adds	r3, #1
 80a0c9c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a0ca0:	9305      	str	r3, [sp, #20]
 80a0ca2:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0ca6:	eba8 0903 	sub.w	r9, r8, r3
 80a0caa:	f1b9 0f03 	cmp.w	r9, #3
 80a0cae:	ddef      	ble.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
    n_x_dc_max= -16777216; 
 80a0cb0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0cb4:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
 80a0cb6:	9206      	str	r2, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0cb8:	45a8      	cmp	r8, r5
 80a0cba:	dd10      	ble.n	80a0cde <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a2>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0cbc:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0cc0:	9c06      	ldr	r4, [sp, #24]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0cc2:	4592      	cmp	sl, r2
 80a0cc4:	bfc8      	it	gt
 80a0cc6:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0cc8:	f85e a025 	ldr.w	sl, [lr, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0ccc:	bfc8      	it	gt
 80a0cce:	4628      	movgt	r0, r5
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0cd0:	45a2      	cmp	sl, r4
 80a0cd2:	bfc4      	itt	gt
 80a0cd4:	462f      	movgt	r7, r5
 80a0cd6:	f8cd a018 	strgt.w	sl, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0cda:	3501      	adds	r5, #1
 80a0cdc:	e7ec      	b.n	80a0cb8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x17c>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80a0cde:	f85c 4028 	ldr.w	r4, [ip, r8, lsl #2]
 80a0ce2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80a0ce6:	eba4 0a05 	sub.w	sl, r4, r5
 80a0cea:	1ac5      	subs	r5, r0, r3
 80a0cec:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0cf0:	fb95 faf9 	sdiv	sl, r5, r9
 80a0cf4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0cf8:	9c06      	ldr	r4, [sp, #24]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0cfa:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80a0cfc:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 80a0d00:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0d04:	fb04 f40a 	mul.w	r4, r4, sl
 80a0d08:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0d0a:	2c00      	cmp	r4, #0
 80a0d0c:	ddc0      	ble.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
 80a0d0e:	2904      	cmp	r1, #4
 80a0d10:	dcbe      	bgt.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80a0d12:	f85e 5023 	ldr.w	r5, [lr, r3, lsl #2]
 80a0d16:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80a0d1a:	1afb      	subs	r3, r7, r3
 80a0d1c:	eba8 0805 	sub.w	r8, r8, r5
 80a0d20:	fb03 f308 	mul.w	r3, r3, r8
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 80a0d24:	fb93 f3f9 	sdiv	r3, r3, r9
 80a0d28:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80a0d2a:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 80a0d2e:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80a0d30:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0d32:	11d2      	asrs	r2, r2, #7
 80a0d34:	d0ac      	beq.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0d36:	ab1e      	add	r3, sp, #120	; 0x78
 80a0d38:	eb03 0881 	add.w	r8, r3, r1, lsl #2
 80a0d3c:	2364      	movs	r3, #100	; 0x64
 80a0d3e:	435a      	muls	r2, r3
 80a0d40:	fb92 f4f4 	sdiv	r4, r2, r4
        n_i_ratio_count++;
 80a0d44:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0d46:	f848 4c50 	str.w	r4, [r8, #-80]
        n_i_ratio_count++;
 80a0d4a:	e7a1      	b.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80a0d4c:	a80a      	add	r0, sp, #40	; 0x28
 80a0d4e:	f7ff fe73 	bl	80a0a38 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
 80a0d52:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
 80a0d54:	2903      	cmp	r1, #3
 80a0d56:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80a0d5a:	dd18      	ble.n	80a0d8e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80a0d5c:	a91e      	add	r1, sp, #120	; 0x78
 80a0d5e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a0d62:	f851 3c54 	ldr.w	r3, [r1, #-84]
 80a0d66:	f851 2c50 	ldr.w	r2, [r1, #-80]
 80a0d6a:	4413      	add	r3, r2
 80a0d6c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a0d70:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
 80a0d72:	1eda      	subs	r2, r3, #3
 80a0d74:	2ab4      	cmp	r2, #180	; 0xb4
 80a0d76:	f63f af68 	bhi.w	80a0c4a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10e>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80a0d7a:	4a0a      	ldr	r2, [pc, #40]	; (80a0da4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
 80a0d7c:	5cd3      	ldrb	r3, [r2, r3]
 80a0d7e:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80a0d82:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
 80a0d84:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80a0d86:	7013      	strb	r3, [r2, #0]
}
 80a0d88:	b01f      	add	sp, #124	; 0x7c
 80a0d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
 80a0d8e:	aa1e      	add	r2, sp, #120	; 0x78
 80a0d90:	4413      	add	r3, r2
 80a0d92:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80a0d96:	e7ec      	b.n	80a0d72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
 80a0d98:	200003f4 	.word	0x200003f4
 80a0d9c:	20000584 	.word	0x20000584
 80a0da0:	fffffc19 	.word	0xfffffc19
 80a0da4:	080a2675 	.word	0x080a2675

080a0da8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <os_mutex_recursive_create+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601d0 	.word	0x080601d0

080a0db8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <os_mutex_recursive_destroy+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601d0 	.word	0x080601d0

080a0dc8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <HAL_RNG_GetRandomNumber+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	685b      	ldr	r3, [r3, #4]
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	0806019c 	.word	0x0806019c

080a0dd8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	695b      	ldr	r3, [r3, #20]
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	0806019c 	.word	0x0806019c

080a0de8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <HAL_Pin_Mode+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	689b      	ldr	r3, [r3, #8]
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601b0 	.word	0x080601b0

080a0df8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <HAL_Get_Pin_Mode+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	68db      	ldr	r3, [r3, #12]
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601b0 	.word	0x080601b0

080a0e08 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <HAL_GPIO_Write+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	691b      	ldr	r3, [r3, #16]
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601b0 	.word	0x080601b0

080a0e18 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <hal_i2c_set_speed+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601ac 	.word	0x080601ac

080a0e28 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <hal_i2c_begin+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601ac 	.word	0x080601ac

080a0e38 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <hal_i2c_begin_transmission+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601ac 	.word	0x080601ac

080a0e48 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <hal_i2c_end_transmission+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601ac 	.word	0x080601ac

080a0e58 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0e58:	b508      	push	{r3, lr}
 80a0e5a:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <hal_i2c_write+0xc>)
 80a0e5c:	681b      	ldr	r3, [r3, #0]
 80a0e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0e60:	9301      	str	r3, [sp, #4]
 80a0e62:	bd08      	pop	{r3, pc}
 80a0e64:	080601ac 	.word	0x080601ac

080a0e68 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <hal_i2c_available+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080601ac 	.word	0x080601ac

080a0e78 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <hal_i2c_read+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080601ac 	.word	0x080601ac

080a0e88 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <hal_i2c_peek+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080601ac 	.word	0x080601ac

080a0e98 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <hal_i2c_flush+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601ac 	.word	0x080601ac

080a0ea8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <hal_i2c_is_enabled+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601ac 	.word	0x080601ac

080a0eb8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b03      	ldr	r3, [pc, #12]	; (80a0ec8 <hal_i2c_init+0x10>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0ec2:	9301      	str	r3, [sp, #4]
 80a0ec4:	bd08      	pop	{r3, pc}
 80a0ec6:	0000      	.short	0x0000
 80a0ec8:	080601ac 	.word	0x080601ac

080a0ecc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0ecc:	b508      	push	{r3, lr}
 80a0ece:	4b03      	ldr	r3, [pc, #12]	; (80a0edc <hal_i2c_request_ex+0x10>)
 80a0ed0:	681b      	ldr	r3, [r3, #0]
 80a0ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ed6:	9301      	str	r3, [sp, #4]
 80a0ed8:	bd08      	pop	{r3, pc}
 80a0eda:	0000      	.short	0x0000
 80a0edc:	080601ac 	.word	0x080601ac

080a0ee0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <hal_spi_init+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	69db      	ldr	r3, [r3, #28]
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601b4 	.word	0x080601b4

080a0ef0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <hal_spi_is_enabled+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	6a1b      	ldr	r3, [r3, #32]
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601b4 	.word	0x080601b4

080a0f00 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <hal_usart_init+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	699b      	ldr	r3, [r3, #24]
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601c4 	.word	0x080601c4

080a0f10 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <hal_usart_write+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601c4 	.word	0x080601c4

080a0f20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <hal_usart_available+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601c4 	.word	0x080601c4

080a0f30 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <hal_usart_read+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601c4 	.word	0x080601c4

080a0f40 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <hal_usart_peek+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601c4 	.word	0x080601c4

080a0f50 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <hal_usart_flush+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601c4 	.word	0x080601c4

080a0f60 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <hal_usart_is_enabled+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601c4 	.word	0x080601c4

080a0f70 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <hal_usart_available_data_for_write+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601c4 	.word	0x080601c4

080a0f80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <HAL_USB_USART_Init+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	681b      	ldr	r3, [r3, #0]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601d8 	.word	0x080601d8

080a0f90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <HAL_USB_USART_Begin+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	685b      	ldr	r3, [r3, #4]
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601d8 	.word	0x080601d8

080a0fa0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <HAL_USB_USART_Available_Data+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	691b      	ldr	r3, [r3, #16]
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601d8 	.word	0x080601d8

080a0fb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	695b      	ldr	r3, [r3, #20]
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601d8 	.word	0x080601d8

080a0fc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <HAL_USB_USART_Receive_Data+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	699b      	ldr	r3, [r3, #24]
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	080601d8 	.word	0x080601d8

080a0fd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <HAL_USB_USART_Send_Data+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	69db      	ldr	r3, [r3, #28]
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	080601d8 	.word	0x080601d8

080a0fe0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <HAL_USB_USART_Flush_Data+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	6a1b      	ldr	r3, [r3, #32]
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	080601d8 	.word	0x080601d8

080a0ff0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <inet_gethostbyname+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080601c0 	.word	0x080601c0

080a1000 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <set_system_mode+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	685b      	ldr	r3, [r3, #4]
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601a4 	.word	0x080601a4

080a1010 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <system_delay_ms+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	695b      	ldr	r3, [r3, #20]
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601a4 	.word	0x080601a4

080a1020 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <application_thread_current+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601a4 	.word	0x080601a4

080a1030 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <application_thread_invoke+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601a4 	.word	0x080601a4

080a1040 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b03      	ldr	r3, [pc, #12]	; (80a1050 <system_ctrl_set_app_request_handler+0x10>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a104a:	9301      	str	r3, [sp, #4]
 80a104c:	bd08      	pop	{r3, pc}
 80a104e:	0000      	.short	0x0000
 80a1050:	080601a4 	.word	0x080601a4

080a1054 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1054:	b508      	push	{r3, lr}
 80a1056:	4b03      	ldr	r3, [pc, #12]	; (80a1064 <system_ctrl_set_result+0x10>)
 80a1058:	681b      	ldr	r3, [r3, #0]
 80a105a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a105e:	9301      	str	r3, [sp, #4]
 80a1060:	bd08      	pop	{r3, pc}
 80a1062:	0000      	.short	0x0000
 80a1064:	080601a4 	.word	0x080601a4

080a1068 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <spark_cloud_flag_connected+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	695b      	ldr	r3, [r3, #20]
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601cc 	.word	0x080601cc

080a1078 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1078:	b508      	push	{r3, lr}
 80a107a:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <spark_send_event+0xc>)
 80a107c:	681b      	ldr	r3, [r3, #0]
 80a107e:	6a1b      	ldr	r3, [r3, #32]
 80a1080:	9301      	str	r3, [sp, #4]
 80a1082:	bd08      	pop	{r3, pc}
 80a1084:	080601cc 	.word	0x080601cc

080a1088 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601cc 	.word	0x080601cc

080a1098 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1098:	b508      	push	{r3, lr}
 80a109a:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <network_connect+0xc>)
 80a109c:	681b      	ldr	r3, [r3, #0]
 80a109e:	685b      	ldr	r3, [r3, #4]
 80a10a0:	9301      	str	r3, [sp, #4]
 80a10a2:	bd08      	pop	{r3, pc}
 80a10a4:	080601c8 	.word	0x080601c8

080a10a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a10a8:	b508      	push	{r3, lr}
 80a10aa:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <network_connecting+0xc>)
 80a10ac:	681b      	ldr	r3, [r3, #0]
 80a10ae:	689b      	ldr	r3, [r3, #8]
 80a10b0:	9301      	str	r3, [sp, #4]
 80a10b2:	bd08      	pop	{r3, pc}
 80a10b4:	080601c8 	.word	0x080601c8

080a10b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b02      	ldr	r3, [pc, #8]	; (80a10c4 <network_disconnect+0xc>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	68db      	ldr	r3, [r3, #12]
 80a10c0:	9301      	str	r3, [sp, #4]
 80a10c2:	bd08      	pop	{r3, pc}
 80a10c4:	080601c8 	.word	0x080601c8

080a10c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a10c8:	b508      	push	{r3, lr}
 80a10ca:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <network_ready+0xc>)
 80a10cc:	681b      	ldr	r3, [r3, #0]
 80a10ce:	691b      	ldr	r3, [r3, #16]
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	bd08      	pop	{r3, pc}
 80a10d4:	080601c8 	.word	0x080601c8

080a10d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <network_on+0xc>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	695b      	ldr	r3, [r3, #20]
 80a10e0:	9301      	str	r3, [sp, #4]
 80a10e2:	bd08      	pop	{r3, pc}
 80a10e4:	080601c8 	.word	0x080601c8

080a10e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10e8:	b508      	push	{r3, lr}
 80a10ea:	4b02      	ldr	r3, [pc, #8]	; (80a10f4 <network_off+0xc>)
 80a10ec:	681b      	ldr	r3, [r3, #0]
 80a10ee:	699b      	ldr	r3, [r3, #24]
 80a10f0:	9301      	str	r3, [sp, #4]
 80a10f2:	bd08      	pop	{r3, pc}
 80a10f4:	080601c8 	.word	0x080601c8

080a10f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a10f8:	b508      	push	{r3, lr}
 80a10fa:	4b02      	ldr	r3, [pc, #8]	; (80a1104 <network_listen+0xc>)
 80a10fc:	681b      	ldr	r3, [r3, #0]
 80a10fe:	69db      	ldr	r3, [r3, #28]
 80a1100:	9301      	str	r3, [sp, #4]
 80a1102:	bd08      	pop	{r3, pc}
 80a1104:	080601c8 	.word	0x080601c8

080a1108 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1108:	b508      	push	{r3, lr}
 80a110a:	4b02      	ldr	r3, [pc, #8]	; (80a1114 <network_listening+0xc>)
 80a110c:	681b      	ldr	r3, [r3, #0]
 80a110e:	6a1b      	ldr	r3, [r3, #32]
 80a1110:	9301      	str	r3, [sp, #4]
 80a1112:	bd08      	pop	{r3, pc}
 80a1114:	080601c8 	.word	0x080601c8

080a1118 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1118:	b508      	push	{r3, lr}
 80a111a:	4b02      	ldr	r3, [pc, #8]	; (80a1124 <network_set_listen_timeout+0xc>)
 80a111c:	681b      	ldr	r3, [r3, #0]
 80a111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1120:	9301      	str	r3, [sp, #4]
 80a1122:	bd08      	pop	{r3, pc}
 80a1124:	080601c8 	.word	0x080601c8

080a1128 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1128:	b508      	push	{r3, lr}
 80a112a:	4b02      	ldr	r3, [pc, #8]	; (80a1134 <network_get_listen_timeout+0xc>)
 80a112c:	681b      	ldr	r3, [r3, #0]
 80a112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1130:	9301      	str	r3, [sp, #4]
 80a1132:	bd08      	pop	{r3, pc}
 80a1134:	080601c8 	.word	0x080601c8

080a1138 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1138:	b508      	push	{r3, lr}
 80a113a:	4b02      	ldr	r3, [pc, #8]	; (80a1144 <network_is_on+0xc>)
 80a113c:	681b      	ldr	r3, [r3, #0]
 80a113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1140:	9301      	str	r3, [sp, #4]
 80a1142:	bd08      	pop	{r3, pc}
 80a1144:	080601c8 	.word	0x080601c8

080a1148 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1148:	b508      	push	{r3, lr}
 80a114a:	4b02      	ldr	r3, [pc, #8]	; (80a1154 <network_is_off+0xc>)
 80a114c:	681b      	ldr	r3, [r3, #0]
 80a114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1150:	9301      	str	r3, [sp, #4]
 80a1152:	bd08      	pop	{r3, pc}
 80a1154:	080601c8 	.word	0x080601c8

080a1158 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1158:	b508      	push	{r3, lr}
 80a115a:	4b02      	ldr	r3, [pc, #8]	; (80a1164 <malloc+0xc>)
 80a115c:	681b      	ldr	r3, [r3, #0]
 80a115e:	681b      	ldr	r3, [r3, #0]
 80a1160:	9301      	str	r3, [sp, #4]
 80a1162:	bd08      	pop	{r3, pc}
 80a1164:	080601a0 	.word	0x080601a0

080a1168 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1168:	b508      	push	{r3, lr}
 80a116a:	4b02      	ldr	r3, [pc, #8]	; (80a1174 <free+0xc>)
 80a116c:	681b      	ldr	r3, [r3, #0]
 80a116e:	685b      	ldr	r3, [r3, #4]
 80a1170:	9301      	str	r3, [sp, #4]
 80a1172:	bd08      	pop	{r3, pc}
 80a1174:	080601a0 	.word	0x080601a0

080a1178 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1178:	b508      	push	{r3, lr}
 80a117a:	4b02      	ldr	r3, [pc, #8]	; (80a1184 <realloc+0xc>)
 80a117c:	681b      	ldr	r3, [r3, #0]
 80a117e:	689b      	ldr	r3, [r3, #8]
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	bd08      	pop	{r3, pc}
 80a1184:	080601a0 	.word	0x080601a0

080a1188 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1188:	b508      	push	{r3, lr}
 80a118a:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <abort+0xc>)
 80a118c:	681b      	ldr	r3, [r3, #0]
 80a118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1190:	9301      	str	r3, [sp, #4]
 80a1192:	bd08      	pop	{r3, pc}
 80a1194:	080601a0 	.word	0x080601a0

080a1198 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1198:	b508      	push	{r3, lr}
 80a119a:	4b02      	ldr	r3, [pc, #8]	; (80a11a4 <_malloc_r+0xc>)
 80a119c:	681b      	ldr	r3, [r3, #0]
 80a119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11a0:	9301      	str	r3, [sp, #4]
 80a11a2:	bd08      	pop	{r3, pc}
 80a11a4:	080601a0 	.word	0x080601a0

080a11a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a11a8:	b508      	push	{r3, lr}
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <newlib_impure_ptr_callback+0xc>)
 80a11ac:	681b      	ldr	r3, [r3, #0]
 80a11ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11b0:	9301      	str	r3, [sp, #4]
 80a11b2:	bd08      	pop	{r3, pc}
 80a11b4:	080601a0 	.word	0x080601a0

080a11b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a11b8:	2100      	movs	r1, #0
 80a11ba:	f7ff bf29 	b.w	80a1010 <system_delay_ms>

080a11be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a11be:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a11c0:	6883      	ldr	r3, [r0, #8]
 80a11c2:	4604      	mov	r4, r0
 80a11c4:	b90b      	cbnz	r3, 80a11ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a11c6:	f001 f8fb 	bl	80a23c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11ca:	68c3      	ldr	r3, [r0, #12]
 80a11cc:	4798      	blx	r3
      if (_M_manager)
 80a11ce:	68a3      	ldr	r3, [r4, #8]
 80a11d0:	b11b      	cbz	r3, 80a11da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a11d2:	2203      	movs	r2, #3
 80a11d4:	4621      	mov	r1, r4
 80a11d6:	4620      	mov	r0, r4
 80a11d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a11da:	4620      	mov	r0, r4
}
 80a11dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a11e0:	2110      	movs	r1, #16
 80a11e2:	f001 b8e9 	b.w	80a23b8 <_ZdlPvj>

080a11e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a11e6:	4770      	bx	lr

080a11e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a11e8:	2000      	movs	r0, #0
 80a11ea:	4770      	bx	lr

080a11ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a11ec:	b510      	push	{r4, lr}
 80a11ee:	4604      	mov	r4, r0
 80a11f0:	2110      	movs	r1, #16
 80a11f2:	f001 f8e1 	bl	80a23b8 <_ZdlPvj>
 80a11f6:	4620      	mov	r0, r4
 80a11f8:	bd10      	pop	{r4, pc}

080a11fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a11fa:	b508      	push	{r3, lr}
      { delete this; }
 80a11fc:	f7ff fff6 	bl	80a11ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1200:	bd08      	pop	{r3, pc}

080a1202 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a1202:	b510      	push	{r4, lr}
      if (_M_manager)
 80a1204:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1206:	4604      	mov	r4, r0
      if (_M_manager)
 80a1208:	b113      	cbz	r3, 80a1210 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a120a:	2203      	movs	r2, #3
 80a120c:	4601      	mov	r1, r0
 80a120e:	4798      	blx	r3
    }
 80a1210:	4620      	mov	r0, r4
 80a1212:	bd10      	pop	{r4, pc}

080a1214 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1214:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1216:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1218:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a121c:	6002      	str	r2, [r0, #0]
 80a121e:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1220:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1222:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1224:	680c      	ldr	r4, [r1, #0]
 80a1226:	8085      	strh	r5, [r0, #4]
 80a1228:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a122a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a122c:	bd30      	pop	{r4, r5, pc}

080a122e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a122e:	b510      	push	{r4, lr}
 80a1230:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1232:	6800      	ldr	r0, [r0, #0]
 80a1234:	f7ff ff98 	bl	80a1168 <free>
}
 80a1238:	4620      	mov	r0, r4
 80a123a:	bd10      	pop	{r4, pc}

080a123c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a123c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a123e:	68c4      	ldr	r4, [r0, #12]
 80a1240:	b1f4      	cbz	r4, 80a1280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1242:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1244:	2b02      	cmp	r3, #2
 80a1246:	d103      	bne.n	80a1250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1248:	f104 000c 	add.w	r0, r4, #12
 80a124c:	f7ff ffef 	bl	80a122e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1250:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1252:	b135      	cbz	r5, 80a1262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1254:	4628      	mov	r0, r5
 80a1256:	f7ff ffd4 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
 80a125a:	2110      	movs	r1, #16
 80a125c:	4628      	mov	r0, r5
 80a125e:	f001 f8ab 	bl	80a23b8 <_ZdlPvj>
 80a1262:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1264:	b135      	cbz	r5, 80a1274 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1266:	4628      	mov	r0, r5
 80a1268:	f7ff ffcb 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
 80a126c:	2110      	movs	r1, #16
 80a126e:	4628      	mov	r0, r5
 80a1270:	f001 f8a2 	bl	80a23b8 <_ZdlPvj>
 80a1274:	4620      	mov	r0, r4
 80a1276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a127a:	2114      	movs	r1, #20
 80a127c:	f001 b89c 	b.w	80a23b8 <_ZdlPvj>
 80a1280:	bd38      	pop	{r3, r4, r5, pc}

080a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a1282:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a1284:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1286:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1288:	b17c      	cbz	r4, 80a12aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a128a:	6863      	ldr	r3, [r4, #4]
 80a128c:	3b01      	subs	r3, #1
 80a128e:	6063      	str	r3, [r4, #4]
 80a1290:	b95b      	cbnz	r3, 80a12aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a1292:	6823      	ldr	r3, [r4, #0]
 80a1294:	4620      	mov	r0, r4
 80a1296:	689b      	ldr	r3, [r3, #8]
 80a1298:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a129a:	68a3      	ldr	r3, [r4, #8]
 80a129c:	3b01      	subs	r3, #1
 80a129e:	60a3      	str	r3, [r4, #8]
 80a12a0:	b91b      	cbnz	r3, 80a12aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a12a2:	6823      	ldr	r3, [r4, #0]
 80a12a4:	4620      	mov	r0, r4
 80a12a6:	68db      	ldr	r3, [r3, #12]
 80a12a8:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a12aa:	4628      	mov	r0, r5
 80a12ac:	bd38      	pop	{r3, r4, r5, pc}

080a12ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a12ae:	680b      	ldr	r3, [r1, #0]
 80a12b0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a12b2:	b113      	cbz	r3, 80a12ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a12b4:	685a      	ldr	r2, [r3, #4]
 80a12b6:	3201      	adds	r2, #1
 80a12b8:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a12ba:	4770      	bx	lr

080a12bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a12bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a12be:	460e      	mov	r6, r1
 80a12c0:	4604      	mov	r4, r0
 80a12c2:	f856 3b04 	ldr.w	r3, [r6], #4
 80a12c6:	460d      	mov	r5, r1
 80a12c8:	a801      	add	r0, sp, #4
 80a12ca:	4631      	mov	r1, r6
 80a12cc:	9300      	str	r3, [sp, #0]
 80a12ce:	f7ff ffee 	bl	80a12ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12d2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a12d4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12d6:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a12d8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a12da:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a12dc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a12de:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a12e0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a12e2:	f7ff ffce 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a12e6:	4630      	mov	r0, r6
 80a12e8:	f7ff ffcb 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a12ec:	4628      	mov	r0, r5
 80a12ee:	2108      	movs	r1, #8
 80a12f0:	f001 f862 	bl	80a23b8 <_ZdlPvj>
        return p;
    }
 80a12f4:	4620      	mov	r0, r4
 80a12f6:	b002      	add	sp, #8
 80a12f8:	bd70      	pop	{r4, r5, r6, pc}

080a12fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a12fa:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a12fc:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a12fe:	460b      	mov	r3, r1
 80a1300:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1302:	c803      	ldmia	r0, {r0, r1}
 80a1304:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1308:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a130c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1310:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1314:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1318:	b002      	add	sp, #8
 80a131a:	bd10      	pop	{r4, pc}

080a131c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a131c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a131e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1320:	b90a      	cbnz	r2, 80a1326 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1322:	f001 f84d 	bl	80a23c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1326:	68c3      	ldr	r3, [r0, #12]
    }
 80a1328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a132c:	4718      	bx	r3

080a132e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a132e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1330:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a1332:	f100 0110 	add.w	r1, r0, #16
 80a1336:	f7ff fff1 	bl	80a131c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a133a:	bd08      	pop	{r3, pc}

080a133c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a133c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a133e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1340:	b90a      	cbnz	r2, 80a1346 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1342:	f001 f83d 	bl	80a23c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1346:	68c3      	ldr	r3, [r0, #12]
    }
 80a1348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a134c:	4718      	bx	r3

080a134e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a134e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1350:	6800      	ldr	r0, [r0, #0]
 80a1352:	f100 0110 	add.w	r1, r0, #16
 80a1356:	f7ff fff1 	bl	80a133c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a135a:	bd08      	pop	{r3, pc}

080a135c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a135c:	b538      	push	{r3, r4, r5, lr}
 80a135e:	2300      	movs	r3, #0
 80a1360:	4604      	mov	r4, r0
 80a1362:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1364:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1366:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1368:	f7fe fe95 	bl	80a0096 <_Znwj>
 80a136c:	b128      	cbz	r0, 80a137a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a136e:	2301      	movs	r3, #1
 80a1370:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1374:	4b02      	ldr	r3, [pc, #8]	; (80a1380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1376:	60c5      	str	r5, [r0, #12]
 80a1378:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a137a:	6020      	str	r0, [r4, #0]
	}
 80a137c:	4620      	mov	r0, r4
 80a137e:	bd38      	pop	{r3, r4, r5, pc}
 80a1380:	080a2738 	.word	0x080a2738

080a1384 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1384:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1386:	2300      	movs	r3, #0
 80a1388:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a138a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a138c:	4604      	mov	r4, r0
 80a138e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1390:	b12b      	cbz	r3, 80a139e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1392:	2202      	movs	r2, #2
 80a1394:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1396:	68eb      	ldr	r3, [r5, #12]
 80a1398:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a139a:	68ab      	ldr	r3, [r5, #8]
 80a139c:	60a3      	str	r3, [r4, #8]
    }
 80a139e:	4620      	mov	r0, r4
 80a13a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a13a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a13a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13a6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a13a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a13aa:	4668      	mov	r0, sp
 80a13ac:	f7ff ff32 	bl	80a1214 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a13b0:	f04f 0302 	mov.w	r3, #2
 80a13b4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a13b8:	2a00      	cmp	r2, #0
 80a13ba:	d103      	bne.n	80a13c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a13bc:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a13c0:	2900      	cmp	r1, #0
 80a13c2:	d1f7      	bne.n	80a13b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a13c4:	d125      	bne.n	80a1412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a13c6:	f104 050c 	add.w	r5, r4, #12
 80a13ca:	4669      	mov	r1, sp
 80a13cc:	4628      	mov	r0, r5
 80a13ce:	f7ff ff21 	bl	80a1214 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a13d2:	2301      	movs	r3, #1
 80a13d4:	f3bf 8f5b 	dmb	ish
 80a13d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a13da:	2000      	movs	r0, #0
 80a13dc:	f3bf 8f5b 	dmb	ish
 80a13e0:	f104 0308 	add.w	r3, r4, #8
 80a13e4:	e853 6f00 	ldrex	r6, [r3]
 80a13e8:	e843 0200 	strex	r2, r0, [r3]
 80a13ec:	2a00      	cmp	r2, #0
 80a13ee:	d1f9      	bne.n	80a13e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a13f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a13f4:	b16e      	cbz	r6, 80a1412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a13f6:	f7ff fe13 	bl	80a1020 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a13fa:	b178      	cbz	r0, 80a141c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a13fc:	4629      	mov	r1, r5
 80a13fe:	4630      	mov	r0, r6
 80a1400:	f7ff ff8c 	bl	80a131c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1404:	4630      	mov	r0, r6
 80a1406:	f7ff fefc 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a140a:	2110      	movs	r1, #16
 80a140c:	4630      	mov	r0, r6
 80a140e:	f000 ffd3 	bl	80a23b8 <_ZdlPvj>
        p_->setError(std::move(error));
 80a1412:	4668      	mov	r0, sp
 80a1414:	f7ff ff0b 	bl	80a122e <_ZN8particle5ErrorD1Ev>
    }
 80a1418:	b009      	add	sp, #36	; 0x24
 80a141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a141c:	4631      	mov	r1, r6
 80a141e:	a802      	add	r0, sp, #8
 80a1420:	f7ff ffb0 	bl	80a1384 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1424:	68e0      	ldr	r0, [r4, #12]
 80a1426:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a142a:	b108      	cbz	r0, 80a1430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a142c:	f001 f828 	bl	80a2480 <strdup>
        type_(type) {
 80a1430:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1432:	2010      	movs	r0, #16
 80a1434:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1438:	f7fe fe2d 	bl	80a0096 <_Znwj>
 80a143c:	4605      	mov	r5, r0
 80a143e:	b1e8      	cbz	r0, 80a147c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a1440:	2700      	movs	r7, #0
 80a1442:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1444:	2018      	movs	r0, #24
 80a1446:	f7fe fe26 	bl	80a0096 <_Znwj>
 80a144a:	4604      	mov	r4, r0
 80a144c:	b188      	cbz	r0, 80a1472 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a144e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1450:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1452:	a802      	add	r0, sp, #8
 80a1454:	f7ff ff51 	bl	80a12fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1458:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a145a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a145c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a145e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1460:	9204      	str	r2, [sp, #16]
 80a1462:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1464:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1466:	60e3      	str	r3, [r4, #12]
 80a1468:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a146c:	9205      	str	r2, [sp, #20]
 80a146e:	f7ff fed1 	bl	80a1214 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a1472:	4b08      	ldr	r3, [pc, #32]	; (80a1494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1474:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1476:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1478:	4b07      	ldr	r3, [pc, #28]	; (80a1498 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a147a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a147c:	a806      	add	r0, sp, #24
 80a147e:	f7ff fed6 	bl	80a122e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1482:	a802      	add	r0, sp, #8
 80a1484:	f7ff febd 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1488:	2200      	movs	r2, #0
 80a148a:	4629      	mov	r1, r5
 80a148c:	4803      	ldr	r0, [pc, #12]	; (80a149c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a148e:	f7ff fdcf 	bl	80a1030 <application_thread_invoke>
 80a1492:	e7b7      	b.n	80a1404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1494:	080a132f 	.word	0x080a132f
 80a1498:	080a15c5 	.word	0x080a15c5
 80a149c:	080a11bf 	.word	0x080a11bf

080a14a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a14a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a14a4:	b08a      	sub	sp, #40	; 0x28
 80a14a6:	4605      	mov	r5, r0
 80a14a8:	460c      	mov	r4, r1
 80a14aa:	4617      	mov	r7, r2
 80a14ac:	4698      	mov	r8, r3
 80a14ae:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14b2:	f7ff fdd9 	bl	80a1068 <spark_cloud_flag_connected>
 80a14b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a14b8:	4682      	mov	sl, r0
 80a14ba:	bb38      	cbnz	r0, 80a150c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a14bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a14c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a14c2:	a905      	add	r1, sp, #20
 80a14c4:	4630      	mov	r0, r6
 80a14c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a14ca:	f7ff fea3 	bl	80a1214 <_ZN8particle5ErrorC1EOS0_>
 80a14ce:	2014      	movs	r0, #20
 80a14d0:	f7fe fde1 	bl	80a0096 <_Znwj>
 80a14d4:	4604      	mov	r4, r0
 80a14d6:	b148      	cbz	r0, 80a14ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a14d8:	2302      	movs	r3, #2
 80a14da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a14de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a14e4:	4631      	mov	r1, r6
 80a14e6:	300c      	adds	r0, #12
 80a14e8:	f7ff fe94 	bl	80a1214 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a14ec:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a14ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a14f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a14f4:	f7ff ff32 	bl	80a135c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a14f8:	4630      	mov	r0, r6
 80a14fa:	f7ff fe98 	bl	80a122e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a14fe:	a805      	add	r0, sp, #20
 80a1500:	f7ff fe95 	bl	80a122e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1504:	4628      	mov	r0, r5
 80a1506:	b00a      	add	sp, #40	; 0x28
 80a1508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a150c:	230c      	movs	r3, #12
 80a150e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1512:	2014      	movs	r0, #20
 80a1514:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a1518:	9307      	str	r3, [sp, #28]
 80a151a:	f7fe fdbc 	bl	80a0096 <_Znwj>
 80a151e:	4601      	mov	r1, r0
 80a1520:	b128      	cbz	r0, 80a152e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1522:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a1526:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a152a:	f880 a001 	strb.w	sl, [r0, #1]
 80a152e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1530:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a1532:	f7ff ff13 	bl	80a135c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1536:	4b22      	ldr	r3, [pc, #136]	; (80a15c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1538:	2008      	movs	r0, #8
 80a153a:	9308      	str	r3, [sp, #32]
 80a153c:	f7fe fdab 	bl	80a0096 <_Znwj>
 80a1540:	4682      	mov	sl, r0
 80a1542:	b128      	cbz	r0, 80a1550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1544:	9b03      	ldr	r3, [sp, #12]
 80a1546:	a904      	add	r1, sp, #16
 80a1548:	f840 3b04 	str.w	r3, [r0], #4
 80a154c:	f7ff feaf 	bl	80a12ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1550:	4642      	mov	r2, r8
 80a1552:	4639      	mov	r1, r7
 80a1554:	4620      	mov	r0, r4
 80a1556:	9600      	str	r6, [sp, #0]
 80a1558:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a155c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1560:	f7ff fd8a 	bl	80a1078 <spark_send_event>
 80a1564:	b9b8      	cbnz	r0, 80a1596 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a1566:	9b03      	ldr	r3, [sp, #12]
 80a1568:	785b      	ldrb	r3, [r3, #1]
 80a156a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a156e:	b993      	cbnz	r3, 80a1596 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1570:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1574:	a905      	add	r1, sp, #20
 80a1576:	a803      	add	r0, sp, #12
 80a1578:	9205      	str	r2, [sp, #20]
 80a157a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a157e:	f7ff ff11 	bl	80a13a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1582:	a805      	add	r0, sp, #20
 80a1584:	f7ff fe53 	bl	80a122e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1588:	a805      	add	r0, sp, #20
 80a158a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a158c:	f7ff fe96 	bl	80a12bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1590:	a806      	add	r0, sp, #24
 80a1592:	f7ff fe76 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1596:	9b03      	ldr	r3, [sp, #12]
 80a1598:	a904      	add	r1, sp, #16
 80a159a:	a806      	add	r0, sp, #24
 80a159c:	9305      	str	r3, [sp, #20]
 80a159e:	f7ff fe86 	bl	80a12ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a15a2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a15a4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a15a6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a15a8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a15aa:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a15ac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a15ae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a15b0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a15b2:	f7ff fe66 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a15b6:	a804      	add	r0, sp, #16
 80a15b8:	f7ff fe63 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a15bc:	e7a2      	b.n	80a1504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a15be:	bf00      	nop
 80a15c0:	080a1689 	.word	0x080a1689

080a15c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a15c4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a15c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15c8:	4605      	mov	r5, r0
	  switch (__op)
 80a15ca:	d007      	beq.n	80a15dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a15cc:	2a03      	cmp	r2, #3
 80a15ce:	d018      	beq.n	80a1602 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a15d0:	2a01      	cmp	r2, #1
 80a15d2:	d101      	bne.n	80a15d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a15d4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a15d6:	6003      	str	r3, [r0, #0]
	}
 80a15d8:	2000      	movs	r0, #0
 80a15da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15dc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a15de:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15e0:	f7fe fd59 	bl	80a0096 <_Znwj>
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	b150      	cbz	r0, 80a15fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a15e8:	4631      	mov	r1, r6
 80a15ea:	f7ff fecb 	bl	80a1384 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a15ee:	6930      	ldr	r0, [r6, #16]
 80a15f0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a15f4:	b108      	cbz	r0, 80a15fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a15f6:	f000 ff43 	bl	80a2480 <strdup>
        type_(type) {
 80a15fa:	6120      	str	r0, [r4, #16]
 80a15fc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a15fe:	602c      	str	r4, [r5, #0]
	}
 80a1600:	e7ea      	b.n	80a15d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1602:	6804      	ldr	r4, [r0, #0]
 80a1604:	2c00      	cmp	r4, #0
 80a1606:	d0e7      	beq.n	80a15d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a1608:	f104 0010 	add.w	r0, r4, #16
 80a160c:	f7ff fe0f 	bl	80a122e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1610:	4620      	mov	r0, r4
 80a1612:	f7ff fdf6 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1616:	2118      	movs	r1, #24
 80a1618:	4620      	mov	r0, r4
 80a161a:	f000 fecd 	bl	80a23b8 <_ZdlPvj>
 80a161e:	e7db      	b.n	80a15d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a1620 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1620:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1622:	2300      	movs	r3, #0
 80a1624:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1626:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1628:	4604      	mov	r4, r0
 80a162a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a162c:	b12b      	cbz	r3, 80a163a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a162e:	2202      	movs	r2, #2
 80a1630:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1632:	68eb      	ldr	r3, [r5, #12]
 80a1634:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1636:	68ab      	ldr	r3, [r5, #8]
 80a1638:	60a3      	str	r3, [r4, #8]
    }
 80a163a:	4620      	mov	r0, r4
 80a163c:	bd38      	pop	{r3, r4, r5, pc}

080a163e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a163e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1640:	b570      	push	{r4, r5, r6, lr}
 80a1642:	4604      	mov	r4, r0
	  switch (__op)
 80a1644:	d007      	beq.n	80a1656 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a1646:	2a03      	cmp	r2, #3
 80a1648:	d012      	beq.n	80a1670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a164a:	2a01      	cmp	r2, #1
 80a164c:	d101      	bne.n	80a1652 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a164e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1650:	6003      	str	r3, [r0, #0]
	}
 80a1652:	2000      	movs	r0, #0
 80a1654:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1656:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1658:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a165a:	f7fe fd1c 	bl	80a0096 <_Znwj>
 80a165e:	4605      	mov	r5, r0
 80a1660:	b120      	cbz	r0, 80a166c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a1662:	4631      	mov	r1, r6
 80a1664:	f7ff ffdc 	bl	80a1620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1668:	7c33      	ldrb	r3, [r6, #16]
 80a166a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a166c:	6025      	str	r5, [r4, #0]
	}
 80a166e:	e7f0      	b.n	80a1652 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1670:	6804      	ldr	r4, [r0, #0]
 80a1672:	2c00      	cmp	r4, #0
 80a1674:	d0ed      	beq.n	80a1652 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a1676:	4620      	mov	r0, r4
 80a1678:	f7ff fdc3 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a167c:	2114      	movs	r1, #20
 80a167e:	4620      	mov	r0, r4
 80a1680:	f000 fe9a 	bl	80a23b8 <_ZdlPvj>
 80a1684:	e7e5      	b.n	80a1652 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1688 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1688:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a168a:	4604      	mov	r4, r0
 80a168c:	b089      	sub	sp, #36	; 0x24
 80a168e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1690:	a801      	add	r0, sp, #4
 80a1692:	4611      	mov	r1, r2
 80a1694:	f7ff fe12 	bl	80a12bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1698:	b1a4      	cbz	r4, 80a16c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a169a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a169c:	b11d      	cbz	r5, 80a16a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a169e:	4628      	mov	r0, r5
 80a16a0:	f000 feee 	bl	80a2480 <strdup>
 80a16a4:	4605      	mov	r5, r0
 80a16a6:	a801      	add	r0, sp, #4
 80a16a8:	a903      	add	r1, sp, #12
        type_(type) {
 80a16aa:	9503      	str	r5, [sp, #12]
 80a16ac:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a16b0:	f7ff fe78 	bl	80a13a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a16b4:	a803      	add	r0, sp, #12
 80a16b6:	f7ff fdba 	bl	80a122e <_ZN8particle5ErrorD1Ev>
 80a16ba:	a802      	add	r0, sp, #8
 80a16bc:	f7ff fde1 	bl	80a1282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a16c0:	b009      	add	sp, #36	; 0x24
 80a16c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a16c4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a16c6:	9d01      	ldr	r5, [sp, #4]
 80a16c8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a16cc:	2a00      	cmp	r2, #0
 80a16ce:	d103      	bne.n	80a16d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a16d0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a16d4:	2900      	cmp	r1, #0
 80a16d6:	d1f7      	bne.n	80a16c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a16d8:	d1ef      	bne.n	80a16ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a16da:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a16dc:	f3bf 8f5b 	dmb	ish
 80a16e0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a16e2:	f3bf 8f5b 	dmb	ish
 80a16e6:	1d2b      	adds	r3, r5, #4
 80a16e8:	e853 6f00 	ldrex	r6, [r3]
 80a16ec:	e843 4200 	strex	r2, r4, [r3]
 80a16f0:	2a00      	cmp	r2, #0
 80a16f2:	d1f9      	bne.n	80a16e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a16f4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a16f8:	2e00      	cmp	r6, #0
 80a16fa:	d0de      	beq.n	80a16ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a16fc:	4620      	mov	r0, r4
 80a16fe:	f7ff fc8f 	bl	80a1020 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1702:	4607      	mov	r7, r0
 80a1704:	b160      	cbz	r0, 80a1720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1706:	4630      	mov	r0, r6
 80a1708:	f105 010c 	add.w	r1, r5, #12
 80a170c:	f7ff fe16 	bl	80a133c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1710:	4630      	mov	r0, r6
 80a1712:	f7ff fd76 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1716:	2110      	movs	r1, #16
 80a1718:	4630      	mov	r0, r6
 80a171a:	f000 fe4d 	bl	80a23b8 <_ZdlPvj>
 80a171e:	e7cc      	b.n	80a16ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1720:	4631      	mov	r1, r6
 80a1722:	a803      	add	r0, sp, #12
 80a1724:	f7ff ff7c 	bl	80a1620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1728:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a172a:	2010      	movs	r0, #16
 80a172c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1730:	f7fe fcb1 	bl	80a0096 <_Znwj>
 80a1734:	4605      	mov	r5, r0
 80a1736:	b1d0      	cbz	r0, 80a176e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1738:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a173a:	2014      	movs	r0, #20
 80a173c:	f7fe fcab 	bl	80a0096 <_Znwj>
 80a1740:	4604      	mov	r4, r0
 80a1742:	b178      	cbz	r0, 80a1764 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1744:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1746:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1748:	a803      	add	r0, sp, #12
 80a174a:	f7ff fdd6 	bl	80a12fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a174e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1750:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1752:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1754:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1756:	9205      	str	r2, [sp, #20]
 80a1758:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a175a:	60e3      	str	r3, [r4, #12]
 80a175c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1760:	9206      	str	r2, [sp, #24]
 80a1762:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1764:	4b06      	ldr	r3, [pc, #24]	; (80a1780 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1766:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1768:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a176a:	4b06      	ldr	r3, [pc, #24]	; (80a1784 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a176c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a176e:	a803      	add	r0, sp, #12
 80a1770:	f7ff fd47 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1774:	2200      	movs	r2, #0
 80a1776:	4629      	mov	r1, r5
 80a1778:	4803      	ldr	r0, [pc, #12]	; (80a1788 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a177a:	f7ff fc59 	bl	80a1030 <application_thread_invoke>
 80a177e:	e7c7      	b.n	80a1710 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1780:	080a134f 	.word	0x080a134f
 80a1784:	080a163f 	.word	0x080a163f
 80a1788:	080a11bf 	.word	0x080a11bf

080a178c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a178c:	4770      	bx	lr

080a178e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a178e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1790:	4606      	mov	r6, r0
 80a1792:	4615      	mov	r5, r2
 80a1794:	460c      	mov	r4, r1
 80a1796:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1798:	42bc      	cmp	r4, r7
 80a179a:	d006      	beq.n	80a17aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a179c:	6833      	ldr	r3, [r6, #0]
 80a179e:	4630      	mov	r0, r6
 80a17a0:	689b      	ldr	r3, [r3, #8]
 80a17a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a17a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a17a8:	e7f6      	b.n	80a1798 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a17aa:	4628      	mov	r0, r5
 80a17ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a17ae:	2200      	movs	r2, #0
 80a17b0:	7c00      	ldrb	r0, [r0, #16]
 80a17b2:	f7ff bb51 	b.w	80a0e58 <hal_i2c_write>

080a17b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a17b6:	2100      	movs	r1, #0
 80a17b8:	7c00      	ldrb	r0, [r0, #16]
 80a17ba:	f7ff bb55 	b.w	80a0e68 <hal_i2c_available>

080a17be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a17be:	2100      	movs	r1, #0
 80a17c0:	7c00      	ldrb	r0, [r0, #16]
 80a17c2:	f7ff bb59 	b.w	80a0e78 <hal_i2c_read>

080a17c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a17c6:	2100      	movs	r1, #0
 80a17c8:	7c00      	ldrb	r0, [r0, #16]
 80a17ca:	f7ff bb5d 	b.w	80a0e88 <hal_i2c_peek>

080a17ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a17ce:	2100      	movs	r1, #0
 80a17d0:	7c00      	ldrb	r0, [r0, #16]
 80a17d2:	f7ff bb61 	b.w	80a0e98 <hal_i2c_flush>

080a17d6 <_ZN7TwoWireD0Ev>:
 80a17d6:	b510      	push	{r4, lr}
 80a17d8:	4604      	mov	r4, r0
 80a17da:	2114      	movs	r1, #20
 80a17dc:	f000 fdec 	bl	80a23b8 <_ZdlPvj>
 80a17e0:	4620      	mov	r0, r4
 80a17e2:	bd10      	pop	{r4, pc}

080a17e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a17e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a17e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a17ea:	4604      	mov	r4, r0
 80a17ec:	4608      	mov	r0, r1
 80a17ee:	2100      	movs	r1, #0
 80a17f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a17f4:	4b03      	ldr	r3, [pc, #12]	; (80a1804 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a17f6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a17f8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a17fa:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a17fc:	f7ff fb5c 	bl	80a0eb8 <hal_i2c_init>
}
 80a1800:	4620      	mov	r0, r4
 80a1802:	bd10      	pop	{r4, pc}
 80a1804:	080a2754 	.word	0x080a2754

080a1808 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a1808:	2200      	movs	r2, #0
 80a180a:	7c00      	ldrb	r0, [r0, #16]
 80a180c:	f7ff bb04 	b.w	80a0e18 <hal_i2c_set_speed>

080a1810 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1810:	2300      	movs	r3, #0
 80a1812:	7c00      	ldrb	r0, [r0, #16]
 80a1814:	461a      	mov	r2, r3
 80a1816:	4619      	mov	r1, r3
 80a1818:	f7ff bb06 	b.w	80a0e28 <hal_i2c_begin>

080a181c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a181c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a181e:	2200      	movs	r2, #0
 80a1820:	2314      	movs	r3, #20
 80a1822:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1826:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a182a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a182c:	7c00      	ldrb	r0, [r0, #16]
 80a182e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1832:	684b      	ldr	r3, [r1, #4]
 80a1834:	9303      	str	r3, [sp, #12]
 80a1836:	68cb      	ldr	r3, [r1, #12]
 80a1838:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a183a:	7a0b      	ldrb	r3, [r1, #8]
 80a183c:	a901      	add	r1, sp, #4
 80a183e:	9305      	str	r3, [sp, #20]
 80a1840:	f7ff fb44 	bl	80a0ecc <hal_i2c_request_ex>
}
 80a1844:	b007      	add	sp, #28
 80a1846:	f85d fb04 	ldr.w	pc, [sp], #4

080a184a <_ZN7TwoWire11requestFromEhjh>:
{
 80a184a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a184c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a184e:	f88d 1000 	strb.w	r1, [sp]
 80a1852:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1856:	bf18      	it	ne
 80a1858:	2301      	movne	r3, #1
 80a185a:	9103      	str	r1, [sp, #12]
 80a185c:	4669      	mov	r1, sp
    size_ = size;
 80a185e:	9201      	str	r2, [sp, #4]
 80a1860:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1864:	f7ff ffda 	bl	80a181c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1868:	b005      	add	sp, #20
 80a186a:	f85d fb04 	ldr.w	pc, [sp], #4

080a186e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a186e:	2301      	movs	r3, #1
 80a1870:	f7ff bfeb 	b.w	80a184a <_ZN7TwoWire11requestFromEhjh>

080a1874 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1874:	2200      	movs	r2, #0
 80a1876:	7c00      	ldrb	r0, [r0, #16]
 80a1878:	f7ff bade 	b.w	80a0e38 <hal_i2c_begin_transmission>

080a187c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a187c:	b2c9      	uxtb	r1, r1
 80a187e:	f7ff bff9 	b.w	80a1874 <_ZN7TwoWire17beginTransmissionEh>

080a1882 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1882:	2200      	movs	r2, #0
 80a1884:	7c00      	ldrb	r0, [r0, #16]
 80a1886:	f7ff badf 	b.w	80a0e48 <hal_i2c_end_transmission>

080a188a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a188a:	2101      	movs	r1, #1
 80a188c:	f7ff bff9 	b.w	80a1882 <_ZN7TwoWire15endTransmissionEh>

080a1890 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1890:	4770      	bx	lr

080a1892 <_ZN9IPAddressD0Ev>:
 80a1892:	b510      	push	{r4, lr}
 80a1894:	4604      	mov	r4, r0
 80a1896:	2118      	movs	r1, #24
 80a1898:	f000 fd8e 	bl	80a23b8 <_ZdlPvj>
 80a189c:	4620      	mov	r0, r4
 80a189e:	bd10      	pop	{r4, pc}

080a18a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18a2:	460e      	mov	r6, r1
 80a18a4:	2400      	movs	r4, #0
 80a18a6:	f100 0708 	add.w	r7, r0, #8
 80a18aa:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a18ac:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a18b0:	220a      	movs	r2, #10
 80a18b2:	4630      	mov	r0, r6
 80a18b4:	f000 f90b 	bl	80a1ace <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a18b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a18ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a18bc:	d101      	bne.n	80a18c2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a18be:	4620      	mov	r0, r4
 80a18c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a18c2:	2c00      	cmp	r4, #0
 80a18c4:	d0f2      	beq.n	80a18ac <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a18c6:	212e      	movs	r1, #46	; 0x2e
 80a18c8:	4630      	mov	r0, r6
 80a18ca:	f000 f8e1 	bl	80a1a90 <_ZN5Print5printEc>
 80a18ce:	4404      	add	r4, r0
 80a18d0:	e7ec      	b.n	80a18ac <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a18d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a18d4:	b510      	push	{r4, lr}
 80a18d6:	4604      	mov	r4, r0
 80a18d8:	4b04      	ldr	r3, [pc, #16]	; (80a18ec <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a18da:	2211      	movs	r2, #17
 80a18dc:	2100      	movs	r1, #0
 80a18de:	f840 3b04 	str.w	r3, [r0], #4
 80a18e2:	f000 fd98 	bl	80a2416 <memset>
}
 80a18e6:	4620      	mov	r0, r4
 80a18e8:	bd10      	pop	{r4, pc}
 80a18ea:	bf00      	nop
 80a18ec:	080a277c 	.word	0x080a277c

080a18f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a18f0:	4603      	mov	r3, r0
 80a18f2:	4a07      	ldr	r2, [pc, #28]	; (80a1910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a18f4:	b510      	push	{r4, lr}
 80a18f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a18fa:	f101 0210 	add.w	r2, r1, #16
 80a18fe:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1902:	4291      	cmp	r1, r2
 80a1904:	f843 4b04 	str.w	r4, [r3], #4
 80a1908:	d1f9      	bne.n	80a18fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a190a:	780a      	ldrb	r2, [r1, #0]
 80a190c:	701a      	strb	r2, [r3, #0]
}
 80a190e:	bd10      	pop	{r4, pc}
 80a1910:	080a277c 	.word	0x080a277c

080a1914 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1914:	4a02      	ldr	r2, [pc, #8]	; (80a1920 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1916:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a191a:	2204      	movs	r2, #4
 80a191c:	7502      	strb	r2, [r0, #20]
}
 80a191e:	4770      	bx	lr
 80a1920:	080a277c 	.word	0x080a277c

080a1924 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1924:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1926:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a192a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a192e:	2304      	movs	r3, #4
 80a1930:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1934:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1938:	6044      	str	r4, [r0, #4]
 80a193a:	7503      	strb	r3, [r0, #20]
}
 80a193c:	bd10      	pop	{r4, pc}
	...

080a1940 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1942:	4d04      	ldr	r5, [pc, #16]	; (80a1954 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1944:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1946:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a194a:	9500      	str	r5, [sp, #0]
 80a194c:	f7ff ffea 	bl	80a1924 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1950:	b003      	add	sp, #12
 80a1952:	bd30      	pop	{r4, r5, pc}
 80a1954:	080a277c 	.word	0x080a277c

080a1958 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1958:	4b01      	ldr	r3, [pc, #4]	; (80a1960 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a195a:	4a02      	ldr	r2, [pc, #8]	; (80a1964 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a195c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a195e:	4770      	bx	lr
 80a1960:	20000714 	.word	0x20000714
 80a1964:	080a2788 	.word	0x080a2788

080a1968 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1968:	2300      	movs	r3, #0
 80a196a:	6840      	ldr	r0, [r0, #4]
 80a196c:	461a      	mov	r2, r3
 80a196e:	f7ff bb93 	b.w	80a1098 <network_connect>

080a1972 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1972:	2200      	movs	r2, #0
 80a1974:	2102      	movs	r1, #2
 80a1976:	6840      	ldr	r0, [r0, #4]
 80a1978:	f7ff bb9e 	b.w	80a10b8 <network_disconnect>

080a197c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a197c:	2200      	movs	r2, #0
 80a197e:	6840      	ldr	r0, [r0, #4]
 80a1980:	4611      	mov	r1, r2
 80a1982:	f7ff bb91 	b.w	80a10a8 <network_connecting>

080a1986 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1986:	2200      	movs	r2, #0
 80a1988:	6840      	ldr	r0, [r0, #4]
 80a198a:	4611      	mov	r1, r2
 80a198c:	f7ff bb9c 	b.w	80a10c8 <network_ready>

080a1990 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1990:	2300      	movs	r3, #0
 80a1992:	6840      	ldr	r0, [r0, #4]
 80a1994:	461a      	mov	r2, r3
 80a1996:	4619      	mov	r1, r3
 80a1998:	f7ff bb9e 	b.w	80a10d8 <network_on>

080a199c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a199c:	2300      	movs	r3, #0
 80a199e:	6840      	ldr	r0, [r0, #4]
 80a19a0:	461a      	mov	r2, r3
 80a19a2:	4619      	mov	r1, r3
 80a19a4:	f7ff bba0 	b.w	80a10e8 <network_off>

080a19a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a19a8:	2100      	movs	r1, #0
 80a19aa:	6840      	ldr	r0, [r0, #4]
 80a19ac:	f7ff bbc4 	b.w	80a1138 <network_is_on>

080a19b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a19b0:	2100      	movs	r1, #0
 80a19b2:	6840      	ldr	r0, [r0, #4]
 80a19b4:	f7ff bbc8 	b.w	80a1148 <network_is_off>

080a19b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a19b8:	2200      	movs	r2, #0
 80a19ba:	6840      	ldr	r0, [r0, #4]
 80a19bc:	f081 0101 	eor.w	r1, r1, #1
 80a19c0:	f7ff bb9a 	b.w	80a10f8 <network_listen>

080a19c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a19c4:	2200      	movs	r2, #0
 80a19c6:	6840      	ldr	r0, [r0, #4]
 80a19c8:	f7ff bba6 	b.w	80a1118 <network_set_listen_timeout>

080a19cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a19cc:	2200      	movs	r2, #0
 80a19ce:	6840      	ldr	r0, [r0, #4]
 80a19d0:	4611      	mov	r1, r2
 80a19d2:	f7ff bba9 	b.w	80a1128 <network_get_listen_timeout>

080a19d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a19d6:	2200      	movs	r2, #0
 80a19d8:	6840      	ldr	r0, [r0, #4]
 80a19da:	4611      	mov	r1, r2
 80a19dc:	f7ff bb94 	b.w	80a1108 <network_listening>

080a19e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a19e0:	b570      	push	{r4, r5, r6, lr}
 80a19e2:	4615      	mov	r5, r2
 80a19e4:	b08e      	sub	sp, #56	; 0x38
 80a19e6:	4604      	mov	r4, r0
    IPAddress addr;
 80a19e8:	a808      	add	r0, sp, #32
 80a19ea:	f7ff ff73 	bl	80a18d4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a19ee:	2211      	movs	r2, #17
 80a19f0:	2100      	movs	r1, #0
 80a19f2:	a803      	add	r0, sp, #12
 80a19f4:	f000 fd0f 	bl	80a2416 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a19f8:	2600      	movs	r6, #0
 80a19fa:	4628      	mov	r0, r5
 80a19fc:	f000 fd5b 	bl	80a24b6 <strlen>
 80a1a00:	4b0a      	ldr	r3, [pc, #40]	; (80a1a2c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1a02:	9600      	str	r6, [sp, #0]
 80a1a04:	b281      	uxth	r1, r0
 80a1a06:	685b      	ldr	r3, [r3, #4]
 80a1a08:	4628      	mov	r0, r5
 80a1a0a:	aa03      	add	r2, sp, #12
 80a1a0c:	f7ff faf0 	bl	80a0ff0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a10:	b130      	cbz	r0, 80a1a20 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1a12:	4631      	mov	r1, r6
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	f7ff ff7d 	bl	80a1914 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1a1a:	4620      	mov	r0, r4
 80a1a1c:	b00e      	add	sp, #56	; 0x38
 80a1a1e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a20:	4620      	mov	r0, r4
 80a1a22:	a903      	add	r1, sp, #12
 80a1a24:	f7ff ff64 	bl	80a18f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1a28:	e7f7      	b.n	80a1a1a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1a2a:	bf00      	nop
 80a1a2c:	20000b98 	.word	0x20000b98

080a1a30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a30:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1a32:	4a03      	ldr	r2, [pc, #12]	; (80a1a40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1a34:	601a      	str	r2, [r3, #0]
 80a1a36:	2200      	movs	r2, #0
 80a1a38:	605a      	str	r2, [r3, #4]

} // spark
 80a1a3a:	4770      	bx	lr
 80a1a3c:	20000718 	.word	0x20000718
 80a1a40:	080a2794 	.word	0x080a2794

080a1a44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a46:	4606      	mov	r6, r0
 80a1a48:	460d      	mov	r5, r1
  size_t n = 0;
 80a1a4a:	2400      	movs	r4, #0
 80a1a4c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1a4e:	42bd      	cmp	r5, r7
 80a1a50:	d00c      	beq.n	80a1a6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a52:	6833      	ldr	r3, [r6, #0]
 80a1a54:	4630      	mov	r0, r6
 80a1a56:	689b      	ldr	r3, [r3, #8]
 80a1a58:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1a5c:	4798      	blx	r3
     if (chunk>=0)
 80a1a5e:	1e03      	subs	r3, r0, #0
 80a1a60:	db01      	blt.n	80a1a66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1a62:	441c      	add	r4, r3
  while (size--) {
 80a1a64:	e7f3      	b.n	80a1a4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1a66:	2c00      	cmp	r4, #0
 80a1a68:	bf08      	it	eq
 80a1a6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1a6c:	4620      	mov	r0, r4
 80a1a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1a70:	b570      	push	{r4, r5, r6, lr}
 80a1a72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a74:	460c      	mov	r4, r1
    }
 80a1a76:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1a78:	b149      	cbz	r1, 80a1a8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a7a:	f000 fd1c 	bl	80a24b6 <strlen>
 80a1a7e:	682b      	ldr	r3, [r5, #0]
 80a1a80:	4602      	mov	r2, r0
 80a1a82:	4621      	mov	r1, r4
 80a1a84:	4628      	mov	r0, r5
    }
 80a1a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1a8a:	68db      	ldr	r3, [r3, #12]
 80a1a8c:	4718      	bx	r3
    }
 80a1a8e:	bd70      	pop	{r4, r5, r6, pc}

080a1a90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a90:	6803      	ldr	r3, [r0, #0]
 80a1a92:	689b      	ldr	r3, [r3, #8]
 80a1a94:	4718      	bx	r3

080a1a96 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80a1a96:	b508      	push	{r3, lr}
  return write(str);
 80a1a98:	f7ff ffea 	bl	80a1a70 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
 80a1a9c:	bd08      	pop	{r3, pc}

080a1a9e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80a1a9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1aa0:	210d      	movs	r1, #13
{
 80a1aa2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1aa4:	f7ff fff4 	bl	80a1a90 <_ZN5Print5printEc>
  n += print('\n');
 80a1aa8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1aaa:	4604      	mov	r4, r0
  n += print('\n');
 80a1aac:	4628      	mov	r0, r5
 80a1aae:	f7ff ffef 	bl	80a1a90 <_ZN5Print5printEc>
  return n;
}
 80a1ab2:	4420      	add	r0, r4
 80a1ab4:	bd38      	pop	{r3, r4, r5, pc}

080a1ab6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1ab6:	b538      	push	{r3, r4, r5, lr}
 80a1ab8:	4605      	mov	r5, r0
  return write(str);
 80a1aba:	f7ff ffd9 	bl	80a1a70 <_ZN5Print5writeEPKc>
 80a1abe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1ac0:	4628      	mov	r0, r5
 80a1ac2:	f7ff ffec 	bl	80a1a9e <_ZN5Print7printlnEv>
  return n;
}
 80a1ac6:	4420      	add	r0, r4
 80a1ac8:	bd38      	pop	{r3, r4, r5, pc}

080a1aca <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a1aca:	f7ff bff4 	b.w	80a1ab6 <_ZN5Print7printlnEPKc>

080a1ace <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1ace:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1ad0:	2a01      	cmp	r2, #1
 80a1ad2:	bf98      	it	ls
 80a1ad4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ad6:	b530      	push	{r4, r5, lr}
 80a1ad8:	b08b      	sub	sp, #44	; 0x2c
 80a1ada:	460c      	mov	r4, r1
  *str = '\0';
 80a1adc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1ae0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1ae2:	4625      	mov	r5, r4
 80a1ae4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1ae8:	fb04 5312 	mls	r3, r4, r2, r5
 80a1aec:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1aee:	2b09      	cmp	r3, #9
 80a1af0:	bf94      	ite	ls
 80a1af2:	3330      	addls	r3, #48	; 0x30
 80a1af4:	3337      	addhi	r3, #55	; 0x37
 80a1af6:	b2db      	uxtb	r3, r3
  } while(n);
 80a1af8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1afa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1afe:	d9f0      	bls.n	80a1ae2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1b00:	f7ff ffb6 	bl	80a1a70 <_ZN5Print5writeEPKc>
}
 80a1b04:	b00b      	add	sp, #44	; 0x2c
 80a1b06:	bd30      	pop	{r4, r5, pc}

080a1b08 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1b08:	2200      	movs	r2, #0
 80a1b0a:	4b01      	ldr	r3, [pc, #4]	; (80a1b10 <_GLOBAL__sub_I_RGB+0x8>)
 80a1b0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1b0e:	4770      	bx	lr
 80a1b10:	20000720 	.word	0x20000720

080a1b14 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1b14:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1b16:	2600      	movs	r6, #0
 80a1b18:	4604      	mov	r4, r0
 80a1b1a:	460d      	mov	r5, r1
 80a1b1c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1b20:	f7ff f942 	bl	80a0da8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1b24:	4628      	mov	r0, r5
    _spi = spi;
 80a1b26:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1b28:	f7ff f9da 	bl	80a0ee0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1b2c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1b2e:	6066      	str	r6, [r4, #4]
}
 80a1b30:	bd70      	pop	{r4, r5, r6, pc}

080a1b32 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b32:	b510      	push	{r4, lr}
 80a1b34:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b36:	6800      	ldr	r0, [r0, #0]
 80a1b38:	f7ff fb16 	bl	80a1168 <free>
}
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	bd10      	pop	{r4, pc}

080a1b40 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b40:	b510      	push	{r4, lr}
 80a1b42:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b44:	6800      	ldr	r0, [r0, #0]
 80a1b46:	b108      	cbz	r0, 80a1b4c <_ZN6String10invalidateEv+0xc>
 80a1b48:	f7ff fb0e 	bl	80a1168 <free>
	buffer = NULL;
 80a1b4c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1b4e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1b52:	6023      	str	r3, [r4, #0]
}
 80a1b54:	bd10      	pop	{r4, pc}

080a1b56 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b56:	b538      	push	{r3, r4, r5, lr}
 80a1b58:	4604      	mov	r4, r0
 80a1b5a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b5c:	6800      	ldr	r0, [r0, #0]
 80a1b5e:	3101      	adds	r1, #1
 80a1b60:	f7ff fb0a 	bl	80a1178 <realloc>
	if (newbuffer) {
 80a1b64:	b110      	cbz	r0, 80a1b6c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1b66:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1b6a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1b6c:	bd38      	pop	{r3, r4, r5, pc}

080a1b6e <_ZN6String7reserveEj>:
{
 80a1b6e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1b70:	6803      	ldr	r3, [r0, #0]
{
 80a1b72:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1b74:	b123      	cbz	r3, 80a1b80 <_ZN6String7reserveEj+0x12>
 80a1b76:	6843      	ldr	r3, [r0, #4]
 80a1b78:	428b      	cmp	r3, r1
 80a1b7a:	d301      	bcc.n	80a1b80 <_ZN6String7reserveEj+0x12>
 80a1b7c:	2001      	movs	r0, #1
}
 80a1b7e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1b80:	4620      	mov	r0, r4
 80a1b82:	f7ff ffe8 	bl	80a1b56 <_ZN6String12changeBufferEj>
 80a1b86:	2800      	cmp	r0, #0
 80a1b88:	d0f9      	beq.n	80a1b7e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1b8a:	68a3      	ldr	r3, [r4, #8]
 80a1b8c:	2b00      	cmp	r3, #0
 80a1b8e:	d1f5      	bne.n	80a1b7c <_ZN6String7reserveEj+0xe>
 80a1b90:	6822      	ldr	r2, [r4, #0]
 80a1b92:	7013      	strb	r3, [r2, #0]
 80a1b94:	e7f2      	b.n	80a1b7c <_ZN6String7reserveEj+0xe>

080a1b96 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1b96:	b570      	push	{r4, r5, r6, lr}
 80a1b98:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1b9a:	4611      	mov	r1, r2
{
 80a1b9c:	4604      	mov	r4, r0
 80a1b9e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1ba0:	f7ff ffe5 	bl	80a1b6e <_ZN6String7reserveEj>
 80a1ba4:	b920      	cbnz	r0, 80a1bb0 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1ba6:	4620      	mov	r0, r4
 80a1ba8:	f7ff ffca 	bl	80a1b40 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1bb0:	462a      	mov	r2, r5
 80a1bb2:	4631      	mov	r1, r6
 80a1bb4:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1bb6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1bb8:	f000 fc1f 	bl	80a23fa <memcpy>
	buffer[len] = 0;
 80a1bbc:	2100      	movs	r1, #0
 80a1bbe:	6822      	ldr	r2, [r4, #0]
 80a1bc0:	68a3      	ldr	r3, [r4, #8]
 80a1bc2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1bc4:	e7f2      	b.n	80a1bac <_ZN6String4copyEPKcj+0x16>

080a1bc6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1bc6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1bc8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1bca:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1bcc:	460d      	mov	r5, r1
	capacity = 0;
 80a1bce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1bd2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1bd4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1bd6:	b139      	cbz	r1, 80a1be8 <_ZN6StringC1EPKc+0x22>
 80a1bd8:	4608      	mov	r0, r1
 80a1bda:	f000 fc6c 	bl	80a24b6 <strlen>
 80a1bde:	4629      	mov	r1, r5
 80a1be0:	4602      	mov	r2, r0
 80a1be2:	4620      	mov	r0, r4
 80a1be4:	f7ff ffd7 	bl	80a1b96 <_ZN6String4copyEPKcj>
}
 80a1be8:	4620      	mov	r0, r4
 80a1bea:	bd38      	pop	{r3, r4, r5, pc}

080a1bec <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1bec:	4288      	cmp	r0, r1
{
 80a1bee:	b510      	push	{r4, lr}
 80a1bf0:	460b      	mov	r3, r1
 80a1bf2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1bf4:	d004      	beq.n	80a1c00 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1bf6:	6809      	ldr	r1, [r1, #0]
 80a1bf8:	b121      	cbz	r1, 80a1c04 <_ZN6StringaSERKS_+0x18>
 80a1bfa:	689a      	ldr	r2, [r3, #8]
 80a1bfc:	f7ff ffcb 	bl	80a1b96 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1c00:	4620      	mov	r0, r4
 80a1c02:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1c04:	f7ff ff9c 	bl	80a1b40 <_ZN6String10invalidateEv>
 80a1c08:	e7fa      	b.n	80a1c00 <_ZN6StringaSERKS_+0x14>

080a1c0a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1c0a:	2300      	movs	r3, #0
String::String(const String &value)
 80a1c0c:	b510      	push	{r4, lr}
 80a1c0e:	4604      	mov	r4, r0
	capacity = 0;
 80a1c10:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1c14:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c16:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1c18:	f7ff ffe8 	bl	80a1bec <_ZN6StringaSERKS_>
}
 80a1c1c:	4620      	mov	r0, r4
 80a1c1e:	bd10      	pop	{r4, pc}

080a1c20 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1c20:	b538      	push	{r3, r4, r5, lr}
 80a1c22:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c24:	460c      	mov	r4, r1
 80a1c26:	b149      	cbz	r1, 80a1c3c <_ZN6StringaSEPKc+0x1c>
 80a1c28:	4608      	mov	r0, r1
 80a1c2a:	f000 fc44 	bl	80a24b6 <strlen>
 80a1c2e:	4621      	mov	r1, r4
 80a1c30:	4602      	mov	r2, r0
 80a1c32:	4628      	mov	r0, r5
 80a1c34:	f7ff ffaf 	bl	80a1b96 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1c38:	4628      	mov	r0, r5
 80a1c3a:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1c3c:	f7ff ff80 	bl	80a1b40 <_ZN6String10invalidateEv>
 80a1c40:	e7fa      	b.n	80a1c38 <_ZN6StringaSEPKc+0x18>

080a1c42 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a1c42:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1c44:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a1c46:	4604      	mov	r4, r0
 80a1c48:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1c4a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1c4e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1c50:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a1c52:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1c54:	a901      	add	r1, sp, #4
 80a1c56:	f000 f9fb 	bl	80a2050 <ltoa>
	*this = buf;
 80a1c5a:	4620      	mov	r0, r4
 80a1c5c:	a901      	add	r1, sp, #4
 80a1c5e:	f7ff ffdf 	bl	80a1c20 <_ZN6StringaSEPKc>
}
 80a1c62:	4620      	mov	r0, r4
 80a1c64:	b00a      	add	sp, #40	; 0x28
 80a1c66:	bd10      	pop	{r4, pc}

080a1c68 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1c68:	b570      	push	{r4, r5, r6, lr}
 80a1c6a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1c6c:	460e      	mov	r6, r1
 80a1c6e:	b909      	cbnz	r1, 80a1c74 <_ZN6String6concatEPKcj+0xc>
 80a1c70:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1c72:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1c74:	b16a      	cbz	r2, 80a1c92 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1c76:	6884      	ldr	r4, [r0, #8]
 80a1c78:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1c7a:	4621      	mov	r1, r4
 80a1c7c:	f7ff ff77 	bl	80a1b6e <_ZN6String7reserveEj>
 80a1c80:	2800      	cmp	r0, #0
 80a1c82:	d0f5      	beq.n	80a1c70 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1c84:	6828      	ldr	r0, [r5, #0]
 80a1c86:	68ab      	ldr	r3, [r5, #8]
 80a1c88:	4631      	mov	r1, r6
 80a1c8a:	4418      	add	r0, r3
 80a1c8c:	f000 fbf0 	bl	80a2470 <strcpy>
	len = newlen;
 80a1c90:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1c92:	2001      	movs	r0, #1
 80a1c94:	e7ed      	b.n	80a1c72 <_ZN6String6concatEPKcj+0xa>

080a1c96 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1c96:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1c98:	688a      	ldr	r2, [r1, #8]
 80a1c9a:	6809      	ldr	r1, [r1, #0]
{
 80a1c9c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1c9e:	f7ff ffe3 	bl	80a1c68 <_ZN6String6concatEPKcj>
 80a1ca2:	b910      	cbnz	r0, 80a1caa <_ZplRK15StringSumHelperRK6String+0x14>
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	f7ff ff4b 	bl	80a1b40 <_ZN6String10invalidateEv>
	return a;
}
 80a1caa:	4620      	mov	r0, r4
 80a1cac:	bd10      	pop	{r4, pc}

080a1cae <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1cae:	b538      	push	{r3, r4, r5, lr}
 80a1cb0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1cb2:	460d      	mov	r5, r1
 80a1cb4:	b921      	cbnz	r1, 80a1cc0 <_ZplRK15StringSumHelperPKc+0x12>
 80a1cb6:	4620      	mov	r0, r4
 80a1cb8:	f7ff ff42 	bl	80a1b40 <_ZN6String10invalidateEv>
	return a;
}
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1cc0:	4608      	mov	r0, r1
 80a1cc2:	f000 fbf8 	bl	80a24b6 <strlen>
 80a1cc6:	4629      	mov	r1, r5
 80a1cc8:	4602      	mov	r2, r0
 80a1cca:	4620      	mov	r0, r4
 80a1ccc:	f7ff ffcc 	bl	80a1c68 <_ZN6String6concatEPKcj>
 80a1cd0:	2800      	cmp	r0, #0
 80a1cd2:	d0f0      	beq.n	80a1cb6 <_ZplRK15StringSumHelperPKc+0x8>
 80a1cd4:	e7f2      	b.n	80a1cbc <_ZplRK15StringSumHelperPKc+0xe>
	...

080a1cd8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1cd8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1cda:	2000      	movs	r0, #0
 80a1cdc:	4b04      	ldr	r3, [pc, #16]	; (80a1cf0 <_GLOBAL__sub_I_System+0x18>)
 80a1cde:	601a      	str	r2, [r3, #0]
 80a1ce0:	4b04      	ldr	r3, [pc, #16]	; (80a1cf4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1ce2:	4a05      	ldr	r2, [pc, #20]	; (80a1cf8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1ce4:	6018      	str	r0, [r3, #0]
 80a1ce6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1ce8:	7198      	strb	r0, [r3, #6]
 80a1cea:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1cec:	f7ff b988 	b.w	80a1000 <set_system_mode>
 80a1cf0:	2000073c 	.word	0x2000073c
 80a1cf4:	20000730 	.word	0x20000730
 80a1cf8:	ffff0000 	.word	0xffff0000

080a1cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1cfc:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1cfe:	681a      	ldr	r2, [r3, #0]
 80a1d00:	4b02      	ldr	r3, [pc, #8]	; (80a1d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1d04:	4770      	bx	lr
 80a1d06:	bf00      	nop
 80a1d08:	20000010 	.word	0x20000010
 80a1d0c:	20000740 	.word	0x20000740

080a1d10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1d10:	4770      	bx	lr

080a1d12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d12:	7441      	strb	r1, [r0, #17]
}
 80a1d14:	4770      	bx	lr

080a1d16 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1d16:	4770      	bx	lr

080a1d18 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1d18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1d1a:	7c00      	ldrb	r0, [r0, #16]
 80a1d1c:	f7ff f928 	bl	80a0f70 <hal_usart_available_data_for_write>
}
 80a1d20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d24:	bd08      	pop	{r3, pc}

080a1d26 <_ZN11USARTSerial9availableEv>:
{
 80a1d26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1d28:	7c00      	ldrb	r0, [r0, #16]
 80a1d2a:	f7ff f8f9 	bl	80a0f20 <hal_usart_available>
}
 80a1d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d32:	bd08      	pop	{r3, pc}

080a1d34 <_ZN11USARTSerial4peekEv>:
{
 80a1d34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1d36:	7c00      	ldrb	r0, [r0, #16]
 80a1d38:	f7ff f902 	bl	80a0f40 <hal_usart_peek>
}
 80a1d3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d40:	bd08      	pop	{r3, pc}

080a1d42 <_ZN11USARTSerial4readEv>:
{
 80a1d42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1d44:	7c00      	ldrb	r0, [r0, #16]
 80a1d46:	f7ff f8f3 	bl	80a0f30 <hal_usart_read>
}
 80a1d4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d4e:	bd08      	pop	{r3, pc}

080a1d50 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1d50:	7c00      	ldrb	r0, [r0, #16]
 80a1d52:	f7ff b8fd 	b.w	80a0f50 <hal_usart_flush>

080a1d56 <_ZN11USARTSerial5writeEh>:
{
 80a1d56:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d58:	7c46      	ldrb	r6, [r0, #17]
{
 80a1d5a:	4604      	mov	r4, r0
 80a1d5c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d5e:	b12e      	cbz	r6, 80a1d6c <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1d60:	4629      	mov	r1, r5
 80a1d62:	7c20      	ldrb	r0, [r4, #16]
}
 80a1d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1d68:	f7ff b8d2 	b.w	80a0f10 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d6c:	7c00      	ldrb	r0, [r0, #16]
 80a1d6e:	f7ff f8ff 	bl	80a0f70 <hal_usart_available_data_for_write>
 80a1d72:	2800      	cmp	r0, #0
 80a1d74:	dcf4      	bgt.n	80a1d60 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1d76:	4630      	mov	r0, r6
 80a1d78:	bd70      	pop	{r4, r5, r6, pc}

080a1d7a <_ZN11USARTSerialD0Ev>:
 80a1d7a:	b510      	push	{r4, lr}
 80a1d7c:	4604      	mov	r4, r0
 80a1d7e:	2114      	movs	r1, #20
 80a1d80:	f000 fb1a 	bl	80a23b8 <_ZdlPvj>
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	bd10      	pop	{r4, pc}

080a1d88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1d88:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1d8c:	b510      	push	{r4, lr}
 80a1d8e:	4604      	mov	r4, r0
 80a1d90:	4608      	mov	r0, r1
 80a1d92:	4611      	mov	r1, r2
 80a1d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1d98:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1d9c:	4a04      	ldr	r2, [pc, #16]	; (80a1db0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1d9e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1da0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1da2:	2201      	movs	r2, #1
 80a1da4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1da6:	461a      	mov	r2, r3
 80a1da8:	f7ff f8aa 	bl	80a0f00 <hal_usart_init>
}
 80a1dac:	4620      	mov	r0, r4
 80a1dae:	bd10      	pop	{r4, pc}
 80a1db0:	080a27ec 	.word	0x080a27ec

080a1db4 <_Z22__fetch_global_Serial1v>:
{
 80a1db4:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1db6:	4d0c      	ldr	r5, [pc, #48]	; (80a1de8 <_Z22__fetch_global_Serial1v+0x34>)
 80a1db8:	7829      	ldrb	r1, [r5, #0]
 80a1dba:	f3bf 8f5b 	dmb	ish
 80a1dbe:	f011 0401 	ands.w	r4, r1, #1
 80a1dc2:	d10f      	bne.n	80a1de4 <_Z22__fetch_global_Serial1v+0x30>
 80a1dc4:	4628      	mov	r0, r5
 80a1dc6:	f7fe f96c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1dca:	b158      	cbz	r0, 80a1de4 <_Z22__fetch_global_Serial1v+0x30>
 80a1dcc:	4621      	mov	r1, r4
 80a1dce:	4b07      	ldr	r3, [pc, #28]	; (80a1dec <_Z22__fetch_global_Serial1v+0x38>)
 80a1dd0:	4a07      	ldr	r2, [pc, #28]	; (80a1df0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1dd2:	4808      	ldr	r0, [pc, #32]	; (80a1df4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1dd4:	f7ff ffd8 	bl	80a1d88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1dd8:	4628      	mov	r0, r5
 80a1dda:	f7fe f967 	bl	80a00ac <__cxa_guard_release>
 80a1dde:	4806      	ldr	r0, [pc, #24]	; (80a1df8 <_Z22__fetch_global_Serial1v+0x44>)
 80a1de0:	f000 faf1 	bl	80a23c6 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1de4:	4803      	ldr	r0, [pc, #12]	; (80a1df4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1de6:	bd38      	pop	{r3, r4, r5, pc}
 80a1de8:	20000744 	.word	0x20000744
 80a1dec:	200007cc 	.word	0x200007cc
 80a1df0:	20000748 	.word	0x20000748
 80a1df4:	20000850 	.word	0x20000850
 80a1df8:	080a1d17 	.word	0x080a1d17

080a1dfc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1dfc:	7441      	strb	r1, [r0, #17]
}
 80a1dfe:	4770      	bx	lr

080a1e00 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e00:	4770      	bx	lr

080a1e02 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1e02:	4770      	bx	lr

080a1e04 <_ZN9USBSerial4readEv>:
{
 80a1e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1e06:	2100      	movs	r1, #0
 80a1e08:	7c00      	ldrb	r0, [r0, #16]
 80a1e0a:	f7ff f8d9 	bl	80a0fc0 <HAL_USB_USART_Receive_Data>
}
 80a1e0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e12:	bd08      	pop	{r3, pc}

080a1e14 <_ZN9USBSerial4peekEv>:
{
 80a1e14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1e16:	2101      	movs	r1, #1
 80a1e18:	7c00      	ldrb	r0, [r0, #16]
 80a1e1a:	f7ff f8d1 	bl	80a0fc0 <HAL_USB_USART_Receive_Data>
}
 80a1e1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e22:	bd08      	pop	{r3, pc}

080a1e24 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1e24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1e26:	7c00      	ldrb	r0, [r0, #16]
 80a1e28:	f7ff f8c2 	bl	80a0fb0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e30:	bd08      	pop	{r3, pc}

080a1e32 <_ZN9USBSerial9availableEv>:
{
 80a1e32:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1e34:	7c00      	ldrb	r0, [r0, #16]
 80a1e36:	f7ff f8b3 	bl	80a0fa0 <HAL_USB_USART_Available_Data>
}
 80a1e3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e3e:	bd08      	pop	{r3, pc}

080a1e40 <_ZN9USBSerial5writeEh>:
{
 80a1e40:	b538      	push	{r3, r4, r5, lr}
 80a1e42:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e44:	7c00      	ldrb	r0, [r0, #16]
{
 80a1e46:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e48:	f7ff f8b2 	bl	80a0fb0 <HAL_USB_USART_Available_Data_For_Write>
 80a1e4c:	2800      	cmp	r0, #0
 80a1e4e:	dc01      	bgt.n	80a1e54 <_ZN9USBSerial5writeEh+0x14>
 80a1e50:	7c60      	ldrb	r0, [r4, #17]
 80a1e52:	b128      	cbz	r0, 80a1e60 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1e54:	4629      	mov	r1, r5
 80a1e56:	7c20      	ldrb	r0, [r4, #16]
 80a1e58:	f7ff f8ba 	bl	80a0fd0 <HAL_USB_USART_Send_Data>
 80a1e5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1e60:	bd38      	pop	{r3, r4, r5, pc}

080a1e62 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1e62:	7c00      	ldrb	r0, [r0, #16]
 80a1e64:	f7ff b8bc 	b.w	80a0fe0 <HAL_USB_USART_Flush_Data>

080a1e68 <_ZN9USBSerialD0Ev>:
 80a1e68:	b510      	push	{r4, lr}
 80a1e6a:	4604      	mov	r4, r0
 80a1e6c:	2114      	movs	r1, #20
 80a1e6e:	f000 faa3 	bl	80a23b8 <_ZdlPvj>
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	bd10      	pop	{r4, pc}

080a1e76 <__tcf_1>:
 80a1e76:	4770      	bx	lr

080a1e78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1e78:	b510      	push	{r4, lr}
 80a1e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e7e:	4604      	mov	r4, r0
 80a1e80:	4608      	mov	r0, r1
 80a1e82:	2100      	movs	r1, #0
 80a1e84:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1e88:	4b04      	ldr	r3, [pc, #16]	; (80a1e9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1e8a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1e8c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1e8e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1e90:	4611      	mov	r1, r2
  _blocking = true;
 80a1e92:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1e94:	f7ff f874 	bl	80a0f80 <HAL_USB_USART_Init>
}
 80a1e98:	4620      	mov	r0, r4
 80a1e9a:	bd10      	pop	{r4, pc}
 80a1e9c:	080a281c 	.word	0x080a281c

080a1ea0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1ea0:	2200      	movs	r2, #0
 80a1ea2:	7c00      	ldrb	r0, [r0, #16]
 80a1ea4:	f7ff b874 	b.w	80a0f90 <HAL_USB_USART_Begin>

080a1ea8 <_Z19acquireSerialBufferv>:
{
 80a1ea8:	b510      	push	{r4, lr}
 80a1eaa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1eac:	2214      	movs	r2, #20
 80a1eae:	2100      	movs	r1, #0
 80a1eb0:	f000 fab1 	bl	80a2416 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1eb4:	4b05      	ldr	r3, [pc, #20]	; (80a1ecc <_Z19acquireSerialBufferv+0x24>)
}
 80a1eb6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1eb8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1eba:	4b05      	ldr	r3, [pc, #20]	; (80a1ed0 <_Z19acquireSerialBufferv+0x28>)
 80a1ebc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1ebe:	f240 1301 	movw	r3, #257	; 0x101
 80a1ec2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1ec4:	2381      	movs	r3, #129	; 0x81
 80a1ec6:	8223      	strh	r3, [r4, #16]
}
 80a1ec8:	bd10      	pop	{r4, pc}
 80a1eca:	bf00      	nop
 80a1ecc:	20000894 	.word	0x20000894
 80a1ed0:	20000995 	.word	0x20000995

080a1ed4 <_Z16_fetch_usbserialv>:
{
 80a1ed4:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ed6:	4d0e      	ldr	r5, [pc, #56]	; (80a1f10 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1ed8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1eda:	a801      	add	r0, sp, #4
 80a1edc:	f7ff ffe4 	bl	80a1ea8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ee0:	7829      	ldrb	r1, [r5, #0]
 80a1ee2:	f3bf 8f5b 	dmb	ish
 80a1ee6:	f011 0401 	ands.w	r4, r1, #1
 80a1eea:	d10e      	bne.n	80a1f0a <_Z16_fetch_usbserialv+0x36>
 80a1eec:	4628      	mov	r0, r5
 80a1eee:	f7fe f8d8 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ef2:	b150      	cbz	r0, 80a1f0a <_Z16_fetch_usbserialv+0x36>
 80a1ef4:	4621      	mov	r1, r4
 80a1ef6:	aa01      	add	r2, sp, #4
 80a1ef8:	4806      	ldr	r0, [pc, #24]	; (80a1f14 <_Z16_fetch_usbserialv+0x40>)
 80a1efa:	f7ff ffbd 	bl	80a1e78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1efe:	4628      	mov	r0, r5
 80a1f00:	f7fe f8d4 	bl	80a00ac <__cxa_guard_release>
 80a1f04:	4804      	ldr	r0, [pc, #16]	; (80a1f18 <_Z16_fetch_usbserialv+0x44>)
 80a1f06:	f000 fa5e 	bl	80a23c6 <atexit>
	return _usbserial;
}
 80a1f0a:	4802      	ldr	r0, [pc, #8]	; (80a1f14 <_Z16_fetch_usbserialv+0x40>)
 80a1f0c:	b007      	add	sp, #28
 80a1f0e:	bd30      	pop	{r4, r5, pc}
 80a1f10:	20000864 	.word	0x20000864
 80a1f14:	2000086c 	.word	0x2000086c
 80a1f18:	080a1e01 	.word	0x080a1e01

080a1f1c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1f1c:	b510      	push	{r4, lr}
 80a1f1e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1f20:	2214      	movs	r2, #20
 80a1f22:	2100      	movs	r1, #0
 80a1f24:	f000 fa77 	bl	80a2416 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f28:	4b05      	ldr	r3, [pc, #20]	; (80a1f40 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1f2a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f2c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1f2e:	4b05      	ldr	r3, [pc, #20]	; (80a1f44 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1f30:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f32:	f240 1301 	movw	r3, #257	; 0x101
 80a1f36:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f38:	2381      	movs	r3, #129	; 0x81
 80a1f3a:	8223      	strh	r3, [r4, #16]
}
 80a1f3c:	bd10      	pop	{r4, pc}
 80a1f3e:	bf00      	nop
 80a1f40:	20000a16 	.word	0x20000a16
 80a1f44:	20000b17 	.word	0x20000b17

080a1f48 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1f48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f4a:	4c0e      	ldr	r4, [pc, #56]	; (80a1f84 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1f4c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1f4e:	a801      	add	r0, sp, #4
 80a1f50:	f7ff ffe4 	bl	80a1f1c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f54:	7823      	ldrb	r3, [r4, #0]
 80a1f56:	f3bf 8f5b 	dmb	ish
 80a1f5a:	07db      	lsls	r3, r3, #31
 80a1f5c:	d40e      	bmi.n	80a1f7c <_Z17_fetch_usbserial1v+0x34>
 80a1f5e:	4620      	mov	r0, r4
 80a1f60:	f7fe f89f 	bl	80a00a2 <__cxa_guard_acquire>
 80a1f64:	b150      	cbz	r0, 80a1f7c <_Z17_fetch_usbserial1v+0x34>
 80a1f66:	2101      	movs	r1, #1
 80a1f68:	aa01      	add	r2, sp, #4
 80a1f6a:	4807      	ldr	r0, [pc, #28]	; (80a1f88 <_Z17_fetch_usbserial1v+0x40>)
 80a1f6c:	f7ff ff84 	bl	80a1e78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7fe f89b 	bl	80a00ac <__cxa_guard_release>
 80a1f76:	4805      	ldr	r0, [pc, #20]	; (80a1f8c <_Z17_fetch_usbserial1v+0x44>)
 80a1f78:	f000 fa25 	bl	80a23c6 <atexit>
  return _usbserial1;
}
 80a1f7c:	4802      	ldr	r0, [pc, #8]	; (80a1f88 <_Z17_fetch_usbserial1v+0x40>)
 80a1f7e:	b006      	add	sp, #24
 80a1f80:	bd10      	pop	{r4, pc}
 80a1f82:	bf00      	nop
 80a1f84:	20000868 	.word	0x20000868
 80a1f88:	20000880 	.word	0x20000880
 80a1f8c:	080a1e77 	.word	0x080a1e77

080a1f90 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1f90:	2200      	movs	r2, #0
 80a1f92:	6840      	ldr	r0, [r0, #4]
 80a1f94:	4611      	mov	r1, r2
 80a1f96:	f7ff b897 	b.w	80a10c8 <network_ready>

080a1f9a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a1f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f9c:	4615      	mov	r5, r2
 80a1f9e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1fa0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1fa2:	460e      	mov	r6, r1
 80a1fa4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1fa6:	2100      	movs	r1, #0
 80a1fa8:	a803      	add	r0, sp, #12
 80a1faa:	f000 fa34 	bl	80a2416 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1fae:	4628      	mov	r0, r5
 80a1fb0:	f000 fa81 	bl	80a24b6 <strlen>
 80a1fb4:	2700      	movs	r7, #0
 80a1fb6:	b281      	uxth	r1, r0
 80a1fb8:	6873      	ldr	r3, [r6, #4]
 80a1fba:	4628      	mov	r0, r5
 80a1fbc:	9700      	str	r7, [sp, #0]
 80a1fbe:	aa03      	add	r2, sp, #12
 80a1fc0:	f7ff f816 	bl	80a0ff0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1fc4:	b130      	cbz	r0, 80a1fd4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1fc6:	4639      	mov	r1, r7
 80a1fc8:	4620      	mov	r0, r4
 80a1fca:	f7ff fca3 	bl	80a1914 <_ZN9IPAddressC1Em>
    }
 80a1fce:	4620      	mov	r0, r4
 80a1fd0:	b009      	add	sp, #36	; 0x24
 80a1fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1fd4:	4620      	mov	r0, r4
 80a1fd6:	a903      	add	r1, sp, #12
 80a1fd8:	f7ff fc8a 	bl	80a18f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1fdc:	e7f7      	b.n	80a1fce <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1fde <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1fde:	2200      	movs	r2, #0
 80a1fe0:	6840      	ldr	r0, [r0, #4]
 80a1fe2:	4611      	mov	r1, r2
 80a1fe4:	f7ff b890 	b.w	80a1108 <network_listening>

080a1fe8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1fe8:	2200      	movs	r2, #0
 80a1fea:	6840      	ldr	r0, [r0, #4]
 80a1fec:	4611      	mov	r1, r2
 80a1fee:	f7ff b89b 	b.w	80a1128 <network_get_listen_timeout>

080a1ff2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1ff2:	2200      	movs	r2, #0
 80a1ff4:	6840      	ldr	r0, [r0, #4]
 80a1ff6:	f7ff b88f 	b.w	80a1118 <network_set_listen_timeout>

080a1ffa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1ffa:	2200      	movs	r2, #0
 80a1ffc:	6840      	ldr	r0, [r0, #4]
 80a1ffe:	f081 0101 	eor.w	r1, r1, #1
 80a2002:	f7ff b879 	b.w	80a10f8 <network_listen>

080a2006 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2006:	2300      	movs	r3, #0
 80a2008:	6840      	ldr	r0, [r0, #4]
 80a200a:	461a      	mov	r2, r3
 80a200c:	4619      	mov	r1, r3
 80a200e:	f7ff b86b 	b.w	80a10e8 <network_off>

080a2012 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2012:	2300      	movs	r3, #0
 80a2014:	6840      	ldr	r0, [r0, #4]
 80a2016:	461a      	mov	r2, r3
 80a2018:	4619      	mov	r1, r3
 80a201a:	f7ff b85d 	b.w	80a10d8 <network_on>

080a201e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a201e:	2200      	movs	r2, #0
 80a2020:	6840      	ldr	r0, [r0, #4]
 80a2022:	4611      	mov	r1, r2
 80a2024:	f7ff b840 	b.w	80a10a8 <network_connecting>

080a2028 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2028:	2200      	movs	r2, #0
 80a202a:	2102      	movs	r1, #2
 80a202c:	6840      	ldr	r0, [r0, #4]
 80a202e:	f7ff b843 	b.w	80a10b8 <network_disconnect>

080a2032 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2032:	2300      	movs	r3, #0
 80a2034:	6840      	ldr	r0, [r0, #4]
 80a2036:	461a      	mov	r2, r3
 80a2038:	f7ff b82e 	b.w	80a1098 <network_connect>

080a203c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a203c:	2204      	movs	r2, #4
 80a203e:	4b02      	ldr	r3, [pc, #8]	; (80a2048 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2040:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2042:	4a02      	ldr	r2, [pc, #8]	; (80a204c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2044:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2046:	4770      	bx	lr
 80a2048:	20000b98 	.word	0x20000b98
 80a204c:	080a284c 	.word	0x080a284c

080a2050 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2050:	1e93      	subs	r3, r2, #2
 80a2052:	2b22      	cmp	r3, #34	; 0x22
 80a2054:	f04f 0300 	mov.w	r3, #0
{
 80a2058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a205c:	b08c      	sub	sp, #48	; 0x30
 80a205e:	460d      	mov	r5, r1
 80a2060:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2062:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a2066:	d926      	bls.n	80a20b6 <ltoa+0x66>

      if (10 == base && N < 0L)
 80a2068:	2800      	cmp	r0, #0
 80a206a:	da29      	bge.n	80a20c0 <ltoa+0x70>
      {
            *head++ = '-';
 80a206c:	462e      	mov	r6, r5
 80a206e:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a2070:	240a      	movs	r4, #10
            *head++ = '-';
 80a2072:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a2076:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2078:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a207c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2080:	4622      	mov	r2, r4
 80a2082:	4601      	mov	r1, r0
 80a2084:	a801      	add	r0, sp, #4
 80a2086:	f000 f9a4 	bl	80a23d2 <ldiv>
 80a208a:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a208c:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a208e:	2b09      	cmp	r3, #9
 80a2090:	bfcc      	ite	gt
 80a2092:	2237      	movgt	r2, #55	; 0x37
 80a2094:	2230      	movle	r2, #48	; 0x30
 80a2096:	4413      	add	r3, r2
 80a2098:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a209c:	f108 0801 	add.w	r8, r8, #1
 80a20a0:	2800      	cmp	r0, #0
 80a20a2:	d1ed      	bne.n	80a2080 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a20a4:	4642      	mov	r2, r8
 80a20a6:	4630      	mov	r0, r6
 80a20a8:	1c79      	adds	r1, r7, #1
 80a20aa:	f000 f9a6 	bl	80a23fa <memcpy>
      return str;
}
 80a20ae:	4628      	mov	r0, r5
 80a20b0:	b00c      	add	sp, #48	; 0x30
 80a20b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a20b6:	2a0a      	cmp	r2, #10
 80a20b8:	d0d6      	beq.n	80a2068 <ltoa+0x18>
      if (uarg)
 80a20ba:	b118      	cbz	r0, 80a20c4 <ltoa+0x74>
 80a20bc:	462e      	mov	r6, r5
 80a20be:	e7db      	b.n	80a2078 <ltoa+0x28>
 80a20c0:	240a      	movs	r4, #10
 80a20c2:	e7fa      	b.n	80a20ba <ltoa+0x6a>
      else  *tail-- = '0';
 80a20c4:	2330      	movs	r3, #48	; 0x30
 80a20c6:	462e      	mov	r6, r5
      int i = 2;
 80a20c8:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a20cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a20d0:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a20d4:	e7e6      	b.n	80a20a4 <ltoa+0x54>
	...

080a20d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a20d8:	4b01      	ldr	r3, [pc, #4]	; (80a20e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a20da:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a20dc:	4770      	bx	lr
 80a20de:	bf00      	nop
 80a20e0:	20000014 	.word	0x20000014

080a20e4 <serialEventRun>:
{
 80a20e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a20e6:	4b13      	ldr	r3, [pc, #76]	; (80a2134 <serialEventRun+0x50>)
 80a20e8:	b143      	cbz	r3, 80a20fc <serialEventRun+0x18>
 80a20ea:	f7ff fef3 	bl	80a1ed4 <_Z16_fetch_usbserialv>
 80a20ee:	6803      	ldr	r3, [r0, #0]
 80a20f0:	691b      	ldr	r3, [r3, #16]
 80a20f2:	4798      	blx	r3
 80a20f4:	2800      	cmp	r0, #0
 80a20f6:	dd01      	ble.n	80a20fc <serialEventRun+0x18>
        serialEvent();
 80a20f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a20fc:	4b0e      	ldr	r3, [pc, #56]	; (80a2138 <serialEventRun+0x54>)
 80a20fe:	b143      	cbz	r3, 80a2112 <serialEventRun+0x2e>
 80a2100:	f7ff fe58 	bl	80a1db4 <_Z22__fetch_global_Serial1v>
 80a2104:	6803      	ldr	r3, [r0, #0]
 80a2106:	691b      	ldr	r3, [r3, #16]
 80a2108:	4798      	blx	r3
 80a210a:	2800      	cmp	r0, #0
 80a210c:	dd01      	ble.n	80a2112 <serialEventRun+0x2e>
        serialEvent1();
 80a210e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2112:	4b0a      	ldr	r3, [pc, #40]	; (80a213c <serialEventRun+0x58>)
 80a2114:	b10b      	cbz	r3, 80a211a <serialEventRun+0x36>
 80a2116:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a211a:	4b09      	ldr	r3, [pc, #36]	; (80a2140 <serialEventRun+0x5c>)
 80a211c:	b143      	cbz	r3, 80a2130 <serialEventRun+0x4c>
 80a211e:	f7ff ff13 	bl	80a1f48 <_Z17_fetch_usbserial1v>
 80a2122:	6803      	ldr	r3, [r0, #0]
 80a2124:	691b      	ldr	r3, [r3, #16]
 80a2126:	4798      	blx	r3
 80a2128:	2800      	cmp	r0, #0
 80a212a:	dd01      	ble.n	80a2130 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a212c:	f3af 8000 	nop.w
}
 80a2130:	bd08      	pop	{r3, pc}
 80a2132:	bf00      	nop
	...

080a2144 <_post_loop>:
{
 80a2144:	b508      	push	{r3, lr}
	serialEventRun();
 80a2146:	f7ff ffcd 	bl	80a20e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a214a:	f7fe fe45 	bl	80a0dd8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a214e:	4b01      	ldr	r3, [pc, #4]	; (80a2154 <_post_loop+0x10>)
 80a2150:	6018      	str	r0, [r3, #0]
}
 80a2152:	bd08      	pop	{r3, pc}
 80a2154:	20000bb8 	.word	0x20000bb8

080a2158 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2158:	4805      	ldr	r0, [pc, #20]	; (80a2170 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a215a:	4a06      	ldr	r2, [pc, #24]	; (80a2174 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a215c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a215e:	1a12      	subs	r2, r2, r0
 80a2160:	4905      	ldr	r1, [pc, #20]	; (80a2178 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2162:	f000 f94a 	bl	80a23fa <memcpy>
    __backup_sram_signature = signature;
 80a2166:	4b05      	ldr	r3, [pc, #20]	; (80a217c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2168:	4a05      	ldr	r2, [pc, #20]	; (80a2180 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a216a:	601a      	str	r2, [r3, #0]
}
 80a216c:	bd08      	pop	{r3, pc}
 80a216e:	bf00      	nop
 80a2170:	40024000 	.word	0x40024000
 80a2174:	40024004 	.word	0x40024004
 80a2178:	080a28b0 	.word	0x080a28b0
 80a217c:	40024000 	.word	0x40024000
 80a2180:	9a271c1e 	.word	0x9a271c1e

080a2184 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2184:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2186:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2188:	461a      	mov	r2, r3
 80a218a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a218e:	9300      	str	r3, [sp, #0]
 80a2190:	f7fe ff60 	bl	80a1054 <system_ctrl_set_result>
}
 80a2194:	b003      	add	sp, #12
 80a2196:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a219c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a219c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a219e:	8843      	ldrh	r3, [r0, #2]
 80a21a0:	2b0a      	cmp	r3, #10
 80a21a2:	d008      	beq.n	80a21b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a21a4:	2b50      	cmp	r3, #80	; 0x50
 80a21a6:	d10b      	bne.n	80a21c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a21a8:	4b09      	ldr	r3, [pc, #36]	; (80a21d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a21aa:	681b      	ldr	r3, [r3, #0]
 80a21ac:	b14b      	cbz	r3, 80a21c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a21ae:	b003      	add	sp, #12
 80a21b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a21b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a21b6:	f7ff ffe5 	bl	80a2184 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a21ba:	b003      	add	sp, #12
 80a21bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21c0:	2300      	movs	r3, #0
 80a21c2:	461a      	mov	r2, r3
 80a21c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21c8:	9300      	str	r3, [sp, #0]
 80a21ca:	f7fe ff43 	bl	80a1054 <system_ctrl_set_result>
}
 80a21ce:	e7f4      	b.n	80a21ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a21d0:	20000ba4 	.word	0x20000ba4

080a21d4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a21d4:	2100      	movs	r1, #0
{
 80a21d6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a21d8:	4811      	ldr	r0, [pc, #68]	; (80a2220 <module_user_init_hook+0x4c>)
 80a21da:	f7fe ffe5 	bl	80a11a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a21de:	4b11      	ldr	r3, [pc, #68]	; (80a2224 <module_user_init_hook+0x50>)
 80a21e0:	681a      	ldr	r2, [r3, #0]
 80a21e2:	4b11      	ldr	r3, [pc, #68]	; (80a2228 <module_user_init_hook+0x54>)
 80a21e4:	429a      	cmp	r2, r3
 80a21e6:	bf0c      	ite	eq
 80a21e8:	2201      	moveq	r2, #1
 80a21ea:	2200      	movne	r2, #0
 80a21ec:	4b0f      	ldr	r3, [pc, #60]	; (80a222c <module_user_init_hook+0x58>)
 80a21ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a21f0:	d001      	beq.n	80a21f6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a21f2:	f7ff ffb1 	bl	80a2158 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a21f6:	f7fe fde7 	bl	80a0dc8 <HAL_RNG_GetRandomNumber>
 80a21fa:	4604      	mov	r4, r0
    srand(seed);
 80a21fc:	f000 f914 	bl	80a2428 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2200:	4b0b      	ldr	r3, [pc, #44]	; (80a2230 <module_user_init_hook+0x5c>)
 80a2202:	b113      	cbz	r3, 80a220a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2204:	4620      	mov	r0, r4
 80a2206:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a220a:	2100      	movs	r1, #0
 80a220c:	4808      	ldr	r0, [pc, #32]	; (80a2230 <module_user_init_hook+0x5c>)
 80a220e:	f7fe ff3b 	bl	80a1088 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2216:	2100      	movs	r1, #0
 80a2218:	4806      	ldr	r0, [pc, #24]	; (80a2234 <module_user_init_hook+0x60>)
 80a221a:	f7fe bf11 	b.w	80a1040 <system_ctrl_set_app_request_handler>
 80a221e:	bf00      	nop
 80a2220:	080a20d9 	.word	0x080a20d9
 80a2224:	40024000 	.word	0x40024000
 80a2228:	9a271c1e 	.word	0x9a271c1e
 80a222c:	20000ba0 	.word	0x20000ba0
 80a2230:	00000000 	.word	0x00000000
 80a2234:	080a219d 	.word	0x080a219d

080a2238 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2238:	4b02      	ldr	r3, [pc, #8]	; (80a2244 <__tcf_0+0xc>)
 80a223a:	6898      	ldr	r0, [r3, #8]
 80a223c:	b108      	cbz	r0, 80a2242 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a223e:	f7fe bdbb 	b.w	80a0db8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2242:	4770      	bx	lr
 80a2244:	20000bac 	.word	0x20000bac

080a2248 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2248:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a224a:	b570      	push	{r4, r5, r6, lr}
 80a224c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a224e:	d901      	bls.n	80a2254 <pinAvailable+0xc>
    return false;
 80a2250:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2252:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2254:	f1a0 030d 	sub.w	r3, r0, #13
 80a2258:	2b02      	cmp	r3, #2
 80a225a:	d90b      	bls.n	80a2274 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a225c:	2801      	cmp	r0, #1
 80a225e:	d824      	bhi.n	80a22aa <pinAvailable+0x62>
 80a2260:	f000 f878 	bl	80a2354 <_Z19__fetch_global_Wirev>
 80a2264:	2100      	movs	r1, #0
 80a2266:	7c00      	ldrb	r0, [r0, #16]
 80a2268:	f7fe fe1e 	bl	80a0ea8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a226c:	f080 0001 	eor.w	r0, r0, #1
 80a2270:	b2c0      	uxtb	r0, r0
 80a2272:	e7ee      	b.n	80a2252 <pinAvailable+0xa>
 80a2274:	4e12      	ldr	r6, [pc, #72]	; (80a22c0 <pinAvailable+0x78>)
 80a2276:	7831      	ldrb	r1, [r6, #0]
 80a2278:	f3bf 8f5b 	dmb	ish
 80a227c:	f011 0501 	ands.w	r5, r1, #1
 80a2280:	d10d      	bne.n	80a229e <pinAvailable+0x56>
 80a2282:	4630      	mov	r0, r6
 80a2284:	f7fd ff0d 	bl	80a00a2 <__cxa_guard_acquire>
 80a2288:	b148      	cbz	r0, 80a229e <pinAvailable+0x56>
 80a228a:	4629      	mov	r1, r5
 80a228c:	480d      	ldr	r0, [pc, #52]	; (80a22c4 <pinAvailable+0x7c>)
 80a228e:	f7ff fc41 	bl	80a1b14 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2292:	4630      	mov	r0, r6
 80a2294:	f7fd ff0a 	bl	80a00ac <__cxa_guard_release>
 80a2298:	480b      	ldr	r0, [pc, #44]	; (80a22c8 <pinAvailable+0x80>)
 80a229a:	f000 f894 	bl	80a23c6 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a229e:	4b09      	ldr	r3, [pc, #36]	; (80a22c4 <pinAvailable+0x7c>)
 80a22a0:	7818      	ldrb	r0, [r3, #0]
 80a22a2:	f7fe fe25 	bl	80a0ef0 <hal_spi_is_enabled>
 80a22a6:	2800      	cmp	r0, #0
 80a22a8:	d1d2      	bne.n	80a2250 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a22aa:	3c12      	subs	r4, #18
 80a22ac:	2c01      	cmp	r4, #1
 80a22ae:	d805      	bhi.n	80a22bc <pinAvailable+0x74>
 80a22b0:	f7ff fd80 	bl	80a1db4 <_Z22__fetch_global_Serial1v>
 80a22b4:	7c00      	ldrb	r0, [r0, #16]
 80a22b6:	f7fe fe53 	bl	80a0f60 <hal_usart_is_enabled>
 80a22ba:	e7d7      	b.n	80a226c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a22bc:	2001      	movs	r0, #1
 80a22be:	e7c8      	b.n	80a2252 <pinAvailable+0xa>
 80a22c0:	20000ba8 	.word	0x20000ba8
 80a22c4:	20000bac 	.word	0x20000bac
 80a22c8:	080a2239 	.word	0x080a2239

080a22cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22cc:	2817      	cmp	r0, #23
{
 80a22ce:	b538      	push	{r3, r4, r5, lr}
 80a22d0:	4604      	mov	r4, r0
 80a22d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22d4:	d80a      	bhi.n	80a22ec <pinMode+0x20>
 80a22d6:	29ff      	cmp	r1, #255	; 0xff
 80a22d8:	d008      	beq.n	80a22ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a22da:	f7ff ffb5 	bl	80a2248 <pinAvailable>
 80a22de:	b128      	cbz	r0, 80a22ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a22e0:	4629      	mov	r1, r5
 80a22e2:	4620      	mov	r0, r4
}
 80a22e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a22e8:	f7fe bd7e 	b.w	80a0de8 <HAL_Pin_Mode>
}
 80a22ec:	bd38      	pop	{r3, r4, r5, pc}

080a22ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a22ee:	b538      	push	{r3, r4, r5, lr}
 80a22f0:	4604      	mov	r4, r0
 80a22f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a22f4:	f7fe fd80 	bl	80a0df8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a22f8:	28ff      	cmp	r0, #255	; 0xff
 80a22fa:	d010      	beq.n	80a231e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a22fc:	2806      	cmp	r0, #6
 80a22fe:	d804      	bhi.n	80a230a <digitalWrite+0x1c>
 80a2300:	234d      	movs	r3, #77	; 0x4d
 80a2302:	fa23 f000 	lsr.w	r0, r3, r0
 80a2306:	07c3      	lsls	r3, r0, #31
 80a2308:	d409      	bmi.n	80a231e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a230a:	4620      	mov	r0, r4
 80a230c:	f7ff ff9c 	bl	80a2248 <pinAvailable>
 80a2310:	b128      	cbz	r0, 80a231e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2312:	4629      	mov	r1, r5
 80a2314:	4620      	mov	r0, r4
}
 80a2316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a231a:	f7fe bd75 	b.w	80a0e08 <HAL_GPIO_Write>
}
 80a231e:	bd38      	pop	{r3, r4, r5, pc}

080a2320 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2320:	4770      	bx	lr
	...

080a2324 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2324:	2300      	movs	r3, #0
{
 80a2326:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2328:	2520      	movs	r5, #32
 80a232a:	8043      	strh	r3, [r0, #2]
 80a232c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a232e:	4e08      	ldr	r6, [pc, #32]	; (80a2350 <_Z17acquireWireBufferv+0x2c>)
{
 80a2330:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2332:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2334:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2336:	6085      	str	r5, [r0, #8]
 80a2338:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a233a:	4628      	mov	r0, r5
 80a233c:	f000 f83e 	bl	80a23bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2340:	4631      	mov	r1, r6
	};
 80a2342:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2344:	4628      	mov	r0, r5
 80a2346:	f000 f839 	bl	80a23bc <_ZnajRKSt9nothrow_t>
	};
 80a234a:	60e0      	str	r0, [r4, #12]
}
 80a234c:	4620      	mov	r0, r4
 80a234e:	bd70      	pop	{r4, r5, r6, pc}
 80a2350:	080a2880 	.word	0x080a2880

080a2354 <_Z19__fetch_global_Wirev>:
{
 80a2354:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2356:	4d0e      	ldr	r5, [pc, #56]	; (80a2390 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2358:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a235a:	7829      	ldrb	r1, [r5, #0]
 80a235c:	f3bf 8f5b 	dmb	ish
 80a2360:	f011 0401 	ands.w	r4, r1, #1
 80a2364:	d111      	bne.n	80a238a <_Z19__fetch_global_Wirev+0x36>
 80a2366:	4628      	mov	r0, r5
 80a2368:	f7fd fe9b 	bl	80a00a2 <__cxa_guard_acquire>
 80a236c:	b168      	cbz	r0, 80a238a <_Z19__fetch_global_Wirev+0x36>
 80a236e:	a801      	add	r0, sp, #4
 80a2370:	f7ff ffd8 	bl	80a2324 <_Z17acquireWireBufferv>
 80a2374:	4621      	mov	r1, r4
 80a2376:	aa01      	add	r2, sp, #4
 80a2378:	4806      	ldr	r0, [pc, #24]	; (80a2394 <_Z19__fetch_global_Wirev+0x40>)
 80a237a:	f7ff fa33 	bl	80a17e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a237e:	4628      	mov	r0, r5
 80a2380:	f7fd fe94 	bl	80a00ac <__cxa_guard_release>
 80a2384:	4804      	ldr	r0, [pc, #16]	; (80a2398 <_Z19__fetch_global_Wirev+0x44>)
 80a2386:	f000 f81e 	bl	80a23c6 <atexit>
	return wire;
}
 80a238a:	4802      	ldr	r0, [pc, #8]	; (80a2394 <_Z19__fetch_global_Wirev+0x40>)
 80a238c:	b007      	add	sp, #28
 80a238e:	bd30      	pop	{r4, r5, pc}
 80a2390:	20000bbc 	.word	0x20000bbc
 80a2394:	20000bc0 	.word	0x20000bc0
 80a2398:	080a2321 	.word	0x080a2321

080a239c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a239c:	2300      	movs	r3, #0
 80a239e:	b507      	push	{r0, r1, r2, lr}
 80a23a0:	461a      	mov	r2, r3
 80a23a2:	4619      	mov	r1, r3
 80a23a4:	9300      	str	r3, [sp, #0]
 80a23a6:	4803      	ldr	r0, [pc, #12]	; (80a23b4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a23a8:	f7ff faca 	bl	80a1940 <_ZN9IPAddressC1Ehhhh>
 80a23ac:	b003      	add	sp, #12
 80a23ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80a23b2:	bf00      	nop
 80a23b4:	20000bd4 	.word	0x20000bd4

080a23b8 <_ZdlPvj>:
 80a23b8:	f7fd be71 	b.w	80a009e <_ZdlPv>

080a23bc <_ZnajRKSt9nothrow_t>:
 80a23bc:	f7fd be6d 	b.w	80a009a <_Znaj>

080a23c0 <_ZSt25__throw_bad_function_callv>:
 80a23c0:	b508      	push	{r3, lr}
 80a23c2:	f7fe fee1 	bl	80a1188 <abort>

080a23c6 <atexit>:
 80a23c6:	2300      	movs	r3, #0
 80a23c8:	4601      	mov	r1, r0
 80a23ca:	461a      	mov	r2, r3
 80a23cc:	4618      	mov	r0, r3
 80a23ce:	f000 b87b 	b.w	80a24c8 <__register_exitproc>

080a23d2 <ldiv>:
 80a23d2:	b510      	push	{r4, lr}
 80a23d4:	fb91 f4f2 	sdiv	r4, r1, r2
 80a23d8:	2900      	cmp	r1, #0
 80a23da:	fb02 1314 	mls	r3, r2, r4, r1
 80a23de:	db06      	blt.n	80a23ee <ldiv+0x1c>
 80a23e0:	2b00      	cmp	r3, #0
 80a23e2:	da01      	bge.n	80a23e8 <ldiv+0x16>
 80a23e4:	3401      	adds	r4, #1
 80a23e6:	1a9b      	subs	r3, r3, r2
 80a23e8:	e9c0 4300 	strd	r4, r3, [r0]
 80a23ec:	bd10      	pop	{r4, pc}
 80a23ee:	2b00      	cmp	r3, #0
 80a23f0:	bfc4      	itt	gt
 80a23f2:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a23f6:	189b      	addgt	r3, r3, r2
 80a23f8:	e7f6      	b.n	80a23e8 <ldiv+0x16>

080a23fa <memcpy>:
 80a23fa:	440a      	add	r2, r1
 80a23fc:	4291      	cmp	r1, r2
 80a23fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2402:	d100      	bne.n	80a2406 <memcpy+0xc>
 80a2404:	4770      	bx	lr
 80a2406:	b510      	push	{r4, lr}
 80a2408:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a240c:	4291      	cmp	r1, r2
 80a240e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2412:	d1f9      	bne.n	80a2408 <memcpy+0xe>
 80a2414:	bd10      	pop	{r4, pc}

080a2416 <memset>:
 80a2416:	4603      	mov	r3, r0
 80a2418:	4402      	add	r2, r0
 80a241a:	4293      	cmp	r3, r2
 80a241c:	d100      	bne.n	80a2420 <memset+0xa>
 80a241e:	4770      	bx	lr
 80a2420:	f803 1b01 	strb.w	r1, [r3], #1
 80a2424:	e7f9      	b.n	80a241a <memset+0x4>
	...

080a2428 <srand>:
 80a2428:	b538      	push	{r3, r4, r5, lr}
 80a242a:	4b0d      	ldr	r3, [pc, #52]	; (80a2460 <srand+0x38>)
 80a242c:	4604      	mov	r4, r0
 80a242e:	681d      	ldr	r5, [r3, #0]
 80a2430:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2432:	b97b      	cbnz	r3, 80a2454 <srand+0x2c>
 80a2434:	2018      	movs	r0, #24
 80a2436:	f7fe fe8f 	bl	80a1158 <malloc>
 80a243a:	4a0a      	ldr	r2, [pc, #40]	; (80a2464 <srand+0x3c>)
 80a243c:	4b0a      	ldr	r3, [pc, #40]	; (80a2468 <srand+0x40>)
 80a243e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2440:	e9c0 2300 	strd	r2, r3, [r0]
 80a2444:	4b09      	ldr	r3, [pc, #36]	; (80a246c <srand+0x44>)
 80a2446:	2201      	movs	r2, #1
 80a2448:	6083      	str	r3, [r0, #8]
 80a244a:	230b      	movs	r3, #11
 80a244c:	8183      	strh	r3, [r0, #12]
 80a244e:	2300      	movs	r3, #0
 80a2450:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2454:	2200      	movs	r2, #0
 80a2456:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2458:	611c      	str	r4, [r3, #16]
 80a245a:	615a      	str	r2, [r3, #20]
 80a245c:	bd38      	pop	{r3, r4, r5, pc}
 80a245e:	bf00      	nop
 80a2460:	20000014 	.word	0x20000014
 80a2464:	abcd330e 	.word	0xabcd330e
 80a2468:	e66d1234 	.word	0xe66d1234
 80a246c:	0005deec 	.word	0x0005deec

080a2470 <strcpy>:
 80a2470:	4603      	mov	r3, r0
 80a2472:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2476:	f803 2b01 	strb.w	r2, [r3], #1
 80a247a:	2a00      	cmp	r2, #0
 80a247c:	d1f9      	bne.n	80a2472 <strcpy+0x2>
 80a247e:	4770      	bx	lr

080a2480 <strdup>:
 80a2480:	4b02      	ldr	r3, [pc, #8]	; (80a248c <strdup+0xc>)
 80a2482:	4601      	mov	r1, r0
 80a2484:	6818      	ldr	r0, [r3, #0]
 80a2486:	f000 b803 	b.w	80a2490 <_strdup_r>
 80a248a:	bf00      	nop
 80a248c:	20000014 	.word	0x20000014

080a2490 <_strdup_r>:
 80a2490:	b570      	push	{r4, r5, r6, lr}
 80a2492:	4604      	mov	r4, r0
 80a2494:	4608      	mov	r0, r1
 80a2496:	460d      	mov	r5, r1
 80a2498:	f000 f80d 	bl	80a24b6 <strlen>
 80a249c:	1c46      	adds	r6, r0, #1
 80a249e:	4631      	mov	r1, r6
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	f7fe fe79 	bl	80a1198 <_malloc_r>
 80a24a6:	4604      	mov	r4, r0
 80a24a8:	b118      	cbz	r0, 80a24b2 <_strdup_r+0x22>
 80a24aa:	4632      	mov	r2, r6
 80a24ac:	4629      	mov	r1, r5
 80a24ae:	f7ff ffa4 	bl	80a23fa <memcpy>
 80a24b2:	4620      	mov	r0, r4
 80a24b4:	bd70      	pop	{r4, r5, r6, pc}

080a24b6 <strlen>:
 80a24b6:	4603      	mov	r3, r0
 80a24b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a24bc:	2a00      	cmp	r2, #0
 80a24be:	d1fb      	bne.n	80a24b8 <strlen+0x2>
 80a24c0:	1a18      	subs	r0, r3, r0
 80a24c2:	3801      	subs	r0, #1
 80a24c4:	4770      	bx	lr
	...

080a24c8 <__register_exitproc>:
 80a24c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a24cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a258c <__register_exitproc+0xc4>
 80a24d0:	4606      	mov	r6, r0
 80a24d2:	f8d8 0000 	ldr.w	r0, [r8]
 80a24d6:	461f      	mov	r7, r3
 80a24d8:	460d      	mov	r5, r1
 80a24da:	4691      	mov	r9, r2
 80a24dc:	f000 f858 	bl	80a2590 <__retarget_lock_acquire_recursive>
 80a24e0:	4b26      	ldr	r3, [pc, #152]	; (80a257c <__register_exitproc+0xb4>)
 80a24e2:	681c      	ldr	r4, [r3, #0]
 80a24e4:	b934      	cbnz	r4, 80a24f4 <__register_exitproc+0x2c>
 80a24e6:	4c26      	ldr	r4, [pc, #152]	; (80a2580 <__register_exitproc+0xb8>)
 80a24e8:	601c      	str	r4, [r3, #0]
 80a24ea:	4b26      	ldr	r3, [pc, #152]	; (80a2584 <__register_exitproc+0xbc>)
 80a24ec:	b113      	cbz	r3, 80a24f4 <__register_exitproc+0x2c>
 80a24ee:	681b      	ldr	r3, [r3, #0]
 80a24f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a24f4:	6863      	ldr	r3, [r4, #4]
 80a24f6:	2b1f      	cmp	r3, #31
 80a24f8:	dd07      	ble.n	80a250a <__register_exitproc+0x42>
 80a24fa:	f8d8 0000 	ldr.w	r0, [r8]
 80a24fe:	f000 f849 	bl	80a2594 <__retarget_lock_release_recursive>
 80a2502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a250a:	b35e      	cbz	r6, 80a2564 <__register_exitproc+0x9c>
 80a250c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2510:	b988      	cbnz	r0, 80a2536 <__register_exitproc+0x6e>
 80a2512:	4b1d      	ldr	r3, [pc, #116]	; (80a2588 <__register_exitproc+0xc0>)
 80a2514:	b923      	cbnz	r3, 80a2520 <__register_exitproc+0x58>
 80a2516:	f8d8 0000 	ldr.w	r0, [r8]
 80a251a:	f000 f83a 	bl	80a2592 <__retarget_lock_release>
 80a251e:	e7f0      	b.n	80a2502 <__register_exitproc+0x3a>
 80a2520:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2524:	f7fe fe18 	bl	80a1158 <malloc>
 80a2528:	2800      	cmp	r0, #0
 80a252a:	d0f4      	beq.n	80a2516 <__register_exitproc+0x4e>
 80a252c:	2300      	movs	r3, #0
 80a252e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2532:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2536:	2201      	movs	r2, #1
 80a2538:	6863      	ldr	r3, [r4, #4]
 80a253a:	2e02      	cmp	r6, #2
 80a253c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2540:	fa02 f203 	lsl.w	r2, r2, r3
 80a2544:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2548:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a254c:	ea43 0302 	orr.w	r3, r3, r2
 80a2550:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2554:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2558:	bf02      	ittt	eq
 80a255a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a255e:	431a      	orreq	r2, r3
 80a2560:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2564:	6863      	ldr	r3, [r4, #4]
 80a2566:	f8d8 0000 	ldr.w	r0, [r8]
 80a256a:	1c5a      	adds	r2, r3, #1
 80a256c:	3302      	adds	r3, #2
 80a256e:	6062      	str	r2, [r4, #4]
 80a2570:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2574:	f000 f80e 	bl	80a2594 <__retarget_lock_release_recursive>
 80a2578:	2000      	movs	r0, #0
 80a257a:	e7c4      	b.n	80a2506 <__register_exitproc+0x3e>
 80a257c:	20000c78 	.word	0x20000c78
 80a2580:	20000bec 	.word	0x20000bec
 80a2584:	00000000 	.word	0x00000000
 80a2588:	080a1159 	.word	0x080a1159
 80a258c:	20000078 	.word	0x20000078

080a2590 <__retarget_lock_acquire_recursive>:
 80a2590:	4770      	bx	lr

080a2592 <__retarget_lock_release>:
 80a2592:	4770      	bx	lr

080a2594 <__retarget_lock_release_recursive>:
 80a2594:	4770      	bx	lr

080a2596 <link_code_end>:
	...

080a2598 <dynalib_user>:
 80a2598:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a25a8:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a25b8:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a25c8:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a25d8:	6f70 6577 2e72 4100 7474 6361 2068 6573     power..Attach se
 80a25e8:	736e 726f 7420 206f 6966 676e 7265 7720     nsor to finger w
 80a25f8:	7469 2068 7572 6262 7265 6220 6e61 2064     ith rubber band 
 80a2608:	6f74 4220 6765 6e69 0021 4e20 206f 6966     to Begin!. No fi
 80a2618:	676e 7265 003f 6946 676e 7265 4420 7465     nger?.Finger Det
 80a2628:	6365 6574 2064 2d2d 4920 696e 6974 6c61     ected -- Initial
 80a2638:	7a69 6e69 0067 2e2e 002e 5248 203d 2000     izing.....HR= . 
 80a2648:	5042 004d 202c 5053 324f 203d 2500 6800     BPM., SPO2= .%.h
 80a2658:	6165 7472 6152 6574 003a 202c 7300 6f70     eartRate:., .spo
 80a2668:	3a32 6400 7461 4561 746e 7972                2:.dataEntry.

080a2675 <_ZL14uch_spo2_table>:
 80a2675:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
 80a2685:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
 80a2695:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
 80a26a5:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
 80a26b5:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
 80a26c5:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
 80a26d5:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
 80a26e5:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
 80a26f5:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
 80a2705:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
 80a2715:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
 80a2725:	0709 0506 0203 0001 0000                     ...........

080a2730 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2738:	11e7 080a 11ed 080a 123d 080a 11fb 080a     ........=.......
 80a2748:	11e9 080a                                   ....

080a274c <_ZTV7TwoWire>:
	...
 80a2754:	178d 080a 17d7 080a 17af 080a 178f 080a     ................
 80a2764:	17b7 080a 17bf 080a 17c7 080a 17cf 080a     ................

080a2774 <_ZTV9IPAddress>:
	...
 80a277c:	18a1 080a 1891 080a 1893 080a 7061 0070     ............app.

080a278c <_ZTVN5spark12NetworkClassE>:
	...
 80a2794:	1969 080a 1973 080a 197d 080a 1987 080a     i...s...}.......
 80a27a4:	1991 080a 199d 080a 19a9 080a 19b1 080a     ................
 80a27b4:	19b9 080a 19c5 080a 19cd 080a 19d7 080a     ................
 80a27c4:	19e1 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a27d4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a27e4 <_ZTV11USARTSerial>:
	...
 80a27ec:	1d11 080a 1d7b 080a 1d57 080a 1a45 080a     ....{...W...E...
 80a27fc:	1d27 080a 1d43 080a 1d35 080a 1d51 080a     '...C...5...Q...
 80a280c:	1d13 080a 1d19 080a                         ........

080a2814 <_ZTV9USBSerial>:
	...
 80a281c:	1e03 080a 1e69 080a 1e41 080a 1a45 080a     ....i...A...E...
 80a282c:	1e33 080a 1e05 080a 1e15 080a 1e63 080a     3...........c...
 80a283c:	1e25 080a 1dfd 080a                         %.......

080a2844 <_ZTVN5spark9WiFiClassE>:
	...
 80a284c:	2033 080a 2029 080a 201f 080a 1f91 080a     3 ..) ... ......
 80a285c:	2013 080a 2007 080a 19a9 080a 19b1 080a     . ... ..........
 80a286c:	1ffb 080a 1ff3 080a 1fe9 080a 1fdf 080a     ................
 80a287c:	1f9b 080a                                   ....

080a2880 <_ZSt7nothrow>:
	...

080a2881 <link_const_variable_data_end>:
 80a2881:	00          	.byte	0x00
	...

080a2884 <link_constructors_location>:
 80a2884:	080a04a9 	.word	0x080a04a9
 80a2888:	080a1959 	.word	0x080a1959
 80a288c:	080a1a31 	.word	0x080a1a31
 80a2890:	080a1b09 	.word	0x080a1b09
 80a2894:	080a1cd9 	.word	0x080a1cd9
 80a2898:	080a1cfd 	.word	0x080a1cfd
 80a289c:	080a203d 	.word	0x080a203d
 80a28a0:	080a239d 	.word	0x080a239d

080a28a4 <link_constructors_end>:
	...
