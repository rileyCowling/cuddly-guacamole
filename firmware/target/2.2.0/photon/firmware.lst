
/Users/rileycowling/Documents/GitHub/cuddly-guacamole/firmware/target/2.2.0/photon/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004464  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a4480  080a4480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a4488  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e4  20000000  080a448c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c44  200000e8  200000e8  000400e8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a4570  080a4570  00034570  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a4598  080a4598  00034598  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001296a3  00000000  00000000  0003459c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000153b0  00000000  00000000  0015dc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b8a0  00000000  00000000  00172fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002148  00000000  00000000  0018e88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000050a0  00000000  00000000  001909d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000297c8  00000000  00000000  00195a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fe62  00000000  00000000  001bf23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b64bf  00000000  00000000  001ef0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005ac8  00000000  00000000  002a5560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 facf 	bl	80a35d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fad7 	bl	80a35ec <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a448c 	.word	0x080a448c
 80a004c:	200000e4 	.word	0x200000e4
 80a0050:	200000e8 	.word	0x200000e8
 80a0054:	20000d29 	.word	0x20000d29
 80a0058:	20000d29 	.word	0x20000d29

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f93b 	bl	80a22d8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a4458 	.word	0x080a4458
 80a0080:	080a4478 	.word	0x080a4478

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f85d 	bl	80a0148 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b8d9 	b.w	80a2248 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 b843 	b.w	80a1120 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 b841 	b.w	80a1120 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 b847 	b.w	80a1130 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int fingerPresent;
bool rangeSetter = false;


void setup()
{
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
 80a00b6:	f001 ff8f 	bl	80a1fd8 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00be:	f001 ff71 	bl	80a1fa4 <_ZN9USBSerial5beginEl>

  //setting up status LEDS
  pinMode(R_LED,OUTPUT);
 80a00c2:	4b1a      	ldr	r3, [pc, #104]	; (80a012c <setup+0x78>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	8818      	ldrh	r0, [r3, #0]
 80a00c8:	f002 f982 	bl	80a23d0 <pinMode>
  pinMode(G_LED,OUTPUT);
 80a00cc:	4b18      	ldr	r3, [pc, #96]	; (80a0130 <setup+0x7c>)
 80a00ce:	2101      	movs	r1, #1
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f002 f97d 	bl	80a23d0 <pinMode>
  pinMode(B_LED,OUTPUT);
 80a00d6:	4b17      	ldr	r3, [pc, #92]	; (80a0134 <setup+0x80>)
 80a00d8:	2101      	movs	r1, #1
 80a00da:	8818      	ldrh	r0, [r3, #0]
 80a00dc:	f002 f978 	bl	80a23d0 <pinMode>
  pinMode(W_LED,OUTPUT);
 80a00e0:	4b15      	ldr	r3, [pc, #84]	; (80a0138 <setup+0x84>)
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	8818      	ldrh	r0, [r3, #0]
 80a00e6:	f002 f973 	bl	80a23d0 <pinMode>

  // Initialize sensor, if something is wrong go into the following infinite loop
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a00ea:	f002 f9b5 	bl	80a2458 <_Z19__fetch_global_Wirev>
 80a00ee:	2357      	movs	r3, #87	; 0x57
 80a00f0:	4601      	mov	r1, r0
 80a00f2:	4a12      	ldr	r2, [pc, #72]	; (80a013c <setup+0x88>)
 80a00f4:	4812      	ldr	r0, [pc, #72]	; (80a0140 <setup+0x8c>)
 80a00f6:	f000 fab1 	bl	80a065c <_ZN8MAX301055beginER7TwoWiremh>
 80a00fa:	b928      	cbnz	r0, 80a0108 <setup+0x54>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
 80a00fc:	f001 ff6c 	bl	80a1fd8 <_Z16_fetch_usbserialv>
 80a0100:	4910      	ldr	r1, [pc, #64]	; (80a0144 <setup+0x90>)
 80a0102:	f001 fcd2 	bl	80a1aaa <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
 80a0106:	e7fe      	b.n	80a0106 <setup+0x52>
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  //Configure sensor with these settings
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); 
 80a0108:	f240 139b 	movw	r3, #411	; 0x19b
 80a010c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a0110:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a0114:	2364      	movs	r3, #100	; 0x64
 80a0116:	2204      	movs	r2, #4
 80a0118:	9300      	str	r3, [sp, #0]
 80a011a:	213c      	movs	r1, #60	; 0x3c
 80a011c:	2302      	movs	r3, #2
 80a011e:	4808      	ldr	r0, [pc, #32]	; (80a0140 <setup+0x8c>)
 80a0120:	f000 fb5b 	bl	80a07da <_ZN8MAX301055setupEhhhiii>
}
 80a0124:	b005      	add	sp, #20
 80a0126:	f85d fb04 	ldr.w	pc, [sp], #4
 80a012a:	bf00      	nop
 80a012c:	20000008 	.word	0x20000008
 80a0130:	20000004 	.word	0x20000004
 80a0134:	20000000 	.word	0x20000000
 80a0138:	2000000c 	.word	0x2000000c
 80a013c:	00061a80 	.word	0x00061a80
 80a0140:	20000288 	.word	0x20000288
 80a0144:	080a3fdc 	.word	0x080a3fdc

080a0148 <loop>:

void loop(){ 
 80a0148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** Finger detection before getting started **/
  if (particleSensor.getIR() < 50000){
 80a014c:	4898      	ldr	r0, [pc, #608]	; (80a03b0 <loop+0x268>)
void loop(){ 
 80a014e:	b099      	sub	sp, #100	; 0x64
  if (particleSensor.getIR() < 50000){
 80a0150:	f000 fa6c 	bl	80a062c <_ZN8MAX301055getIREv>
 80a0154:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a0158:	4298      	cmp	r0, r3
 80a015a:	4f96      	ldr	r7, [pc, #600]	; (80a03b4 <loop+0x26c>)
 80a015c:	4e96      	ldr	r6, [pc, #600]	; (80a03b8 <loop+0x270>)
 80a015e:	d836      	bhi.n	80a01ce <loop+0x86>
    //Setting finger status to zero for not present
    fingerPresent=0;
 80a0160:	2500      	movs	r5, #0
 80a0162:	4c96      	ldr	r4, [pc, #600]	; (80a03bc <loop+0x274>)

    //No finger turn turn off B/G LEDs
    digitalWrite(G_LED,LOW);
 80a0164:	4629      	mov	r1, r5
 80a0166:	8838      	ldrh	r0, [r7, #0]
    fingerPresent=0;
 80a0168:	6025      	str	r5, [r4, #0]
    digitalWrite(G_LED,LOW);
 80a016a:	f002 f942 	bl	80a23f2 <digitalWrite>
    digitalWrite(B_LED, LOW);
 80a016e:	4b94      	ldr	r3, [pc, #592]	; (80a03c0 <loop+0x278>)
 80a0170:	4629      	mov	r1, r5
 80a0172:	8818      	ldrh	r0, [r3, #0]
 80a0174:	f002 f93d 	bl	80a23f2 <digitalWrite>
    digitalWrite(W_LED, LOW);
 80a0178:	4b92      	ldr	r3, [pc, #584]	; (80a03c4 <loop+0x27c>)
 80a017a:	4629      	mov	r1, r5
 80a017c:	8818      	ldrh	r0, [r3, #0]
 80a017e:	f002 f938 	bl	80a23f2 <digitalWrite>
    Serial.println(" No finger?");
 80a0182:	f001 ff29 	bl	80a1fd8 <_Z16_fetch_usbserialv>
 80a0186:	4990      	ldr	r1, [pc, #576]	; (80a03c8 <loop+0x280>)
 80a0188:	f001 fc85 	bl	80a1a96 <_ZN5Print7printlnEPKc>
    
    //we dont want to take unnecessary data
    //while there is no finger flash red LED
    while(fingerPresent==0){ 
      digitalWrite(R_LED,HIGH);
 80a018c:	f04f 0801 	mov.w	r8, #1
      delay(200);
      digitalWrite(R_LED,LOW);
      delay(200);
      if(!(particleSensor.getIR() < 50000)){
 80a0190:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80a03b0 <loop+0x268>
    while(fingerPresent==0){ 
 80a0194:	6825      	ldr	r5, [r4, #0]
 80a0196:	b9bd      	cbnz	r5, 80a01c8 <loop+0x80>
      digitalWrite(R_LED,HIGH);
 80a0198:	2101      	movs	r1, #1
 80a019a:	8830      	ldrh	r0, [r6, #0]
 80a019c:	f002 f929 	bl	80a23f2 <digitalWrite>
      delay(200);
 80a01a0:	20c8      	movs	r0, #200	; 0xc8
 80a01a2:	f000 fffd 	bl	80a11a0 <delay>
      digitalWrite(R_LED,LOW);
 80a01a6:	4629      	mov	r1, r5
 80a01a8:	8830      	ldrh	r0, [r6, #0]
 80a01aa:	f002 f922 	bl	80a23f2 <digitalWrite>
      delay(200);
 80a01ae:	20c8      	movs	r0, #200	; 0xc8
 80a01b0:	f000 fff6 	bl	80a11a0 <delay>
      if(!(particleSensor.getIR() < 50000)){
 80a01b4:	4648      	mov	r0, r9
 80a01b6:	f000 fa39 	bl	80a062c <_ZN8MAX301055getIREv>
 80a01ba:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a01be:	4298      	cmp	r0, r3
 80a01c0:	d9e8      	bls.n	80a0194 <loop+0x4c>
        fingerPresent=1; //Set finger status to 1 for present
 80a01c2:	f8c4 8000 	str.w	r8, [r4]
 80a01c6:	e7e5      	b.n	80a0194 <loop+0x4c>
        //Serial.println("Finger Detected -- Initializing");
      }
    }
    rangeSetter=false; // this recalculates the range if the finger has been removed 
 80a01c8:	2200      	movs	r2, #0
 80a01ca:	4b80      	ldr	r3, [pc, #512]	; (80a03cc <loop+0x284>)
 80a01cc:	701a      	strb	r2, [r3, #0]
  }

  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a01ce:	2364      	movs	r3, #100	; 0x64
 80a01d0:	4c7f      	ldr	r4, [pc, #508]	; (80a03d0 <loop+0x288>)
  
  //Finger present turn off Red LED and turn on Green LED
  digitalWrite(G_LED,HIGH);
 80a01d2:	2101      	movs	r1, #1
 80a01d4:	8838      	ldrh	r0, [r7, #0]
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a01d6:	6023      	str	r3, [r4, #0]
  digitalWrite(G_LED,HIGH);
 80a01d8:	f002 f90b 	bl	80a23f2 <digitalWrite>
  digitalWrite(R_LED,LOW);
 80a01dc:	2100      	movs	r1, #0
 80a01de:	8830      	ldrh	r0, [r6, #0]
 80a01e0:	f002 f907 	bl	80a23f2 <digitalWrite>

  if(!rangeSetter){
 80a01e4:	4b79      	ldr	r3, [pc, #484]	; (80a03cc <loop+0x284>)
 80a01e6:	781d      	ldrb	r5, [r3, #0]
 80a01e8:	4699      	mov	r9, r3
 80a01ea:	2d00      	cmp	r5, #0
 80a01ec:	d13e      	bne.n	80a026c <loop+0x124>
    //read the first 100 samples, and determine the signal range
    digitalWrite(B_LED,HIGH);
 80a01ee:	4e74      	ldr	r6, [pc, #464]	; (80a03c0 <loop+0x278>)
 80a01f0:	2101      	movs	r1, #1
 80a01f2:	8830      	ldrh	r0, [r6, #0]
 80a01f4:	f002 f8fd 	bl	80a23f2 <digitalWrite>
    Serial.println("...");
 80a01f8:	f001 feee 	bl	80a1fd8 <_Z16_fetch_usbserialv>
 80a01fc:	4975      	ldr	r1, [pc, #468]	; (80a03d4 <loop+0x28c>)
 80a01fe:	f001 fc4a 	bl	80a1a96 <_ZN5Print7printlnEPKc>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0202:	46b0      	mov	r8, r6
    {
      while (particleSensor.available() == false) //do we have new data?
        particleSensor.check(); //Check the sensor for new data

      redBuffer[i] = particleSensor.getRed();
 80a0204:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80a03dc <loop+0x294>
      while (particleSensor.available() == false) //do we have new data?
 80a0208:	4e69      	ldr	r6, [pc, #420]	; (80a03b0 <loop+0x268>)
      irBuffer[i] = particleSensor.getIR();
 80a020a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80a03e4 <loop+0x29c>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a020e:	6823      	ldr	r3, [r4, #0]
 80a0210:	b2ef      	uxtb	r7, r5
 80a0212:	429f      	cmp	r7, r3
 80a0214:	da16      	bge.n	80a0244 <loop+0xfc>
      while (particleSensor.available() == false) //do we have new data?
 80a0216:	4630      	mov	r0, r6
 80a0218:	f000 f905 	bl	80a0426 <_ZN8MAX301059availableEv>
 80a021c:	b918      	cbnz	r0, 80a0226 <loop+0xde>
        particleSensor.check(); //Check the sensor for new data
 80a021e:	4630      	mov	r0, r6
 80a0220:	f000 f943 	bl	80a04aa <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
 80a0224:	e7f7      	b.n	80a0216 <loop+0xce>
      redBuffer[i] = particleSensor.getRed();
 80a0226:	4630      	mov	r0, r6
 80a0228:	f000 f9f4 	bl	80a0614 <_ZN8MAX301056getRedEv>
 80a022c:	f84b 0027 	str.w	r0, [fp, r7, lsl #2]
      irBuffer[i] = particleSensor.getIR();
 80a0230:	4630      	mov	r0, r6
 80a0232:	f000 f9fb 	bl	80a062c <_ZN8MAX301055getIREv>
 80a0236:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a023a:	4630      	mov	r0, r6
 80a023c:	f000 f900 	bl	80a0440 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0240:	3501      	adds	r5, #1
 80a0242:	e7e4      	b.n	80a020e <loop+0xc6>

    }
    rangeSetter=true; 
 80a0244:	2301      	movs	r3, #1
    digitalWrite(B_LED,LOW);
 80a0246:	2100      	movs	r1, #0
 80a0248:	f8b8 0000 	ldrh.w	r0, [r8]
    rangeSetter=true; 
 80a024c:	f889 3000 	strb.w	r3, [r9]
    digitalWrite(B_LED,LOW);
 80a0250:	f002 f8cf 	bl	80a23f2 <digitalWrite>
    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate); 
 80a0254:	4b60      	ldr	r3, [pc, #384]	; (80a03d8 <loop+0x290>)
 80a0256:	4a61      	ldr	r2, [pc, #388]	; (80a03dc <loop+0x294>)
 80a0258:	9302      	str	r3, [sp, #8]
 80a025a:	4b61      	ldr	r3, [pc, #388]	; (80a03e0 <loop+0x298>)
 80a025c:	4861      	ldr	r0, [pc, #388]	; (80a03e4 <loop+0x29c>)
 80a025e:	9301      	str	r3, [sp, #4]
 80a0260:	4b61      	ldr	r3, [pc, #388]	; (80a03e8 <loop+0x2a0>)
 80a0262:	9300      	str	r3, [sp, #0]
 80a0264:	6821      	ldr	r1, [r4, #0]
 80a0266:	4b61      	ldr	r3, [pc, #388]	; (80a03ec <loop+0x2a4>)
 80a0268:	f000 fc1c 	bl	80a0aa4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
 80a026c:	495b      	ldr	r1, [pc, #364]	; (80a03dc <loop+0x294>)
 80a026e:	4a5d      	ldr	r2, [pc, #372]	; (80a03e4 <loop+0x29c>)
    Serial.println("...");
 80a0270:	2319      	movs	r3, #25
 80a0272:	4688      	mov	r8, r1
 80a0274:	4617      	mov	r7, r2
  }

  //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
  for (byte i = 25; i < 100; i++)
  {
    redBuffer[i - 25] = redBuffer[i];
 80a0276:	6e48      	ldr	r0, [r1, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a0278:	3301      	adds	r3, #1
    redBuffer[i - 25] = redBuffer[i];
 80a027a:	f841 0b04 	str.w	r0, [r1], #4
  for (byte i = 25; i < 100; i++)
 80a027e:	b2db      	uxtb	r3, r3
    irBuffer[i - 25] = irBuffer[i];
 80a0280:	6e50      	ldr	r0, [r2, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a0282:	2b64      	cmp	r3, #100	; 0x64
    irBuffer[i - 25] = irBuffer[i];
 80a0284:	f842 0b04 	str.w	r0, [r2], #4
  for (byte i = 25; i < 100; i++)
 80a0288:	d1f5      	bne.n	80a0276 <loop+0x12e>
 80a028a:	254b      	movs	r5, #75	; 0x4b
  }

  //take 25 sets of samples before calculating the heart rate.
  for (byte i = 75; i < 100; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
 80a028c:	4e48      	ldr	r6, [pc, #288]	; (80a03b0 <loop+0x268>)
 80a028e:	4630      	mov	r0, r6
 80a0290:	f000 f8c9 	bl	80a0426 <_ZN8MAX301059availableEv>
 80a0294:	b918      	cbnz	r0, 80a029e <loop+0x156>
      particleSensor.check(); //Check the sensor for new data
 80a0296:	4630      	mov	r0, r6
 80a0298:	f000 f907 	bl	80a04aa <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
 80a029c:	e7f7      	b.n	80a028e <loop+0x146>
    redBuffer[i] = particleSensor.getRed();
 80a029e:	4630      	mov	r0, r6
 80a02a0:	f000 f9b8 	bl	80a0614 <_ZN8MAX301056getRedEv>
 80a02a4:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    irBuffer[i] = particleSensor.getIR();
 80a02a8:	4630      	mov	r0, r6
 80a02aa:	f000 f9bf 	bl	80a062c <_ZN8MAX301055getIREv>
 80a02ae:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a02b2:	4630      	mov	r0, r6
 80a02b4:	3501      	adds	r5, #1
 80a02b6:	f000 f8c3 	bl	80a0440 <_ZN8MAX3010510nextSampleEv>
  for (byte i = 75; i < 100; i++)
 80a02ba:	2d64      	cmp	r5, #100	; 0x64
 80a02bc:	d1e7      	bne.n	80a028e <loop+0x146>
  }
  
  //After gathering 25 new samples recalculate HR and SP02
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a02be:	4b46      	ldr	r3, [pc, #280]	; (80a03d8 <loop+0x290>)
 80a02c0:	4e47      	ldr	r6, [pc, #284]	; (80a03e0 <loop+0x298>)
 80a02c2:	9302      	str	r3, [sp, #8]
 80a02c4:	4b48      	ldr	r3, [pc, #288]	; (80a03e8 <loop+0x2a0>)
 80a02c6:	4d49      	ldr	r5, [pc, #292]	; (80a03ec <loop+0x2a4>)
 80a02c8:	9300      	str	r3, [sp, #0]
 80a02ca:	9601      	str	r6, [sp, #4]
 80a02cc:	6821      	ldr	r1, [r4, #0]
 80a02ce:	462b      	mov	r3, r5
 80a02d0:	4a42      	ldr	r2, [pc, #264]	; (80a03dc <loop+0x294>)
 80a02d2:	4844      	ldr	r0, [pc, #272]	; (80a03e4 <loop+0x29c>)
 80a02d4:	f000 fbe6 	bl	80a0aa4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>

  //Strings that will makeup the body of the webhook
  Time.zone(-7);
 80a02d8:	4845      	ldr	r0, [pc, #276]	; (80a03f0 <loop+0x2a8>)
 80a02da:	f001 fd0d 	bl	80a1cf8 <_ZN9TimeClass4zoneEf>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a02de:	f001 fd7e 	bl	80a1dde <_ZN9TimeClass3nowEv>
 80a02e2:	17c3      	asrs	r3, r0, #31
 80a02e4:	4602      	mov	r2, r0
 80a02e6:	a804      	add	r0, sp, #16
 80a02e8:	f001 fd24 	bl	80a1d34 <_ZN9TimeClass7timeStrEx>
  String time = Time.timeStr();
  String data1 = String(heartRate);
 80a02ec:	220a      	movs	r2, #10
 80a02ee:	6831      	ldr	r1, [r6, #0]
 80a02f0:	a808      	add	r0, sp, #32
 80a02f2:	f001 fc96 	bl	80a1c22 <_ZN6StringC1Elh>
  String data2 = String(spo2);
 80a02f6:	220a      	movs	r2, #10
 80a02f8:	6829      	ldr	r1, [r5, #0]
 80a02fa:	a80c      	add	r0, sp, #48	; 0x30
 80a02fc:	f001 fc91 	bl	80a1c22 <_ZN6StringC1Elh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0300:	493c      	ldr	r1, [pc, #240]	; (80a03f4 <loop+0x2ac>)
 80a0302:	a814      	add	r0, sp, #80	; 0x50
 80a0304:	f001 fc4f 	bl	80a1ba6 <_ZN6StringC1EPKc>
  String data = "{ \"time\": \"" + time + "\", \"heartRate\": " + data1 + ", " + "\"spo2\": " + data2 + "}";
 80a0308:	a904      	add	r1, sp, #16
 80a030a:	a814      	add	r0, sp, #80	; 0x50
 80a030c:	f001 fcb3 	bl	80a1c76 <_ZplRK15StringSumHelperRK6String>
 80a0310:	4939      	ldr	r1, [pc, #228]	; (80a03f8 <loop+0x2b0>)
 80a0312:	f001 fcbc 	bl	80a1c8e <_ZplRK15StringSumHelperPKc>
 80a0316:	a908      	add	r1, sp, #32
 80a0318:	f001 fcad 	bl	80a1c76 <_ZplRK15StringSumHelperRK6String>
 80a031c:	4937      	ldr	r1, [pc, #220]	; (80a03fc <loop+0x2b4>)
 80a031e:	f001 fcb6 	bl	80a1c8e <_ZplRK15StringSumHelperPKc>
 80a0322:	4937      	ldr	r1, [pc, #220]	; (80a0400 <loop+0x2b8>)
 80a0324:	f001 fcb3 	bl	80a1c8e <_ZplRK15StringSumHelperPKc>
 80a0328:	a90c      	add	r1, sp, #48	; 0x30
 80a032a:	f001 fca4 	bl	80a1c76 <_ZplRK15StringSumHelperRK6String>
 80a032e:	4935      	ldr	r1, [pc, #212]	; (80a0404 <loop+0x2bc>)
 80a0330:	f001 fcad 	bl	80a1c8e <_ZplRK15StringSumHelperPKc>
 80a0334:	4601      	mov	r1, r0
 80a0336:	a810      	add	r0, sp, #64	; 0x40
 80a0338:	f001 fc57 	bl	80a1bea <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a033c:	a814      	add	r0, sp, #80	; 0x50
 80a033e:	f001 fbe8 	bl	80a1b12 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0342:	4b31      	ldr	r3, [pc, #196]	; (80a0408 <loop+0x2c0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a0346:	781b      	ldrb	r3, [r3, #0]
 80a0348:	4930      	ldr	r1, [pc, #192]	; (80a040c <loop+0x2c4>)
 80a034a:	f88d 3000 	strb.w	r3, [sp]
 80a034e:	a814      	add	r0, sp, #80	; 0x50
 80a0350:	233c      	movs	r3, #60	; 0x3c
 80a0352:	f001 f899 	bl	80a1488 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0356:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80a0358:	b17c      	cbz	r4, 80a037a <loop+0x232>
      if (--_M_use_count == 0)
 80a035a:	6863      	ldr	r3, [r4, #4]
 80a035c:	3b01      	subs	r3, #1
 80a035e:	6063      	str	r3, [r4, #4]
 80a0360:	b95b      	cbnz	r3, 80a037a <loop+0x232>
          _M_dispose();
 80a0362:	6823      	ldr	r3, [r4, #0]
 80a0364:	4620      	mov	r0, r4
 80a0366:	689b      	ldr	r3, [r3, #8]
 80a0368:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a036a:	68a3      	ldr	r3, [r4, #8]
 80a036c:	3b01      	subs	r3, #1
 80a036e:	60a3      	str	r3, [r4, #8]
 80a0370:	b91b      	cbnz	r3, 80a037a <loop+0x232>
            _M_destroy();
 80a0372:	6823      	ldr	r3, [r4, #0]
 80a0374:	4620      	mov	r0, r4
 80a0376:	68db      	ldr	r3, [r3, #12]
 80a0378:	4798      	blx	r3
  Particle.publish("dataEntry", data, PRIVATE); //Webhook for sending data to the server
  //LED to let you know the data was sent
  digitalWrite(W_LED,HIGH);
 80a037a:	4c12      	ldr	r4, [pc, #72]	; (80a03c4 <loop+0x27c>)
 80a037c:	2101      	movs	r1, #1
 80a037e:	8820      	ldrh	r0, [r4, #0]
 80a0380:	f002 f837 	bl	80a23f2 <digitalWrite>
  delay(200);
 80a0384:	20c8      	movs	r0, #200	; 0xc8
 80a0386:	f000 ff0b 	bl	80a11a0 <delay>
  digitalWrite(W_LED,LOW);
 80a038a:	2100      	movs	r1, #0
 80a038c:	8820      	ldrh	r0, [r4, #0]
 80a038e:	f002 f830 	bl	80a23f2 <digitalWrite>
  String data = "{ \"time\": \"" + time + "\", \"heartRate\": " + data1 + ", " + "\"spo2\": " + data2 + "}";
 80a0392:	a810      	add	r0, sp, #64	; 0x40
 80a0394:	f001 fbbd 	bl	80a1b12 <_ZN6StringD1Ev>
  String data2 = String(spo2);
 80a0398:	a80c      	add	r0, sp, #48	; 0x30
 80a039a:	f001 fbba 	bl	80a1b12 <_ZN6StringD1Ev>
  String data1 = String(heartRate);
 80a039e:	a808      	add	r0, sp, #32
 80a03a0:	f001 fbb7 	bl	80a1b12 <_ZN6StringD1Ev>
  String time = Time.timeStr();
 80a03a4:	a804      	add	r0, sp, #16
 80a03a6:	f001 fbb4 	bl	80a1b12 <_ZN6StringD1Ev>

}
 80a03aa:	b019      	add	sp, #100	; 0x64
 80a03ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a03b0:	20000288 	.word	0x20000288
 80a03b4:	20000004 	.word	0x20000004
 80a03b8:	20000008 	.word	0x20000008
 80a03bc:	200000f0 	.word	0x200000f0
 80a03c0:	20000000 	.word	0x20000000
 80a03c4:	2000000c 	.word	0x2000000c
 80a03c8:	080a400f 	.word	0x080a400f
 80a03cc:	200002c4 	.word	0x200002c4
 80a03d0:	200000ec 	.word	0x200000ec
 80a03d4:	080a401b 	.word	0x080a401b
 80a03d8:	2000045c 	.word	0x2000045c
 80a03dc:	200002c8 	.word	0x200002c8
 80a03e0:	200000f4 	.word	0x200000f4
 80a03e4:	200000f8 	.word	0x200000f8
 80a03e8:	2000045d 	.word	0x2000045d
 80a03ec:	20000458 	.word	0x20000458
 80a03f0:	c0e00000 	.word	0xc0e00000
 80a03f4:	080a401f 	.word	0x080a401f
 80a03f8:	080a402b 	.word	0x080a402b
 80a03fc:	080a403c 	.word	0x080a403c
 80a0400:	080a403f 	.word	0x080a403f
 80a0404:	080a4048 	.word	0x080a4048
 80a0408:	200000e8 	.word	0x200000e8
 80a040c:	080a404a 	.word	0x080a404a

080a0410 <_GLOBAL__sub_I_particleSensor>:
        val_(val) {
 80a0410:	2201      	movs	r2, #1
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <_GLOBAL__sub_I_particleSensor+0xc>)
MAX30105 particleSensor;
 80a0414:	4802      	ldr	r0, [pc, #8]	; (80a0420 <_GLOBAL__sub_I_particleSensor+0x10>)
 80a0416:	701a      	strb	r2, [r3, #0]
 80a0418:	f000 b804 	b.w	80a0424 <_ZN8MAX30105C1Ev>
 80a041c:	200000e8 	.word	0x200000e8
 80a0420:	20000288 	.word	0x20000288

080a0424 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a0424:	4770      	bx	lr

080a0426 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
 80a0426:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a042a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80a042e:	1a18      	subs	r0, r3, r0
 80a0430:	b2c3      	uxtb	r3, r0
 80a0432:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 80a0434:	2800      	cmp	r0, #0
 80a0436:	bfbc      	itt	lt
 80a0438:	1d18      	addlt	r0, r3, #4
 80a043a:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
 80a043c:	b2c0      	uxtb	r0, r0
 80a043e:	4770      	bx	lr

080a0440 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
 80a0444:	f7ff ffef 	bl	80a0426 <_ZN8MAX301059availableEv>
 80a0448:	b130      	cbz	r0, 80a0458 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
 80a044a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80a044e:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
 80a0450:	f003 0303 	and.w	r3, r3, #3
 80a0454:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
 80a0458:	bd08      	pop	{r3, pc}

080a045a <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a045a:	b570      	push	{r4, r5, r6, lr}
 80a045c:	4604      	mov	r4, r0
 80a045e:	4616      	mov	r6, r2
 80a0460:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a0462:	6800      	ldr	r0, [r0, #0]
 80a0464:	f001 f9fa 	bl	80a185c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0468:	6820      	ldr	r0, [r4, #0]
 80a046a:	4631      	mov	r1, r6
 80a046c:	6803      	ldr	r3, [r0, #0]
 80a046e:	689b      	ldr	r3, [r3, #8]
 80a0470:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a0472:	2100      	movs	r1, #0
 80a0474:	6820      	ldr	r0, [r4, #0]
 80a0476:	f001 f9f8 	bl	80a186a <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a047a:	2201      	movs	r2, #1
 80a047c:	4629      	mov	r1, r5
 80a047e:	6820      	ldr	r0, [r4, #0]
 80a0480:	f001 f9e9 	bl	80a1856 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a0484:	6820      	ldr	r0, [r4, #0]
 80a0486:	6803      	ldr	r3, [r0, #0]
 80a0488:	691b      	ldr	r3, [r3, #16]
 80a048a:	4798      	blx	r3
 80a048c:	b120      	cbz	r0, 80a0498 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a048e:	6820      	ldr	r0, [r4, #0]
 80a0490:	6803      	ldr	r3, [r0, #0]
 80a0492:	695b      	ldr	r3, [r3, #20]
 80a0494:	4798      	blx	r3
 80a0496:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a0498:	bd70      	pop	{r4, r5, r6, pc}

080a049a <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a049a:	2204      	movs	r2, #4
 80a049c:	7901      	ldrb	r1, [r0, #4]
 80a049e:	f7ff bfdc 	b.w	80a045a <_ZN8MAX3010513readRegister8Ehh>

080a04a2 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a04a2:	2206      	movs	r2, #6
 80a04a4:	7901      	ldrb	r1, [r0, #4]
 80a04a6:	f7ff bfd8 	b.w	80a045a <_ZN8MAX3010513readRegister8Ehh>

080a04aa <_ZN8MAX301055checkEv>:
{
 80a04aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a04ae:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
 80a04b0:	f7ff fff7 	bl	80a04a2 <_ZN8MAX3010514getReadPointerEv>
 80a04b4:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
 80a04b6:	4620      	mov	r0, r4
 80a04b8:	f7ff ffef 	bl	80a049a <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
 80a04bc:	4286      	cmp	r6, r0
 80a04be:	f000 808e 	beq.w	80a05de <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04c2:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a04c4:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a04c8:	6820      	ldr	r0, [r4, #0]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04ca:	bf48      	it	mi
 80a04cc:	3620      	addmi	r6, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a04ce:	7967      	ldrb	r7, [r4, #5]
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a04d0:	f001 f9c8 	bl	80a1864 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a04d4:	6820      	ldr	r0, [r4, #0]
 80a04d6:	2107      	movs	r1, #7
 80a04d8:	6803      	ldr	r3, [r0, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a04da:	f04f 0820 	mov.w	r8, #32
    _i2cPort->write(MAX30105_FIFODATA);
 80a04de:	689b      	ldr	r3, [r3, #8]
 80a04e0:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a04e2:	6820      	ldr	r0, [r4, #0]
 80a04e4:	f001 f9c5 	bl	80a1872 <_ZN7TwoWire15endTransmissionEv>
        temp[3] = 0;
 80a04e8:	f04f 0900 	mov.w	r9, #0
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a04ec:	4377      	muls	r7, r6
 80a04ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
 80a04f2:	2f00      	cmp	r7, #0
 80a04f4:	dd74      	ble.n	80a05e0 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
 80a04f6:	2f20      	cmp	r7, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a04f8:	bfc9      	itett	gt
 80a04fa:	7965      	ldrbgt	r5, [r4, #5]
 80a04fc:	463d      	movle	r5, r7
 80a04fe:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a0502:	fbb8 f2f5 	udivgt	r2, r8, r5
 80a0506:	bfc8      	it	gt
 80a0508:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a050a:	2157      	movs	r1, #87	; 0x57
 80a050c:	462a      	mov	r2, r5
 80a050e:	6820      	ldr	r0, [r4, #0]
      bytesLeftToRead -= toGet;
 80a0510:	1b7f      	subs	r7, r7, r5
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a0512:	f001 f9a0 	bl	80a1856 <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
 80a0516:	2d00      	cmp	r5, #0
 80a0518:	ddeb      	ble.n	80a04f2 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
 80a051a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a051e:	6820      	ldr	r0, [r4, #0]
        sense.head++; //Advance the head of the storage struct
 80a0520:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a0522:	f003 0303 	and.w	r3, r3, #3
 80a0526:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a052a:	6803      	ldr	r3, [r0, #0]
        temp[3] = 0;
 80a052c:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a0530:	695b      	ldr	r3, [r3, #20]
 80a0532:	4798      	blx	r3
 80a0534:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a0538:	6820      	ldr	r0, [r4, #0]
 80a053a:	6803      	ldr	r3, [r0, #0]
 80a053c:	695b      	ldr	r3, [r3, #20]
 80a053e:	4798      	blx	r3
 80a0540:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a0544:	6820      	ldr	r0, [r4, #0]
 80a0546:	6803      	ldr	r3, [r0, #0]
 80a0548:	695b      	ldr	r3, [r3, #20]
 80a054a:	4798      	blx	r3
 80a054c:	f88d 0004 	strb.w	r0, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0550:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0554:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0556:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0558:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a055c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
 80a0560:	7963      	ldrb	r3, [r4, #5]
 80a0562:	2b01      	cmp	r3, #1
 80a0564:	d919      	bls.n	80a059a <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
 80a0566:	6820      	ldr	r0, [r4, #0]
 80a0568:	6803      	ldr	r3, [r0, #0]
 80a056a:	695b      	ldr	r3, [r3, #20]
 80a056c:	4798      	blx	r3
 80a056e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0572:	6820      	ldr	r0, [r4, #0]
 80a0574:	6803      	ldr	r3, [r0, #0]
 80a0576:	695b      	ldr	r3, [r3, #20]
 80a0578:	4798      	blx	r3
 80a057a:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a057e:	6820      	ldr	r0, [r4, #0]
 80a0580:	6803      	ldr	r3, [r0, #0]
 80a0582:	695b      	ldr	r3, [r3, #20]
 80a0584:	4798      	blx	r3
 80a0586:	f88d 0004 	strb.w	r0, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a058a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a058e:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0590:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0592:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
 80a0596:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
 80a059a:	7963      	ldrb	r3, [r4, #5]
 80a059c:	2b02      	cmp	r3, #2
 80a059e:	d919      	bls.n	80a05d4 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
 80a05a0:	6820      	ldr	r0, [r4, #0]
 80a05a2:	6803      	ldr	r3, [r0, #0]
 80a05a4:	695b      	ldr	r3, [r3, #20]
 80a05a6:	4798      	blx	r3
 80a05a8:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a05ac:	6820      	ldr	r0, [r4, #0]
 80a05ae:	6803      	ldr	r3, [r0, #0]
 80a05b0:	695b      	ldr	r3, [r3, #20]
 80a05b2:	4798      	blx	r3
 80a05b4:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a05b8:	6820      	ldr	r0, [r4, #0]
 80a05ba:	6803      	ldr	r3, [r0, #0]
 80a05bc:	695b      	ldr	r3, [r3, #20]
 80a05be:	4798      	blx	r3
 80a05c0:	f88d 0004 	strb.w	r0, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a05c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05c8:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a05ca:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05cc:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
 80a05d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
 80a05d4:	7963      	ldrb	r3, [r4, #5]
 80a05d6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a05da:	441d      	add	r5, r3
      while (toGet > 0)
 80a05dc:	e79b      	b.n	80a0516 <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
 80a05de:	2600      	movs	r6, #0
}
 80a05e0:	b2b0      	uxth	r0, r6
 80a05e2:	b003      	add	sp, #12
 80a05e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a05e8 <_ZN8MAX301059safeCheckEh>:
{
 80a05e8:	b570      	push	{r4, r5, r6, lr}
 80a05ea:	4605      	mov	r5, r0
 80a05ec:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05ee:	f000 fba7 	bl	80a0d40 <HAL_Timer_Get_Milli_Seconds>
 80a05f2:	4604      	mov	r4, r0
 80a05f4:	f000 fba4 	bl	80a0d40 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a05f8:	1b00      	subs	r0, r0, r4
 80a05fa:	42b0      	cmp	r0, r6
 80a05fc:	d808      	bhi.n	80a0610 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
 80a05fe:	4628      	mov	r0, r5
 80a0600:	f7ff ff53 	bl	80a04aa <_ZN8MAX301055checkEv>
 80a0604:	2801      	cmp	r0, #1
 80a0606:	d004      	beq.n	80a0612 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
 80a0608:	2001      	movs	r0, #1
 80a060a:	f000 fdc9 	bl	80a11a0 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a060e:	e7f1      	b.n	80a05f4 <_ZN8MAX301059safeCheckEh+0xc>
 80a0610:	2000      	movs	r0, #0
}
 80a0612:	bd70      	pop	{r4, r5, r6, pc}

080a0614 <_ZN8MAX301056getRedEv>:
{
 80a0614:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a0616:	21fa      	movs	r1, #250	; 0xfa
{
 80a0618:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a061a:	f7ff ffe5 	bl	80a05e8 <_ZN8MAX301059safeCheckEh>
 80a061e:	b120      	cbz	r0, 80a062a <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
 80a0620:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0624:	3302      	adds	r3, #2
 80a0626:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a062a:	bd10      	pop	{r4, pc}

080a062c <_ZN8MAX301055getIREv>:
{
 80a062c:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a062e:	21fa      	movs	r1, #250	; 0xfa
{
 80a0630:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a0632:	f7ff ffd9 	bl	80a05e8 <_ZN8MAX301059safeCheckEh>
 80a0636:	b120      	cbz	r0, 80a0642 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a0638:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a063c:	3306      	adds	r3, #6
 80a063e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a0642:	bd10      	pop	{r4, pc}

080a0644 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a0644:	22ff      	movs	r2, #255	; 0xff
 80a0646:	7901      	ldrb	r1, [r0, #4]
 80a0648:	f7ff bf07 	b.w	80a045a <_ZN8MAX3010513readRegister8Ehh>

080a064c <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
 80a064c:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a064e:	22fe      	movs	r2, #254	; 0xfe
 80a0650:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
 80a0652:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a0654:	f7ff ff01 	bl	80a045a <_ZN8MAX3010513readRegister8Ehh>
 80a0658:	71a0      	strb	r0, [r4, #6]
}
 80a065a:	bd10      	pop	{r4, pc}

080a065c <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a065c:	b570      	push	{r4, r5, r6, lr}
 80a065e:	4604      	mov	r4, r0
 80a0660:	4616      	mov	r6, r2
 80a0662:	461d      	mov	r5, r3
 80a0664:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a0666:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
 80a0668:	f001 f8c6 	bl	80a17f8 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a066c:	4631      	mov	r1, r6
 80a066e:	6820      	ldr	r0, [r4, #0]
 80a0670:	f001 f8be 	bl	80a17f0 <_ZN7TwoWire8setSpeedEm>
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a0674:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
 80a0676:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a0678:	f7ff ffe4 	bl	80a0644 <_ZN8MAX3010510readPartIDEv>
 80a067c:	2815      	cmp	r0, #21
 80a067e:	d104      	bne.n	80a068a <_ZN8MAX301055beginER7TwoWiremh+0x2e>
  readRevisionID();
 80a0680:	4620      	mov	r0, r4
 80a0682:	f7ff ffe3 	bl	80a064c <_ZN8MAX3010514readRevisionIDEv>
  return true;
 80a0686:	2001      	movs	r0, #1
}
 80a0688:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a068a:	2000      	movs	r0, #0
 80a068c:	e7fc      	b.n	80a0688 <_ZN8MAX301055beginER7TwoWiremh+0x2c>

080a068e <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a068e:	b570      	push	{r4, r5, r6, lr}
 80a0690:	4604      	mov	r4, r0
 80a0692:	4616      	mov	r6, r2
 80a0694:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a0696:	6800      	ldr	r0, [r0, #0]
 80a0698:	f001 f8e0 	bl	80a185c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a069c:	6820      	ldr	r0, [r4, #0]
 80a069e:	4631      	mov	r1, r6
 80a06a0:	6803      	ldr	r3, [r0, #0]
 80a06a2:	689b      	ldr	r3, [r3, #8]
 80a06a4:	4798      	blx	r3
  _i2cPort->write(value);
 80a06a6:	6820      	ldr	r0, [r4, #0]
 80a06a8:	4629      	mov	r1, r5
 80a06aa:	6803      	ldr	r3, [r0, #0]
 80a06ac:	689b      	ldr	r3, [r3, #8]
 80a06ae:	4798      	blx	r3
  _i2cPort->endTransmission();
 80a06b0:	6820      	ldr	r0, [r4, #0]
}
 80a06b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
 80a06b6:	f001 b8dc 	b.w	80a1872 <_ZN7TwoWire15endTransmissionEv>

080a06ba <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
 80a06ba:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a06bc:	220c      	movs	r2, #12
 80a06be:	7901      	ldrb	r1, [r0, #4]
 80a06c0:	f7ff bfe5 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a06c4 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
 80a06c4:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a06c6:	220d      	movs	r2, #13
 80a06c8:	7901      	ldrb	r1, [r0, #4]
 80a06ca:	f7ff bfe0 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a06ce <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
 80a06ce:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a06d0:	220e      	movs	r2, #14
 80a06d2:	7901      	ldrb	r1, [r0, #4]
 80a06d4:	f7ff bfdb 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a06d8 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
 80a06d8:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a06da:	2210      	movs	r2, #16
 80a06dc:	7901      	ldrb	r1, [r0, #4]
 80a06de:	f7ff bfd6 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a06e2 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
 80a06e2:	b510      	push	{r4, lr}
 80a06e4:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a06e6:	7901      	ldrb	r1, [r0, #4]
 80a06e8:	2300      	movs	r3, #0
 80a06ea:	2204      	movs	r2, #4
 80a06ec:	f7ff ffcf 	bl	80a068e <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a06f0:	4620      	mov	r0, r4
 80a06f2:	7921      	ldrb	r1, [r4, #4]
 80a06f4:	2300      	movs	r3, #0
 80a06f6:	2205      	movs	r2, #5
 80a06f8:	f7ff ffc9 	bl	80a068e <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a06fc:	4620      	mov	r0, r4
 80a06fe:	7921      	ldrb	r1, [r4, #4]
 80a0700:	2300      	movs	r3, #0
}
 80a0702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0706:	2206      	movs	r2, #6
 80a0708:	f7ff bfc1 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a070c <_ZN8MAX301057bitMaskEhhh>:
{
 80a070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0710:	460d      	mov	r5, r1
 80a0712:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a0714:	460a      	mov	r2, r1
 80a0716:	7901      	ldrb	r1, [r0, #4]
{
 80a0718:	4604      	mov	r4, r0
 80a071a:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a071c:	f7ff fe9d 	bl	80a045a <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
 80a0720:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0724:	462a      	mov	r2, r5
 80a0726:	4620      	mov	r0, r4
 80a0728:	7921      	ldrb	r1, [r4, #4]
 80a072a:	4333      	orrs	r3, r6
}
 80a072c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0730:	f7ff bfad 	b.w	80a068e <_ZN8MAX3010514writeRegister8Ehhh>

080a0734 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
 80a0734:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a0736:	22bf      	movs	r2, #191	; 0xbf
 80a0738:	2340      	movs	r3, #64	; 0x40
 80a073a:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
 80a073c:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a073e:	f7ff ffe5 	bl	80a070c <_ZN8MAX301057bitMaskEhhh>
 80a0742:	f000 fafd 	bl	80a0d40 <HAL_Timer_Get_Milli_Seconds>
 80a0746:	4605      	mov	r5, r0
 80a0748:	f000 fafa 	bl	80a0d40 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
 80a074c:	1b40      	subs	r0, r0, r5
 80a074e:	2863      	cmp	r0, #99	; 0x63
 80a0750:	d80a      	bhi.n	80a0768 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a0752:	2209      	movs	r2, #9
 80a0754:	4620      	mov	r0, r4
 80a0756:	7921      	ldrb	r1, [r4, #4]
 80a0758:	f7ff fe7f 	bl	80a045a <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a075c:	0643      	lsls	r3, r0, #25
 80a075e:	d503      	bpl.n	80a0768 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a0760:	2001      	movs	r0, #1
 80a0762:	f000 fd1d 	bl	80a11a0 <delay>
  while (millis() - startTime < 100)
 80a0766:	e7ef      	b.n	80a0748 <_ZN8MAX301059softResetEv+0x14>
}
 80a0768:	bd38      	pop	{r3, r4, r5, pc}

080a076a <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
 80a076a:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a076c:	22f8      	movs	r2, #248	; 0xf8
 80a076e:	2109      	movs	r1, #9
 80a0770:	f7ff bfcc 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a0774 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
 80a0774:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a0776:	229f      	movs	r2, #159	; 0x9f
 80a0778:	210a      	movs	r1, #10
 80a077a:	f7ff bfc7 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a077e <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
 80a077e:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0780:	22e3      	movs	r2, #227	; 0xe3
 80a0782:	210a      	movs	r1, #10
 80a0784:	f7ff bfc2 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a0788 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
 80a0788:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a078a:	22fc      	movs	r2, #252	; 0xfc
 80a078c:	210a      	movs	r1, #10
 80a078e:	f7ff bfbd 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a0792 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
 80a0792:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a0794:	221f      	movs	r2, #31
 80a0796:	2108      	movs	r1, #8
 80a0798:	f7ff bfb8 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a079c <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a079c:	2310      	movs	r3, #16
 80a079e:	22ef      	movs	r2, #239	; 0xef
 80a07a0:	2108      	movs	r1, #8
 80a07a2:	f7ff bfb3 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>

080a07a6 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
 80a07a6:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a07a8:	4613      	mov	r3, r2
 80a07aa:	2903      	cmp	r1, #3
 80a07ac:	d814      	bhi.n	80a07d8 <_ZN8MAX3010510enableSlotEhh+0x32>
 80a07ae:	e8df f001 	tbb	[pc, r1]
 80a07b2:	0602      	.short	0x0602
 80a07b4:	0e0b      	.short	0x0e0b
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a07b6:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a07b8:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a07ba:	f7ff bfa7 	b.w	80a070c <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a07be:	011b      	lsls	r3, r3, #4
 80a07c0:	228f      	movs	r2, #143	; 0x8f
 80a07c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07c6:	e7f7      	b.n	80a07b8 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a07c8:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a07ca:	2112      	movs	r1, #18
 80a07cc:	e7f5      	b.n	80a07ba <_ZN8MAX3010510enableSlotEhh+0x14>
 80a07ce:	011b      	lsls	r3, r3, #4
 80a07d0:	228f      	movs	r2, #143	; 0x8f
 80a07d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07d6:	e7f8      	b.n	80a07ca <_ZN8MAX3010510enableSlotEhh+0x24>
}
 80a07d8:	4770      	bx	lr

080a07da <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a07da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a07de:	4615      	mov	r5, r2
 80a07e0:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
 80a07e4:	4604      	mov	r4, r0
 80a07e6:	4688      	mov	r8, r1
 80a07e8:	461e      	mov	r6, r3
 80a07ea:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a07ee:	f7ff ffa1 	bl	80a0734 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a07f2:	2d01      	cmp	r5, #1
 80a07f4:	d14a      	bne.n	80a088c <_ZN8MAX301055setupEhhhiii+0xb2>
 80a07f6:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a07f8:	4620      	mov	r0, r4
 80a07fa:	f7ff ffca 	bl	80a0792 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a07fe:	4620      	mov	r0, r4
 80a0800:	f7ff ffcc 	bl	80a079c <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a0804:	2e03      	cmp	r6, #3
 80a0806:	d155      	bne.n	80a08b4 <_ZN8MAX301055setupEhhhiii+0xda>
 80a0808:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a080a:	4620      	mov	r0, r4
 80a080c:	f7ff ffad 	bl	80a076a <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a0810:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a0814:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a0816:	da52      	bge.n	80a08be <_ZN8MAX301055setupEhhhiii+0xe4>
 80a0818:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a081a:	4620      	mov	r0, r4
 80a081c:	f7ff ffaa 	bl	80a0774 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a0820:	2f63      	cmp	r7, #99	; 0x63
 80a0822:	dc59      	bgt.n	80a08d8 <_ZN8MAX301055setupEhhhiii+0xfe>
 80a0824:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a0826:	4620      	mov	r0, r4
 80a0828:	f7ff ffa9 	bl	80a077e <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a082c:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a0830:	dc72      	bgt.n	80a0918 <_ZN8MAX301055setupEhhhiii+0x13e>
 80a0832:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a0834:	4620      	mov	r0, r4
 80a0836:	f7ff ffa7 	bl	80a0788 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
 80a083a:	4641      	mov	r1, r8
 80a083c:	4620      	mov	r0, r4
 80a083e:	f7ff ff3c 	bl	80a06ba <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a0842:	4641      	mov	r1, r8
 80a0844:	4620      	mov	r0, r4
 80a0846:	f7ff ff3d 	bl	80a06c4 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a084a:	4641      	mov	r1, r8
 80a084c:	4620      	mov	r0, r4
 80a084e:	f7ff ff3e 	bl	80a06ce <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a0852:	4641      	mov	r1, r8
 80a0854:	4620      	mov	r0, r4
 80a0856:	f7ff ff3f 	bl	80a06d8 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
 80a085a:	2201      	movs	r2, #1
 80a085c:	4620      	mov	r0, r4
 80a085e:	4611      	mov	r1, r2
 80a0860:	f7ff ffa1 	bl	80a07a6 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a0864:	2e01      	cmp	r6, #1
 80a0866:	d90c      	bls.n	80a0882 <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0868:	2320      	movs	r3, #32
 80a086a:	228f      	movs	r2, #143	; 0x8f
 80a086c:	2111      	movs	r1, #17
 80a086e:	4620      	mov	r0, r4
 80a0870:	f7ff ff4c 	bl	80a070c <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a0874:	2e02      	cmp	r6, #2
 80a0876:	d004      	beq.n	80a0882 <_ZN8MAX301055setupEhhhiii+0xa8>
 80a0878:	2203      	movs	r2, #3
 80a087a:	4620      	mov	r0, r4
 80a087c:	4611      	mov	r1, r2
 80a087e:	f7ff ff92 	bl	80a07a6 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0882:	4620      	mov	r0, r4
}
 80a0884:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0888:	f7ff bf2b 	b.w	80a06e2 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a088c:	2d02      	cmp	r5, #2
 80a088e:	d101      	bne.n	80a0894 <_ZN8MAX301055setupEhhhiii+0xba>
 80a0890:	2120      	movs	r1, #32
 80a0892:	e7b1      	b.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a0894:	2d04      	cmp	r5, #4
 80a0896:	d101      	bne.n	80a089c <_ZN8MAX301055setupEhhhiii+0xc2>
 80a0898:	2140      	movs	r1, #64	; 0x40
 80a089a:	e7ad      	b.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a089c:	2d08      	cmp	r5, #8
 80a089e:	d101      	bne.n	80a08a4 <_ZN8MAX301055setupEhhhiii+0xca>
 80a08a0:	2160      	movs	r1, #96	; 0x60
 80a08a2:	e7a9      	b.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a08a4:	2d10      	cmp	r5, #16
 80a08a6:	d101      	bne.n	80a08ac <_ZN8MAX301055setupEhhhiii+0xd2>
 80a08a8:	2180      	movs	r1, #128	; 0x80
 80a08aa:	e7a5      	b.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a08ac:	2d20      	cmp	r5, #32
 80a08ae:	d1f3      	bne.n	80a0898 <_ZN8MAX301055setupEhhhiii+0xbe>
 80a08b0:	21a0      	movs	r1, #160	; 0xa0
 80a08b2:	e7a1      	b.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a08b4:	2e02      	cmp	r6, #2
 80a08b6:	bf0c      	ite	eq
 80a08b8:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a08ba:	2102      	movne	r1, #2
 80a08bc:	e7a5      	b.n	80a080a <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a08be:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a08c2:	da01      	bge.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xee>
 80a08c4:	2120      	movs	r1, #32
 80a08c6:	e7a8      	b.n	80a081a <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a08c8:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a08cc:	da01      	bge.n	80a08d2 <_ZN8MAX301055setupEhhhiii+0xf8>
 80a08ce:	2140      	movs	r1, #64	; 0x40
 80a08d0:	e7a3      	b.n	80a081a <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a08d2:	d1a1      	bne.n	80a0818 <_ZN8MAX301055setupEhhhiii+0x3e>
 80a08d4:	2160      	movs	r1, #96	; 0x60
 80a08d6:	e7a0      	b.n	80a081a <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a08d8:	2fc7      	cmp	r7, #199	; 0xc7
 80a08da:	dc01      	bgt.n	80a08e0 <_ZN8MAX301055setupEhhhiii+0x106>
 80a08dc:	2104      	movs	r1, #4
 80a08de:	e7a2      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a08e0:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
 80a08e4:	da01      	bge.n	80a08ea <_ZN8MAX301055setupEhhhiii+0x110>
 80a08e6:	2108      	movs	r1, #8
 80a08e8:	e79d      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a08ea:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 80a08ee:	da01      	bge.n	80a08f4 <_ZN8MAX301055setupEhhhiii+0x11a>
 80a08f0:	210c      	movs	r1, #12
 80a08f2:	e798      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a08f4:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 80a08f8:	da01      	bge.n	80a08fe <_ZN8MAX301055setupEhhhiii+0x124>
 80a08fa:	2110      	movs	r1, #16
 80a08fc:	e793      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a08fe:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 80a0902:	da01      	bge.n	80a0908 <_ZN8MAX301055setupEhhhiii+0x12e>
 80a0904:	2114      	movs	r1, #20
 80a0906:	e78e      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a0908:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 80a090c:	da01      	bge.n	80a0912 <_ZN8MAX301055setupEhhhiii+0x138>
 80a090e:	2118      	movs	r1, #24
 80a0910:	e789      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a0912:	d187      	bne.n	80a0824 <_ZN8MAX301055setupEhhhiii+0x4a>
 80a0914:	211c      	movs	r1, #28
 80a0916:	e786      	b.n	80a0826 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a0918:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a091c:	dc01      	bgt.n	80a0922 <_ZN8MAX301055setupEhhhiii+0x148>
 80a091e:	2101      	movs	r1, #1
 80a0920:	e788      	b.n	80a0834 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a0922:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a0926:	dc01      	bgt.n	80a092c <_ZN8MAX301055setupEhhhiii+0x152>
 80a0928:	2102      	movs	r1, #2
 80a092a:	e783      	b.n	80a0834 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a092c:	f240 139b 	movw	r3, #411	; 0x19b
 80a0930:	4599      	cmp	r9, r3
 80a0932:	f47f af7e 	bne.w	80a0832 <_ZN8MAX301055setupEhhhiii+0x58>
 80a0936:	2103      	movs	r1, #3
 80a0938:	e77c      	b.n	80a0834 <_ZN8MAX301055setupEhhhiii+0x5a>

080a093a <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80a093a:	4684      	mov	ip, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
 80a093c:	2000      	movs	r0, #0
{
 80a093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
 80a0942:	2401      	movs	r4, #1
  *n_npks = 0;
 80a0944:	6008      	str	r0, [r1, #0]
  
  while (i < n_size-1){
 80a0946:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a094a:	45a0      	cmp	r8, r4
 80a094c:	dd26      	ble.n	80a099c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 80a094e:	9d06      	ldr	r5, [sp, #24]
 80a0950:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80a0954:	00a6      	lsls	r6, r4, #2
 80a0956:	42a8      	cmp	r0, r5
 80a0958:	f104 0501 	add.w	r5, r4, #1
 80a095c:	dd1c      	ble.n	80a0998 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a095e:	4416      	add	r6, r2
 80a0960:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80a0964:	42b0      	cmp	r0, r6
 80a0966:	dd17      	ble.n	80a0998 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0968:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80a096a:	429e      	cmp	r6, r3
 80a096c:	4635      	mov	r5, r6
 80a096e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80a0972:	eba6 0e04 	sub.w	lr, r6, r4
 80a0976:	d003      	beq.n	80a0980 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
 80a0978:	42b8      	cmp	r0, r7
 80a097a:	f106 0601 	add.w	r6, r6, #1
 80a097e:	d0f4      	beq.n	80a096a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80a0980:	42b8      	cmp	r0, r7
 80a0982:	dd09      	ble.n	80a0998 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0984:	6808      	ldr	r0, [r1, #0]
 80a0986:	280e      	cmp	r0, #14
 80a0988:	dc06      	bgt.n	80a0998 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
 80a098a:	1c45      	adds	r5, r0, #1
 80a098c:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 80a098e:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
 80a0992:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
        i += n_width+1;
 80a0996:	4425      	add	r5, r4
{
 80a0998:	462c      	mov	r4, r5
 80a099a:	e7d6      	b.n	80a094a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
        i += n_width;
    }
    else
      i++;
  }
}
 80a099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a09a0 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80a09a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a09a2:	2301      	movs	r3, #1
 80a09a4:	4604      	mov	r4, r0
 80a09a6:	428b      	cmp	r3, r1
 80a09a8:	da0f      	bge.n	80a09ca <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
 80a09aa:	f854 6f04 	ldr.w	r6, [r4, #4]!
 80a09ae:	461a      	mov	r2, r3
 80a09b0:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a09b2:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80a09b6:	42b7      	cmp	r7, r6
 80a09b8:	dd03      	ble.n	80a09c2 <_Z17maxim_sort_ascendPll+0x22>
 80a09ba:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
 80a09bc:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a09c0:	d1f7      	bne.n	80a09b2 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
 80a09c2:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a09c6:	3301      	adds	r3, #1
 80a09c8:	e7ed      	b.n	80a09a6 <_Z17maxim_sort_ascendPll+0x6>
  }
}
 80a09ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09cc <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80a09cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a09d0:	2301      	movs	r3, #1
{
 80a09d2:	4690      	mov	r8, r2
 80a09d4:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
 80a09d6:	4543      	cmp	r3, r8
 80a09d8:	da16      	bge.n	80a0a08 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
 80a09da:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a09de:	461c      	mov	r4, r3
 80a09e0:	46ac      	mov	ip, r5
 80a09e2:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 80a09e6:	f8d9 2000 	ldr.w	r2, [r9]
 80a09ea:	f85c 7c04 	ldr.w	r7, [ip, #-4]
 80a09ee:	4696      	mov	lr, r2
 80a09f0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80a09f4:	4596      	cmp	lr, r2
 80a09f6:	dd03      	ble.n	80a0a00 <_Z26maxim_sort_indices_descendPlS_l+0x34>
 80a09f8:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
 80a09fa:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a09fe:	d1f2      	bne.n	80a09e6 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
 80a0a00:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a0a04:	3301      	adds	r3, #1
 80a0a06:	e7e6      	b.n	80a09d6 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
 80a0a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0a0c <_Z24maxim_remove_close_peaksPlS_S_l>:
{
 80a0a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a10:	4604      	mov	r4, r0
 80a0a12:	461e      	mov	r6, r3
 80a0a14:	4610      	mov	r0, r2
 80a0a16:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80a0a18:	680a      	ldr	r2, [r1, #0]
 80a0a1a:	4621      	mov	r1, r4
 80a0a1c:	f7ff ffd6 	bl	80a09cc <_Z26maxim_sort_indices_descendPlS_l>
 80a0a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0a24:	1f27      	subs	r7, r4, #4
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0a26:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
 80a0a2a:	6829      	ldr	r1, [r5, #0]
 80a0a2c:	4694      	mov	ip, r2
 80a0a2e:	4291      	cmp	r1, r2
 80a0a30:	dd1f      	ble.n	80a0a72 <_Z24maxim_remove_close_peaksPlS_S_l+0x66>
    *pn_npks = i+1;
 80a0a32:	3201      	adds	r2, #1
 80a0a34:	4610      	mov	r0, r2
 80a0a36:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0a38:	4281      	cmp	r1, r0
 80a0a3a:	d101      	bne.n	80a0a40 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
 80a0a3c:	3704      	adds	r7, #4
 80a0a3e:	e7f4      	b.n	80a0a2a <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80a0a40:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80a0a44:	bf0c      	ite	eq
 80a0a46:	46e6      	moveq	lr, ip
 80a0a48:	f8d7 e000 	ldrne.w	lr, [r7]
 80a0a4c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0a50:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0a54:	42b3      	cmp	r3, r6
 80a0a56:	dc01      	bgt.n	80a0a5c <_Z24maxim_remove_close_peaksPlS_S_l+0x50>
 80a0a58:	4598      	cmp	r8, r3
 80a0a5a:	dd08      	ble.n	80a0a6e <_Z24maxim_remove_close_peaksPlS_S_l+0x62>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 80a0a5c:	f8d5 e000 	ldr.w	lr, [r5]
 80a0a60:	f10e 0301 	add.w	r3, lr, #1
 80a0a64:	602b      	str	r3, [r5, #0]
 80a0a66:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0a6a:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0a6e:	3001      	adds	r0, #1
 80a0a70:	e7e2      	b.n	80a0a38 <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0a72:	4620      	mov	r0, r4
}
 80a0a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0a78:	f7ff bf92 	b.w	80a09a0 <_Z17maxim_sort_ascendPll>

080a0a7c <_Z16maxim_find_peaksPlS_S_llll>:
{
 80a0a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0a7e:	4605      	mov	r5, r0
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0a80:	9f08      	ldr	r7, [sp, #32]
{
 80a0a82:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0a84:	9700      	str	r7, [sp, #0]
 80a0a86:	f7ff ff58 	bl	80a093a <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 80a0a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0a8c:	4628      	mov	r0, r5
 80a0a8e:	f7ff ffbd 	bl	80a0a0c <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
 80a0a92:	6822      	ldr	r2, [r4, #0]
 80a0a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0a96:	429a      	cmp	r2, r3
 80a0a98:	bfd4      	ite	le
 80a0a9a:	6022      	strle	r2, [r4, #0]
 80a0a9c:	6023      	strgt	r3, [r4, #0]
}
 80a0a9e:	b003      	add	sp, #12
 80a0aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0aa4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
 80a0aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0aa8:	4617      	mov	r7, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0aaa:	2200      	movs	r2, #0
{
 80a0aac:	469b      	mov	fp, r3
 80a0aae:	4605      	mov	r5, r0
 80a0ab0:	460c      	mov	r4, r1
  un_ir_mean =0; 
 80a0ab2:	4613      	mov	r3, r2
{
 80a0ab4:	b09f      	sub	sp, #124	; 0x7c
 80a0ab6:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0aba:	42a2      	cmp	r2, r4
 80a0abc:	da04      	bge.n	80a0ac8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
 80a0abe:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0ac2:	3201      	adds	r2, #1
 80a0ac4:	440b      	add	r3, r1
 80a0ac6:	e7f8      	b.n	80a0aba <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80a0ac8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80a0d00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
 80a0acc:	fbb3 f3f4 	udiv	r3, r3, r4
 80a0ad0:	4640      	mov	r0, r8
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0ad2:	2200      	movs	r2, #0
 80a0ad4:	42a2      	cmp	r2, r4
 80a0ad6:	da06      	bge.n	80a0ae6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0ad8:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0adc:	3201      	adds	r2, #1
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0ade:	1a59      	subs	r1, r3, r1
 80a0ae0:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0ae4:	e7f6      	b.n	80a0ad4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0ae6:	2100      	movs	r1, #0
 80a0ae8:	4a85      	ldr	r2, [pc, #532]	; (80a0d00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0aea:	6813      	ldr	r3, [r2, #0]
 80a0aec:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a0af0:	3101      	adds	r1, #1
 80a0af2:	4403      	add	r3, r0
 80a0af4:	6850      	ldr	r0, [r2, #4]
 80a0af6:	4403      	add	r3, r0
 80a0af8:	6890      	ldr	r0, [r2, #8]
 80a0afa:	181b      	adds	r3, r3, r0
 80a0afc:	bf48      	it	mi
 80a0afe:	3303      	addmi	r3, #3
 80a0b00:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0b02:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0b04:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0b08:	d1ef      	bne.n	80a0aea <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x46>
  n_th1=0; 
 80a0b0a:	2300      	movs	r3, #0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0b0c:	461a      	mov	r2, r3
 80a0b0e:	497c      	ldr	r1, [pc, #496]	; (80a0d00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    n_th1 +=  an_x[k];
 80a0b10:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0b14:	3201      	adds	r2, #1
 80a0b16:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
 80a0b18:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0b1a:	d1f9      	bne.n	80a0b10 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6c>
  if( n_th1<30) n_th1=30; // min allowed
 80a0b1c:	f640 31b7 	movw	r1, #2999	; 0xbb7
 80a0b20:	428b      	cmp	r3, r1
 80a0b22:	dd4b      	ble.n	80a0bbc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80a0b24:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0b28:	2b3c      	cmp	r3, #60	; 0x3c
 80a0b2a:	bfa8      	it	ge
 80a0b2c:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0b2e:	2200      	movs	r2, #0
 80a0b30:	ae0f      	add	r6, sp, #60	; 0x3c
  if( n_th1<30) n_th1=30; // min allowed
 80a0b32:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0b34:	4692      	mov	sl, r2
 80a0b36:	3201      	adds	r2, #1
 80a0b38:	2a0f      	cmp	r2, #15
 80a0b3a:	f841 ab04 	str.w	sl, [r1], #4
 80a0b3e:	d1fa      	bne.n	80a0b36 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x92>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 80a0b40:	9202      	str	r2, [sp, #8]
 80a0b42:	2204      	movs	r2, #4
 80a0b44:	4630      	mov	r0, r6
 80a0b46:	e9cd 3200 	strd	r3, r2, [sp]
 80a0b4a:	a909      	add	r1, sp, #36	; 0x24
 80a0b4c:	2364      	movs	r3, #100	; 0x64
 80a0b4e:	4a6c      	ldr	r2, [pc, #432]	; (80a0d00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
 80a0b50:	f7ff ff94 	bl	80a0a7c <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
 80a0b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b56:	2b01      	cmp	r3, #1
 80a0b58:	dd32      	ble.n	80a0bc0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x11c>
 80a0b5a:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
 80a0b5c:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0b5e:	2001      	movs	r0, #1
 80a0b60:	4671      	mov	r1, lr
 80a0b62:	f8de c004 	ldr.w	ip, [lr, #4]
 80a0b66:	6809      	ldr	r1, [r1, #0]
 80a0b68:	3001      	adds	r0, #1
 80a0b6a:	ebac 0c01 	sub.w	ip, ip, r1
 80a0b6e:	4283      	cmp	r3, r0
 80a0b70:	f10e 0e04 	add.w	lr, lr, #4
 80a0b74:	4462      	add	r2, ip
 80a0b76:	d1f3      	bne.n	80a0b60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xbc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80a0b78:	1e59      	subs	r1, r3, #1
 80a0b7a:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80a0b7e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0b82:	fb91 f2f2 	sdiv	r2, r1, r2
 80a0b86:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0b88:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
 80a0b8a:	2201      	movs	r2, #1
 80a0b8c:	f889 2000 	strb.w	r2, [r9]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0b90:	2200      	movs	r2, #0
 80a0b92:	485c      	ldr	r0, [pc, #368]	; (80a0d04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0b94:	42a2      	cmp	r2, r4
 80a0b96:	db19      	blt.n	80a0bcc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
  for(k=0; k< 5; k++) an_ratio[k]=0;
 80a0b98:	2200      	movs	r2, #0
 80a0b9a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 80a0b9e:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80a0ba2:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0ba4:	a90f      	add	r1, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0ba6:	4293      	cmp	r3, r2
 80a0ba8:	dd1c      	ble.n	80a0be4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x140>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0baa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80a0bae:	2864      	cmp	r0, #100	; 0x64
 80a0bb0:	dd16      	ble.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13c>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80a0bb2:	4b55      	ldr	r3, [pc, #340]	; (80a0d08 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0bb4:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
 80a0bb8:	2300      	movs	r3, #0
 80a0bba:	e097      	b.n	80a0cec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
 80a0bbc:	231e      	movs	r3, #30
 80a0bbe:	e7b6      	b.n	80a0b2e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8a>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 80a0bc0:	4a51      	ldr	r2, [pc, #324]	; (80a0d08 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0bc2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0bc4:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
 80a0bc6:	f889 a000 	strb.w	sl, [r9]
 80a0bca:	e7e1      	b.n	80a0b90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
      an_x[k] =  pun_ir_buffer[k] ; 
 80a0bcc:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0bd0:	f848 1b04 	str.w	r1, [r8], #4
      an_y[k] =  pun_red_buffer[k] ; 
 80a0bd4:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0bd8:	3201      	adds	r2, #1
      an_y[k] =  pun_red_buffer[k] ; 
 80a0bda:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0bde:	e7d9      	b.n	80a0b94 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0be0:	3201      	adds	r2, #1
 80a0be2:	e7e0      	b.n	80a0ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x102>
  int32_t n_x_dc_max_idx = 0; 
 80a0be4:	2000      	movs	r0, #0
  int32_t n_y_dc_max_idx = 0;
 80a0be6:	4607      	mov	r7, r0
  n_i_ratio_count = 0; 
 80a0be8:	4601      	mov	r1, r0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0bea:	3b01      	subs	r3, #1
 80a0bec:	f8df c110 	ldr.w	ip, [pc, #272]	; 80a0d00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0bf0:	f8df e110 	ldr.w	lr, [pc, #272]	; 80a0d04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0bf4:	9005      	str	r0, [sp, #20]
 80a0bf6:	9307      	str	r3, [sp, #28]
 80a0bf8:	9b07      	ldr	r3, [sp, #28]
 80a0bfa:	9a05      	ldr	r2, [sp, #20]
 80a0bfc:	4293      	cmp	r3, r2
 80a0bfe:	dd59      	ble.n	80a0cb4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 80a0c00:	4613      	mov	r3, r2
 80a0c02:	3301      	adds	r3, #1
 80a0c04:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a0c08:	9305      	str	r3, [sp, #20]
 80a0c0a:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0c0e:	eba8 0903 	sub.w	r9, r8, r3
 80a0c12:	f1b9 0f03 	cmp.w	r9, #3
 80a0c16:	ddef      	ble.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
    n_x_dc_max= -16777216; 
 80a0c18:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c1c:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
 80a0c1e:	9206      	str	r2, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c20:	45a8      	cmp	r8, r5
 80a0c22:	dd10      	ble.n	80a0c46 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a2>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c24:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c28:	9c06      	ldr	r4, [sp, #24]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c2a:	4592      	cmp	sl, r2
 80a0c2c:	bfc8      	it	gt
 80a0c2e:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c30:	f85e a025 	ldr.w	sl, [lr, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c34:	bfc8      	it	gt
 80a0c36:	4628      	movgt	r0, r5
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c38:	45a2      	cmp	sl, r4
 80a0c3a:	bfc4      	itt	gt
 80a0c3c:	462f      	movgt	r7, r5
 80a0c3e:	f8cd a018 	strgt.w	sl, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c42:	3501      	adds	r5, #1
 80a0c44:	e7ec      	b.n	80a0c20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x17c>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80a0c46:	f85c 4028 	ldr.w	r4, [ip, r8, lsl #2]
 80a0c4a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80a0c4e:	eba4 0a05 	sub.w	sl, r4, r5
 80a0c52:	1ac5      	subs	r5, r0, r3
 80a0c54:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0c58:	fb95 faf9 	sdiv	sl, r5, r9
 80a0c5c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0c60:	9c06      	ldr	r4, [sp, #24]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0c62:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80a0c64:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 80a0c68:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0c6c:	fb04 f40a 	mul.w	r4, r4, sl
 80a0c70:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0c72:	2c00      	cmp	r4, #0
 80a0c74:	ddc0      	ble.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
 80a0c76:	2904      	cmp	r1, #4
 80a0c78:	dcbe      	bgt.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80a0c7a:	f85e 5023 	ldr.w	r5, [lr, r3, lsl #2]
 80a0c7e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80a0c82:	1afb      	subs	r3, r7, r3
 80a0c84:	eba8 0805 	sub.w	r8, r8, r5
 80a0c88:	fb03 f308 	mul.w	r3, r3, r8
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 80a0c8c:	fb93 f3f9 	sdiv	r3, r3, r9
 80a0c90:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80a0c92:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 80a0c96:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80a0c98:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0c9a:	11d2      	asrs	r2, r2, #7
 80a0c9c:	d0ac      	beq.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0c9e:	ab1e      	add	r3, sp, #120	; 0x78
 80a0ca0:	eb03 0881 	add.w	r8, r3, r1, lsl #2
 80a0ca4:	2364      	movs	r3, #100	; 0x64
 80a0ca6:	435a      	muls	r2, r3
 80a0ca8:	fb92 f4f4 	sdiv	r4, r2, r4
        n_i_ratio_count++;
 80a0cac:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0cae:	f848 4c50 	str.w	r4, [r8, #-80]
        n_i_ratio_count++;
 80a0cb2:	e7a1      	b.n	80a0bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80a0cb4:	a80a      	add	r0, sp, #40	; 0x28
 80a0cb6:	f7ff fe73 	bl	80a09a0 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
 80a0cba:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
 80a0cbc:	2903      	cmp	r1, #3
 80a0cbe:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80a0cc2:	dd18      	ble.n	80a0cf6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80a0cc4:	a91e      	add	r1, sp, #120	; 0x78
 80a0cc6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a0cca:	f851 3c54 	ldr.w	r3, [r1, #-84]
 80a0cce:	f851 2c50 	ldr.w	r2, [r1, #-80]
 80a0cd2:	4413      	add	r3, r2
 80a0cd4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a0cd8:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
 80a0cda:	1eda      	subs	r2, r3, #3
 80a0cdc:	2ab4      	cmp	r2, #180	; 0xb4
 80a0cde:	f63f af68 	bhi.w	80a0bb2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10e>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80a0ce2:	4a0a      	ldr	r2, [pc, #40]	; (80a0d0c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
 80a0ce4:	5cd3      	ldrb	r3, [r2, r3]
 80a0ce6:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80a0cea:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
 80a0cec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80a0cee:	7013      	strb	r3, [r2, #0]
}
 80a0cf0:	b01f      	add	sp, #124	; 0x7c
 80a0cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
 80a0cf6:	aa1e      	add	r2, sp, #120	; 0x78
 80a0cf8:	4413      	add	r3, r2
 80a0cfa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80a0cfe:	e7ec      	b.n	80a0cda <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
 80a0d00:	20000460 	.word	0x20000460
 80a0d04:	200005f0 	.word	0x200005f0
 80a0d08:	fffffc19 	.word	0xfffffc19
 80a0d0c:	080a4054 	.word	0x080a4054

080a0d10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0d10:	b508      	push	{r3, lr}
 80a0d12:	4b02      	ldr	r3, [pc, #8]	; (80a0d1c <os_mutex_recursive_create+0xc>)
 80a0d14:	681b      	ldr	r3, [r3, #0]
 80a0d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d18:	9301      	str	r3, [sp, #4]
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	080601d0 	.word	0x080601d0

080a0d20 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0d20:	b508      	push	{r3, lr}
 80a0d22:	4b02      	ldr	r3, [pc, #8]	; (80a0d2c <os_mutex_recursive_destroy+0xc>)
 80a0d24:	681b      	ldr	r3, [r3, #0]
 80a0d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d28:	9301      	str	r3, [sp, #4]
 80a0d2a:	bd08      	pop	{r3, pc}
 80a0d2c:	080601d0 	.word	0x080601d0

080a0d30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0d30:	b508      	push	{r3, lr}
 80a0d32:	4b02      	ldr	r3, [pc, #8]	; (80a0d3c <HAL_RNG_GetRandomNumber+0xc>)
 80a0d34:	681b      	ldr	r3, [r3, #0]
 80a0d36:	685b      	ldr	r3, [r3, #4]
 80a0d38:	9301      	str	r3, [sp, #4]
 80a0d3a:	bd08      	pop	{r3, pc}
 80a0d3c:	0806019c 	.word	0x0806019c

080a0d40 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	695b      	ldr	r3, [r3, #20]
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	0806019c 	.word	0x0806019c

080a0d50 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <hal_rtc_time_is_valid+0xc>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0d58:	9301      	str	r3, [sp, #4]
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	0806019c 	.word	0x0806019c

080a0d60 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a0d60:	b508      	push	{r3, lr}
 80a0d62:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <hal_rtc_get_time+0xc>)
 80a0d64:	681b      	ldr	r3, [r3, #0]
 80a0d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0d68:	9301      	str	r3, [sp, #4]
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	0806019c 	.word	0x0806019c

080a0d70 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <HAL_Pin_Mode+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	689b      	ldr	r3, [r3, #8]
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601b0 	.word	0x080601b0

080a0d80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <HAL_Get_Pin_Mode+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	68db      	ldr	r3, [r3, #12]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601b0 	.word	0x080601b0

080a0d90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <HAL_GPIO_Write+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	691b      	ldr	r3, [r3, #16]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601b0 	.word	0x080601b0

080a0da0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <hal_i2c_set_speed+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601ac 	.word	0x080601ac

080a0db0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <hal_i2c_begin+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601ac 	.word	0x080601ac

080a0dc0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <hal_i2c_begin_transmission+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601ac 	.word	0x080601ac

080a0dd0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <hal_i2c_end_transmission+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601ac 	.word	0x080601ac

080a0de0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <hal_i2c_write+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601ac 	.word	0x080601ac

080a0df0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <hal_i2c_available+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601ac 	.word	0x080601ac

080a0e00 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <hal_i2c_read+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601ac 	.word	0x080601ac

080a0e10 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <hal_i2c_peek+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601ac 	.word	0x080601ac

080a0e20 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <hal_i2c_flush+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601ac 	.word	0x080601ac

080a0e30 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <hal_i2c_is_enabled+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601ac 	.word	0x080601ac

080a0e40 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b03      	ldr	r3, [pc, #12]	; (80a0e50 <hal_i2c_init+0x10>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0e4a:	9301      	str	r3, [sp, #4]
 80a0e4c:	bd08      	pop	{r3, pc}
 80a0e4e:	0000      	.short	0x0000
 80a0e50:	080601ac 	.word	0x080601ac

080a0e54 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b03      	ldr	r3, [pc, #12]	; (80a0e64 <hal_i2c_request_ex+0x10>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e5e:	9301      	str	r3, [sp, #4]
 80a0e60:	bd08      	pop	{r3, pc}
 80a0e62:	0000      	.short	0x0000
 80a0e64:	080601ac 	.word	0x080601ac

080a0e68 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <hal_spi_init+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	69db      	ldr	r3, [r3, #28]
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080601b4 	.word	0x080601b4

080a0e78 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <hal_spi_is_enabled+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	6a1b      	ldr	r3, [r3, #32]
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080601b4 	.word	0x080601b4

080a0e88 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <hal_usart_init+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	699b      	ldr	r3, [r3, #24]
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080601c4 	.word	0x080601c4

080a0e98 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <hal_usart_write+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601c4 	.word	0x080601c4

080a0ea8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <hal_usart_available+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601c4 	.word	0x080601c4

080a0eb8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <hal_usart_read+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601c4 	.word	0x080601c4

080a0ec8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <hal_usart_peek+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601c4 	.word	0x080601c4

080a0ed8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <hal_usart_flush+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601c4 	.word	0x080601c4

080a0ee8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <hal_usart_is_enabled+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601c4 	.word	0x080601c4

080a0ef8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b02      	ldr	r3, [pc, #8]	; (80a0f04 <hal_usart_available_data_for_write+0xc>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f00:	9301      	str	r3, [sp, #4]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	080601c4 	.word	0x080601c4

080a0f08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <HAL_USB_USART_Init+0xc>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	681b      	ldr	r3, [r3, #0]
 80a0f10:	9301      	str	r3, [sp, #4]
 80a0f12:	bd08      	pop	{r3, pc}
 80a0f14:	080601d8 	.word	0x080601d8

080a0f18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0f18:	b508      	push	{r3, lr}
 80a0f1a:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <HAL_USB_USART_Begin+0xc>)
 80a0f1c:	681b      	ldr	r3, [r3, #0]
 80a0f1e:	685b      	ldr	r3, [r3, #4]
 80a0f20:	9301      	str	r3, [sp, #4]
 80a0f22:	bd08      	pop	{r3, pc}
 80a0f24:	080601d8 	.word	0x080601d8

080a0f28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b02      	ldr	r3, [pc, #8]	; (80a0f34 <HAL_USB_USART_Available_Data+0xc>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	691b      	ldr	r3, [r3, #16]
 80a0f30:	9301      	str	r3, [sp, #4]
 80a0f32:	bd08      	pop	{r3, pc}
 80a0f34:	080601d8 	.word	0x080601d8

080a0f38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0f38:	b508      	push	{r3, lr}
 80a0f3a:	4b02      	ldr	r3, [pc, #8]	; (80a0f44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0f3c:	681b      	ldr	r3, [r3, #0]
 80a0f3e:	695b      	ldr	r3, [r3, #20]
 80a0f40:	9301      	str	r3, [sp, #4]
 80a0f42:	bd08      	pop	{r3, pc}
 80a0f44:	080601d8 	.word	0x080601d8

080a0f48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <HAL_USB_USART_Receive_Data+0xc>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	699b      	ldr	r3, [r3, #24]
 80a0f50:	9301      	str	r3, [sp, #4]
 80a0f52:	bd08      	pop	{r3, pc}
 80a0f54:	080601d8 	.word	0x080601d8

080a0f58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f58:	b508      	push	{r3, lr}
 80a0f5a:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <HAL_USB_USART_Send_Data+0xc>)
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	69db      	ldr	r3, [r3, #28]
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	bd08      	pop	{r3, pc}
 80a0f64:	080601d8 	.word	0x080601d8

080a0f68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0f68:	b508      	push	{r3, lr}
 80a0f6a:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <HAL_USB_USART_Flush_Data+0xc>)
 80a0f6c:	681b      	ldr	r3, [r3, #0]
 80a0f6e:	6a1b      	ldr	r3, [r3, #32]
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	bd08      	pop	{r3, pc}
 80a0f74:	080601d8 	.word	0x080601d8

080a0f78 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0f78:	b508      	push	{r3, lr}
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <inet_gethostbyname+0xc>)
 80a0f7c:	681b      	ldr	r3, [r3, #0]
 80a0f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f80:	9301      	str	r3, [sp, #4]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	080601c0 	.word	0x080601c0

080a0f88 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0f88:	b508      	push	{r3, lr}
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <system_mode+0xc>)
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	681b      	ldr	r3, [r3, #0]
 80a0f90:	9301      	str	r3, [sp, #4]
 80a0f92:	bd08      	pop	{r3, pc}
 80a0f94:	080601a4 	.word	0x080601a4

080a0f98 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <set_system_mode+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	685b      	ldr	r3, [r3, #4]
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	080601a4 	.word	0x080601a4

080a0fa8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <system_delay_ms+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	695b      	ldr	r3, [r3, #20]
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	080601a4 	.word	0x080601a4

080a0fb8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <application_thread_current+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601a4 	.word	0x080601a4

080a0fc8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <application_thread_invoke+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601a4 	.word	0x080601a4

080a0fd8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <system_thread_get_state+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601a4 	.word	0x080601a4

080a0fe8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b03      	ldr	r3, [pc, #12]	; (80a0ff8 <system_ctrl_set_app_request_handler+0x10>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ff2:	9301      	str	r3, [sp, #4]
 80a0ff4:	bd08      	pop	{r3, pc}
 80a0ff6:	0000      	.short	0x0000
 80a0ff8:	080601a4 	.word	0x080601a4

080a0ffc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ffc:	b508      	push	{r3, lr}
 80a0ffe:	4b03      	ldr	r3, [pc, #12]	; (80a100c <system_ctrl_set_result+0x10>)
 80a1000:	681b      	ldr	r3, [r3, #0]
 80a1002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1006:	9301      	str	r3, [sp, #4]
 80a1008:	bd08      	pop	{r3, pc}
 80a100a:	0000      	.short	0x0000
 80a100c:	080601a4 	.word	0x080601a4

080a1010 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <spark_process+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	689b      	ldr	r3, [r3, #8]
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601cc 	.word	0x080601cc

080a1020 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <spark_cloud_flag_connected+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	695b      	ldr	r3, [r3, #20]
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601cc 	.word	0x080601cc

080a1030 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <spark_send_event+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	6a1b      	ldr	r3, [r3, #32]
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601cc 	.word	0x080601cc

080a1040 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <spark_sync_time_pending+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601cc 	.word	0x080601cc

080a1050 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601cc 	.word	0x080601cc

080a1060 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <network_connect+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	685b      	ldr	r3, [r3, #4]
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	080601c8 	.word	0x080601c8

080a1070 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <network_connecting+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	689b      	ldr	r3, [r3, #8]
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601c8 	.word	0x080601c8

080a1080 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <network_disconnect+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	68db      	ldr	r3, [r3, #12]
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	080601c8 	.word	0x080601c8

080a1090 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1090:	b508      	push	{r3, lr}
 80a1092:	4b02      	ldr	r3, [pc, #8]	; (80a109c <network_ready+0xc>)
 80a1094:	681b      	ldr	r3, [r3, #0]
 80a1096:	691b      	ldr	r3, [r3, #16]
 80a1098:	9301      	str	r3, [sp, #4]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	080601c8 	.word	0x080601c8

080a10a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10a0:	b508      	push	{r3, lr}
 80a10a2:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <network_on+0xc>)
 80a10a4:	681b      	ldr	r3, [r3, #0]
 80a10a6:	695b      	ldr	r3, [r3, #20]
 80a10a8:	9301      	str	r3, [sp, #4]
 80a10aa:	bd08      	pop	{r3, pc}
 80a10ac:	080601c8 	.word	0x080601c8

080a10b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10b0:	b508      	push	{r3, lr}
 80a10b2:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <network_off+0xc>)
 80a10b4:	681b      	ldr	r3, [r3, #0]
 80a10b6:	699b      	ldr	r3, [r3, #24]
 80a10b8:	9301      	str	r3, [sp, #4]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	080601c8 	.word	0x080601c8

080a10c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a10c0:	b508      	push	{r3, lr}
 80a10c2:	4b02      	ldr	r3, [pc, #8]	; (80a10cc <network_listen+0xc>)
 80a10c4:	681b      	ldr	r3, [r3, #0]
 80a10c6:	69db      	ldr	r3, [r3, #28]
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	bd08      	pop	{r3, pc}
 80a10cc:	080601c8 	.word	0x080601c8

080a10d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <network_listening+0xc>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	6a1b      	ldr	r3, [r3, #32]
 80a10d8:	9301      	str	r3, [sp, #4]
 80a10da:	bd08      	pop	{r3, pc}
 80a10dc:	080601c8 	.word	0x080601c8

080a10e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a10e0:	b508      	push	{r3, lr}
 80a10e2:	4b02      	ldr	r3, [pc, #8]	; (80a10ec <network_set_listen_timeout+0xc>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a10e8:	9301      	str	r3, [sp, #4]
 80a10ea:	bd08      	pop	{r3, pc}
 80a10ec:	080601c8 	.word	0x080601c8

080a10f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a10f0:	b508      	push	{r3, lr}
 80a10f2:	4b02      	ldr	r3, [pc, #8]	; (80a10fc <network_get_listen_timeout+0xc>)
 80a10f4:	681b      	ldr	r3, [r3, #0]
 80a10f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a10f8:	9301      	str	r3, [sp, #4]
 80a10fa:	bd08      	pop	{r3, pc}
 80a10fc:	080601c8 	.word	0x080601c8

080a1100 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1100:	b508      	push	{r3, lr}
 80a1102:	4b02      	ldr	r3, [pc, #8]	; (80a110c <network_is_on+0xc>)
 80a1104:	681b      	ldr	r3, [r3, #0]
 80a1106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1108:	9301      	str	r3, [sp, #4]
 80a110a:	bd08      	pop	{r3, pc}
 80a110c:	080601c8 	.word	0x080601c8

080a1110 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1110:	b508      	push	{r3, lr}
 80a1112:	4b02      	ldr	r3, [pc, #8]	; (80a111c <network_is_off+0xc>)
 80a1114:	681b      	ldr	r3, [r3, #0]
 80a1116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1118:	9301      	str	r3, [sp, #4]
 80a111a:	bd08      	pop	{r3, pc}
 80a111c:	080601c8 	.word	0x080601c8

080a1120 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1120:	b508      	push	{r3, lr}
 80a1122:	4b02      	ldr	r3, [pc, #8]	; (80a112c <malloc+0xc>)
 80a1124:	681b      	ldr	r3, [r3, #0]
 80a1126:	681b      	ldr	r3, [r3, #0]
 80a1128:	9301      	str	r3, [sp, #4]
 80a112a:	bd08      	pop	{r3, pc}
 80a112c:	080601a0 	.word	0x080601a0

080a1130 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1130:	b508      	push	{r3, lr}
 80a1132:	4b02      	ldr	r3, [pc, #8]	; (80a113c <free+0xc>)
 80a1134:	681b      	ldr	r3, [r3, #0]
 80a1136:	685b      	ldr	r3, [r3, #4]
 80a1138:	9301      	str	r3, [sp, #4]
 80a113a:	bd08      	pop	{r3, pc}
 80a113c:	080601a0 	.word	0x080601a0

080a1140 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1140:	b508      	push	{r3, lr}
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <realloc+0xc>)
 80a1144:	681b      	ldr	r3, [r3, #0]
 80a1146:	689b      	ldr	r3, [r3, #8]
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	bd08      	pop	{r3, pc}
 80a114c:	080601a0 	.word	0x080601a0

080a1150 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1150:	b508      	push	{r3, lr}
 80a1152:	4b02      	ldr	r3, [pc, #8]	; (80a115c <siprintf+0xc>)
 80a1154:	681b      	ldr	r3, [r3, #0]
 80a1156:	691b      	ldr	r3, [r3, #16]
 80a1158:	9301      	str	r3, [sp, #4]
 80a115a:	bd08      	pop	{r3, pc}
 80a115c:	080601a0 	.word	0x080601a0

080a1160 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <siscanf+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	699b      	ldr	r3, [r3, #24]
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	080601a0 	.word	0x080601a0

080a1170 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <abort+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	080601a0 	.word	0x080601a0

080a1180 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <_malloc_r+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	080601a0 	.word	0x080601a0

080a1190 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <newlib_impure_ptr_callback+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	080601a0 	.word	0x080601a0

080a11a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a11a0:	2100      	movs	r1, #0
 80a11a2:	f7ff bf01 	b.w	80a0fa8 <system_delay_ms>

080a11a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a11a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a11a8:	6883      	ldr	r3, [r0, #8]
 80a11aa:	4604      	mov	r4, r0
 80a11ac:	b90b      	cbnz	r3, 80a11b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a11ae:	f001 f989 	bl	80a24c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a11b2:	68c3      	ldr	r3, [r0, #12]
 80a11b4:	4798      	blx	r3
      if (_M_manager)
 80a11b6:	68a3      	ldr	r3, [r4, #8]
 80a11b8:	b11b      	cbz	r3, 80a11c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a11ba:	2203      	movs	r2, #3
 80a11bc:	4621      	mov	r1, r4
 80a11be:	4620      	mov	r0, r4
 80a11c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a11c2:	4620      	mov	r0, r4
}
 80a11c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a11c8:	2110      	movs	r1, #16
 80a11ca:	f001 b977 	b.w	80a24bc <_ZdlPvj>

080a11ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a11ce:	4770      	bx	lr

080a11d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a11d0:	2000      	movs	r0, #0
 80a11d2:	4770      	bx	lr

080a11d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	4604      	mov	r4, r0
 80a11d8:	2110      	movs	r1, #16
 80a11da:	f001 f96f 	bl	80a24bc <_ZdlPvj>
 80a11de:	4620      	mov	r0, r4
 80a11e0:	bd10      	pop	{r4, pc}

080a11e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a11e2:	b508      	push	{r3, lr}
      { delete this; }
 80a11e4:	f7ff fff6 	bl	80a11d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a11e8:	bd08      	pop	{r3, pc}

080a11ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a11ea:	b510      	push	{r4, lr}
      if (_M_manager)
 80a11ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a11ee:	4604      	mov	r4, r0
      if (_M_manager)
 80a11f0:	b113      	cbz	r3, 80a11f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a11f2:	2203      	movs	r2, #3
 80a11f4:	4601      	mov	r1, r0
 80a11f6:	4798      	blx	r3
    }
 80a11f8:	4620      	mov	r0, r4
 80a11fa:	bd10      	pop	{r4, pc}

080a11fc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a11fc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a11fe:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1200:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1204:	6002      	str	r2, [r0, #0]
 80a1206:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1208:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a120a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a120c:	680c      	ldr	r4, [r1, #0]
 80a120e:	8085      	strh	r5, [r0, #4]
 80a1210:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1212:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1214:	bd30      	pop	{r4, r5, pc}

080a1216 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1216:	b510      	push	{r4, lr}
 80a1218:	4604      	mov	r4, r0
    free((void*)msg_);
 80a121a:	6800      	ldr	r0, [r0, #0]
 80a121c:	f7ff ff88 	bl	80a1130 <free>
}
 80a1220:	4620      	mov	r0, r4
 80a1222:	bd10      	pop	{r4, pc}

080a1224 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1224:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1226:	68c4      	ldr	r4, [r0, #12]
 80a1228:	b1f4      	cbz	r4, 80a1268 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a122a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a122c:	2b02      	cmp	r3, #2
 80a122e:	d103      	bne.n	80a1238 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1230:	f104 000c 	add.w	r0, r4, #12
 80a1234:	f7ff ffef 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1238:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a123a:	b135      	cbz	r5, 80a124a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a123c:	4628      	mov	r0, r5
 80a123e:	f7ff ffd4 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
 80a1242:	2110      	movs	r1, #16
 80a1244:	4628      	mov	r0, r5
 80a1246:	f001 f939 	bl	80a24bc <_ZdlPvj>
 80a124a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a124c:	b135      	cbz	r5, 80a125c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a124e:	4628      	mov	r0, r5
 80a1250:	f7ff ffcb 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
 80a1254:	2110      	movs	r1, #16
 80a1256:	4628      	mov	r0, r5
 80a1258:	f001 f930 	bl	80a24bc <_ZdlPvj>
 80a125c:	4620      	mov	r0, r4
 80a125e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1262:	2114      	movs	r1, #20
 80a1264:	f001 b92a 	b.w	80a24bc <_ZdlPvj>
 80a1268:	bd38      	pop	{r3, r4, r5, pc}

080a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a126a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a126c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a126e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1270:	b17c      	cbz	r4, 80a1292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1272:	6863      	ldr	r3, [r4, #4]
 80a1274:	3b01      	subs	r3, #1
 80a1276:	6063      	str	r3, [r4, #4]
 80a1278:	b95b      	cbnz	r3, 80a1292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a127a:	6823      	ldr	r3, [r4, #0]
 80a127c:	4620      	mov	r0, r4
 80a127e:	689b      	ldr	r3, [r3, #8]
 80a1280:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1282:	68a3      	ldr	r3, [r4, #8]
 80a1284:	3b01      	subs	r3, #1
 80a1286:	60a3      	str	r3, [r4, #8]
 80a1288:	b91b      	cbnz	r3, 80a1292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a128a:	6823      	ldr	r3, [r4, #0]
 80a128c:	4620      	mov	r0, r4
 80a128e:	68db      	ldr	r3, [r3, #12]
 80a1290:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a1292:	4628      	mov	r0, r5
 80a1294:	bd38      	pop	{r3, r4, r5, pc}

080a1296 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1296:	680b      	ldr	r3, [r1, #0]
 80a1298:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a129a:	b113      	cbz	r3, 80a12a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a129c:	685a      	ldr	r2, [r3, #4]
 80a129e:	3201      	adds	r2, #1
 80a12a0:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a12a2:	4770      	bx	lr

080a12a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a12a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a12a6:	460e      	mov	r6, r1
 80a12a8:	4604      	mov	r4, r0
 80a12aa:	f856 3b04 	ldr.w	r3, [r6], #4
 80a12ae:	460d      	mov	r5, r1
 80a12b0:	a801      	add	r0, sp, #4
 80a12b2:	4631      	mov	r1, r6
 80a12b4:	9300      	str	r3, [sp, #0]
 80a12b6:	f7ff ffee 	bl	80a1296 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12ba:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a12bc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a12be:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a12c0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a12c2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a12c4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a12c6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a12c8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a12ca:	f7ff ffce 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a12ce:	4630      	mov	r0, r6
 80a12d0:	f7ff ffcb 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a12d4:	4628      	mov	r0, r5
 80a12d6:	2108      	movs	r1, #8
 80a12d8:	f001 f8f0 	bl	80a24bc <_ZdlPvj>
        return p;
    }
 80a12dc:	4620      	mov	r0, r4
 80a12de:	b002      	add	sp, #8
 80a12e0:	bd70      	pop	{r4, r5, r6, pc}

080a12e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a12e2:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a12e4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a12e6:	460b      	mov	r3, r1
 80a12e8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a12ea:	c803      	ldmia	r0, {r0, r1}
 80a12ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a12f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a12f4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a12f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a12fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1300:	b002      	add	sp, #8
 80a1302:	bd10      	pop	{r4, pc}

080a1304 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a1304:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1306:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1308:	b90a      	cbnz	r2, 80a130e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a130a:	f001 f8db 	bl	80a24c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a130e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1314:	4718      	bx	r3

080a1316 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1316:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1318:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a131a:	f100 0110 	add.w	r1, r0, #16
 80a131e:	f7ff fff1 	bl	80a1304 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a1322:	bd08      	pop	{r3, pc}

080a1324 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a1324:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1326:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1328:	b90a      	cbnz	r2, 80a132e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a132a:	f001 f8cb 	bl	80a24c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a132e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1334:	4718      	bx	r3

080a1336 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1336:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1338:	6800      	ldr	r0, [r0, #0]
 80a133a:	f100 0110 	add.w	r1, r0, #16
 80a133e:	f7ff fff1 	bl	80a1324 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1342:	bd08      	pop	{r3, pc}

080a1344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1344:	b538      	push	{r3, r4, r5, lr}
 80a1346:	2300      	movs	r3, #0
 80a1348:	4604      	mov	r4, r0
 80a134a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a134c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a134e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1350:	f7fe fea1 	bl	80a0096 <_Znwj>
 80a1354:	b128      	cbz	r0, 80a1362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1356:	2301      	movs	r3, #1
 80a1358:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a135c:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a135e:	60c5      	str	r5, [r0, #12]
 80a1360:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1362:	6020      	str	r0, [r4, #0]
	}
 80a1364:	4620      	mov	r0, r4
 80a1366:	bd38      	pop	{r3, r4, r5, pc}
 80a1368:	080a4114 	.word	0x080a4114

080a136c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a136c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a136e:	2300      	movs	r3, #0
 80a1370:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1372:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1374:	4604      	mov	r4, r0
 80a1376:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1378:	b12b      	cbz	r3, 80a1386 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a137a:	2202      	movs	r2, #2
 80a137c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a137e:	68eb      	ldr	r3, [r5, #12]
 80a1380:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1382:	68ab      	ldr	r3, [r5, #8]
 80a1384:	60a3      	str	r3, [r4, #8]
    }
 80a1386:	4620      	mov	r0, r4
 80a1388:	bd38      	pop	{r3, r4, r5, pc}
	...

080a138c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a138e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1390:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1392:	4668      	mov	r0, sp
 80a1394:	f7ff ff32 	bl	80a11fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1398:	f04f 0302 	mov.w	r3, #2
 80a139c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a13a0:	2a00      	cmp	r2, #0
 80a13a2:	d103      	bne.n	80a13ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a13a4:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a13a8:	2900      	cmp	r1, #0
 80a13aa:	d1f7      	bne.n	80a139c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a13ac:	d125      	bne.n	80a13fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a13ae:	f104 050c 	add.w	r5, r4, #12
 80a13b2:	4669      	mov	r1, sp
 80a13b4:	4628      	mov	r0, r5
 80a13b6:	f7ff ff21 	bl	80a11fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a13ba:	2301      	movs	r3, #1
 80a13bc:	f3bf 8f5b 	dmb	ish
 80a13c0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a13c2:	2000      	movs	r0, #0
 80a13c4:	f3bf 8f5b 	dmb	ish
 80a13c8:	f104 0308 	add.w	r3, r4, #8
 80a13cc:	e853 6f00 	ldrex	r6, [r3]
 80a13d0:	e843 0200 	strex	r2, r0, [r3]
 80a13d4:	2a00      	cmp	r2, #0
 80a13d6:	d1f9      	bne.n	80a13cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a13d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a13dc:	b16e      	cbz	r6, 80a13fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a13de:	f7ff fdeb 	bl	80a0fb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a13e2:	b178      	cbz	r0, 80a1404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a13e4:	4629      	mov	r1, r5
 80a13e6:	4630      	mov	r0, r6
 80a13e8:	f7ff ff8c 	bl	80a1304 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a13ec:	4630      	mov	r0, r6
 80a13ee:	f7ff fefc 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a13f2:	2110      	movs	r1, #16
 80a13f4:	4630      	mov	r0, r6
 80a13f6:	f001 f861 	bl	80a24bc <_ZdlPvj>
        p_->setError(std::move(error));
 80a13fa:	4668      	mov	r0, sp
 80a13fc:	f7ff ff0b 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
    }
 80a1400:	b009      	add	sp, #36	; 0x24
 80a1402:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1404:	4631      	mov	r1, r6
 80a1406:	a802      	add	r0, sp, #8
 80a1408:	f7ff ffb0 	bl	80a136c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a140c:	68e0      	ldr	r0, [r4, #12]
 80a140e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1412:	b108      	cbz	r0, 80a1418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a1414:	f002 f928 	bl	80a3668 <strdup>
        type_(type) {
 80a1418:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a141a:	2010      	movs	r0, #16
 80a141c:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1420:	f7fe fe39 	bl	80a0096 <_Znwj>
 80a1424:	4605      	mov	r5, r0
 80a1426:	b1e8      	cbz	r0, 80a1464 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a1428:	2700      	movs	r7, #0
 80a142a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a142c:	2018      	movs	r0, #24
 80a142e:	f7fe fe32 	bl	80a0096 <_Znwj>
 80a1432:	4604      	mov	r4, r0
 80a1434:	b188      	cbz	r0, 80a145a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a1436:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1438:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a143a:	a802      	add	r0, sp, #8
 80a143c:	f7ff ff51 	bl	80a12e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1440:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1442:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1444:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1446:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1448:	9204      	str	r2, [sp, #16]
 80a144a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a144c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a144e:	60e3      	str	r3, [r4, #12]
 80a1450:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1454:	9205      	str	r2, [sp, #20]
 80a1456:	f7ff fed1 	bl	80a11fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a145a:	4b08      	ldr	r3, [pc, #32]	; (80a147c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a145c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a145e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1460:	4b07      	ldr	r3, [pc, #28]	; (80a1480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1462:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1464:	a806      	add	r0, sp, #24
 80a1466:	f7ff fed6 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a146a:	a802      	add	r0, sp, #8
 80a146c:	f7ff febd 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1470:	2200      	movs	r2, #0
 80a1472:	4629      	mov	r1, r5
 80a1474:	4803      	ldr	r0, [pc, #12]	; (80a1484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a1476:	f7ff fda7 	bl	80a0fc8 <application_thread_invoke>
 80a147a:	e7b7      	b.n	80a13ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a147c:	080a1317 	.word	0x080a1317
 80a1480:	080a15ad 	.word	0x080a15ad
 80a1484:	080a11a7 	.word	0x080a11a7

080a1488 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a148c:	b08a      	sub	sp, #40	; 0x28
 80a148e:	4605      	mov	r5, r0
 80a1490:	460c      	mov	r4, r1
 80a1492:	4617      	mov	r7, r2
 80a1494:	4698      	mov	r8, r3
 80a1496:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a149a:	f7ff fdc1 	bl	80a1020 <spark_cloud_flag_connected>
 80a149e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a14a0:	4682      	mov	sl, r0
 80a14a2:	bb38      	cbnz	r0, 80a14f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a14a4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a14a8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a14aa:	a905      	add	r1, sp, #20
 80a14ac:	4630      	mov	r0, r6
 80a14ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a14b2:	f7ff fea3 	bl	80a11fc <_ZN8particle5ErrorC1EOS0_>
 80a14b6:	2014      	movs	r0, #20
 80a14b8:	f7fe fded 	bl	80a0096 <_Znwj>
 80a14bc:	4604      	mov	r4, r0
 80a14be:	b148      	cbz	r0, 80a14d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a14c0:	2302      	movs	r3, #2
 80a14c2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14c4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a14c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a14ca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a14cc:	4631      	mov	r1, r6
 80a14ce:	300c      	adds	r0, #12
 80a14d0:	f7ff fe94 	bl	80a11fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a14d4:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a14d6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a14d8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a14dc:	f7ff ff32 	bl	80a1344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a14e0:	4630      	mov	r0, r6
 80a14e2:	f7ff fe98 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a14e6:	a805      	add	r0, sp, #20
 80a14e8:	f7ff fe95 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a14ec:	4628      	mov	r0, r5
 80a14ee:	b00a      	add	sp, #40	; 0x28
 80a14f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a14f4:	230c      	movs	r3, #12
 80a14f6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a14fa:	2014      	movs	r0, #20
 80a14fc:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a1500:	9307      	str	r3, [sp, #28]
 80a1502:	f7fe fdc8 	bl	80a0096 <_Znwj>
 80a1506:	4601      	mov	r1, r0
 80a1508:	b128      	cbz	r0, 80a1516 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a150a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a150e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1512:	f880 a001 	strb.w	sl, [r0, #1]
 80a1516:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1518:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a151a:	f7ff ff13 	bl	80a1344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a151e:	4b22      	ldr	r3, [pc, #136]	; (80a15a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1520:	2008      	movs	r0, #8
 80a1522:	9308      	str	r3, [sp, #32]
 80a1524:	f7fe fdb7 	bl	80a0096 <_Znwj>
 80a1528:	4682      	mov	sl, r0
 80a152a:	b128      	cbz	r0, 80a1538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a152c:	9b03      	ldr	r3, [sp, #12]
 80a152e:	a904      	add	r1, sp, #16
 80a1530:	f840 3b04 	str.w	r3, [r0], #4
 80a1534:	f7ff feaf 	bl	80a1296 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1538:	4642      	mov	r2, r8
 80a153a:	4639      	mov	r1, r7
 80a153c:	4620      	mov	r0, r4
 80a153e:	9600      	str	r6, [sp, #0]
 80a1540:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1544:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1548:	f7ff fd72 	bl	80a1030 <spark_send_event>
 80a154c:	b9b8      	cbnz	r0, 80a157e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a154e:	9b03      	ldr	r3, [sp, #12]
 80a1550:	785b      	ldrb	r3, [r3, #1]
 80a1552:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1556:	b993      	cbnz	r3, 80a157e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1558:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a155c:	a905      	add	r1, sp, #20
 80a155e:	a803      	add	r0, sp, #12
 80a1560:	9205      	str	r2, [sp, #20]
 80a1562:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1566:	f7ff ff11 	bl	80a138c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a156a:	a805      	add	r0, sp, #20
 80a156c:	f7ff fe53 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1570:	a805      	add	r0, sp, #20
 80a1572:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1574:	f7ff fe96 	bl	80a12a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1578:	a806      	add	r0, sp, #24
 80a157a:	f7ff fe76 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a157e:	9b03      	ldr	r3, [sp, #12]
 80a1580:	a904      	add	r1, sp, #16
 80a1582:	a806      	add	r0, sp, #24
 80a1584:	9305      	str	r3, [sp, #20]
 80a1586:	f7ff fe86 	bl	80a1296 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a158a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a158c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a158e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1590:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1592:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1594:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1596:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1598:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a159a:	f7ff fe66 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a159e:	a804      	add	r0, sp, #16
 80a15a0:	f7ff fe63 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a15a4:	e7a2      	b.n	80a14ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a15a6:	bf00      	nop
 80a15a8:	080a1671 	.word	0x080a1671

080a15ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a15ac:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a15ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15b0:	4605      	mov	r5, r0
	  switch (__op)
 80a15b2:	d007      	beq.n	80a15c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a15b4:	2a03      	cmp	r2, #3
 80a15b6:	d018      	beq.n	80a15ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a15b8:	2a01      	cmp	r2, #1
 80a15ba:	d101      	bne.n	80a15c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a15bc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a15be:	6003      	str	r3, [r0, #0]
	}
 80a15c0:	2000      	movs	r0, #0
 80a15c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15c4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a15c6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a15c8:	f7fe fd65 	bl	80a0096 <_Znwj>
 80a15cc:	4604      	mov	r4, r0
 80a15ce:	b150      	cbz	r0, 80a15e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a15d0:	4631      	mov	r1, r6
 80a15d2:	f7ff fecb 	bl	80a136c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a15d6:	6930      	ldr	r0, [r6, #16]
 80a15d8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a15dc:	b108      	cbz	r0, 80a15e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a15de:	f002 f843 	bl	80a3668 <strdup>
        type_(type) {
 80a15e2:	6120      	str	r0, [r4, #16]
 80a15e4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a15e6:	602c      	str	r4, [r5, #0]
	}
 80a15e8:	e7ea      	b.n	80a15c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a15ea:	6804      	ldr	r4, [r0, #0]
 80a15ec:	2c00      	cmp	r4, #0
 80a15ee:	d0e7      	beq.n	80a15c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a15f0:	f104 0010 	add.w	r0, r4, #16
 80a15f4:	f7ff fe0f 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a15f8:	4620      	mov	r0, r4
 80a15fa:	f7ff fdf6 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a15fe:	2118      	movs	r1, #24
 80a1600:	4620      	mov	r0, r4
 80a1602:	f000 ff5b 	bl	80a24bc <_ZdlPvj>
 80a1606:	e7db      	b.n	80a15c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a1608 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1608:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a160a:	2300      	movs	r3, #0
 80a160c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a160e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1610:	4604      	mov	r4, r0
 80a1612:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1614:	b12b      	cbz	r3, 80a1622 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1616:	2202      	movs	r2, #2
 80a1618:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a161a:	68eb      	ldr	r3, [r5, #12]
 80a161c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a161e:	68ab      	ldr	r3, [r5, #8]
 80a1620:	60a3      	str	r3, [r4, #8]
    }
 80a1622:	4620      	mov	r0, r4
 80a1624:	bd38      	pop	{r3, r4, r5, pc}

080a1626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a1626:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1628:	b570      	push	{r4, r5, r6, lr}
 80a162a:	4604      	mov	r4, r0
	  switch (__op)
 80a162c:	d007      	beq.n	80a163e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a162e:	2a03      	cmp	r2, #3
 80a1630:	d012      	beq.n	80a1658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a1632:	2a01      	cmp	r2, #1
 80a1634:	d101      	bne.n	80a163a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1636:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1638:	6003      	str	r3, [r0, #0]
	}
 80a163a:	2000      	movs	r0, #0
 80a163c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a163e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1640:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1642:	f7fe fd28 	bl	80a0096 <_Znwj>
 80a1646:	4605      	mov	r5, r0
 80a1648:	b120      	cbz	r0, 80a1654 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a164a:	4631      	mov	r1, r6
 80a164c:	f7ff ffdc 	bl	80a1608 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1650:	7c33      	ldrb	r3, [r6, #16]
 80a1652:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1654:	6025      	str	r5, [r4, #0]
	}
 80a1656:	e7f0      	b.n	80a163a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1658:	6804      	ldr	r4, [r0, #0]
 80a165a:	2c00      	cmp	r4, #0
 80a165c:	d0ed      	beq.n	80a163a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a165e:	4620      	mov	r0, r4
 80a1660:	f7ff fdc3 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1664:	2114      	movs	r1, #20
 80a1666:	4620      	mov	r0, r4
 80a1668:	f000 ff28 	bl	80a24bc <_ZdlPvj>
 80a166c:	e7e5      	b.n	80a163a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1670:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1672:	4604      	mov	r4, r0
 80a1674:	b089      	sub	sp, #36	; 0x24
 80a1676:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1678:	a801      	add	r0, sp, #4
 80a167a:	4611      	mov	r1, r2
 80a167c:	f7ff fe12 	bl	80a12a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1680:	b1a4      	cbz	r4, 80a16ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1682:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1684:	b11d      	cbz	r5, 80a168e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1686:	4628      	mov	r0, r5
 80a1688:	f001 ffee 	bl	80a3668 <strdup>
 80a168c:	4605      	mov	r5, r0
 80a168e:	a801      	add	r0, sp, #4
 80a1690:	a903      	add	r1, sp, #12
        type_(type) {
 80a1692:	9503      	str	r5, [sp, #12]
 80a1694:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1698:	f7ff fe78 	bl	80a138c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a169c:	a803      	add	r0, sp, #12
 80a169e:	f7ff fdba 	bl	80a1216 <_ZN8particle5ErrorD1Ev>
 80a16a2:	a802      	add	r0, sp, #8
 80a16a4:	f7ff fde1 	bl	80a126a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a16a8:	b009      	add	sp, #36	; 0x24
 80a16aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a16ac:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a16ae:	9d01      	ldr	r5, [sp, #4]
 80a16b0:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a16b4:	2a00      	cmp	r2, #0
 80a16b6:	d103      	bne.n	80a16c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a16b8:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a16bc:	2900      	cmp	r1, #0
 80a16be:	d1f7      	bne.n	80a16b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a16c0:	d1ef      	bne.n	80a16a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a16c2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a16c4:	f3bf 8f5b 	dmb	ish
 80a16c8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a16ca:	f3bf 8f5b 	dmb	ish
 80a16ce:	1d2b      	adds	r3, r5, #4
 80a16d0:	e853 6f00 	ldrex	r6, [r3]
 80a16d4:	e843 4200 	strex	r2, r4, [r3]
 80a16d8:	2a00      	cmp	r2, #0
 80a16da:	d1f9      	bne.n	80a16d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a16dc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a16e0:	2e00      	cmp	r6, #0
 80a16e2:	d0de      	beq.n	80a16a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a16e4:	4620      	mov	r0, r4
 80a16e6:	f7ff fc67 	bl	80a0fb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a16ea:	4607      	mov	r7, r0
 80a16ec:	b160      	cbz	r0, 80a1708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a16ee:	4630      	mov	r0, r6
 80a16f0:	f105 010c 	add.w	r1, r5, #12
 80a16f4:	f7ff fe16 	bl	80a1324 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a16f8:	4630      	mov	r0, r6
 80a16fa:	f7ff fd76 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a16fe:	2110      	movs	r1, #16
 80a1700:	4630      	mov	r0, r6
 80a1702:	f000 fedb 	bl	80a24bc <_ZdlPvj>
 80a1706:	e7cc      	b.n	80a16a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1708:	4631      	mov	r1, r6
 80a170a:	a803      	add	r0, sp, #12
 80a170c:	f7ff ff7c 	bl	80a1608 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1710:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1712:	2010      	movs	r0, #16
 80a1714:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1718:	f7fe fcbd 	bl	80a0096 <_Znwj>
 80a171c:	4605      	mov	r5, r0
 80a171e:	b1d0      	cbz	r0, 80a1756 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1720:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1722:	2014      	movs	r0, #20
 80a1724:	f7fe fcb7 	bl	80a0096 <_Znwj>
 80a1728:	4604      	mov	r4, r0
 80a172a:	b178      	cbz	r0, 80a174c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a172c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a172e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1730:	a803      	add	r0, sp, #12
 80a1732:	f7ff fdd6 	bl	80a12e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1736:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1738:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a173a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a173c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a173e:	9205      	str	r2, [sp, #20]
 80a1740:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1742:	60e3      	str	r3, [r4, #12]
 80a1744:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1748:	9206      	str	r2, [sp, #24]
 80a174a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a174c:	4b06      	ldr	r3, [pc, #24]	; (80a1768 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a174e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1750:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1752:	4b06      	ldr	r3, [pc, #24]	; (80a176c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1754:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1756:	a803      	add	r0, sp, #12
 80a1758:	f7ff fd47 	bl	80a11ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a175c:	2200      	movs	r2, #0
 80a175e:	4629      	mov	r1, r5
 80a1760:	4803      	ldr	r0, [pc, #12]	; (80a1770 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1762:	f7ff fc31 	bl	80a0fc8 <application_thread_invoke>
 80a1766:	e7c7      	b.n	80a16f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1768:	080a1337 	.word	0x080a1337
 80a176c:	080a1627 	.word	0x080a1627
 80a1770:	080a11a7 	.word	0x080a11a7

080a1774 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1774:	4770      	bx	lr

080a1776 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1778:	4606      	mov	r6, r0
 80a177a:	4615      	mov	r5, r2
 80a177c:	460c      	mov	r4, r1
 80a177e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1780:	42bc      	cmp	r4, r7
 80a1782:	d006      	beq.n	80a1792 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1784:	6833      	ldr	r3, [r6, #0]
 80a1786:	4630      	mov	r0, r6
 80a1788:	689b      	ldr	r3, [r3, #8]
 80a178a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a178e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1790:	e7f6      	b.n	80a1780 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1792:	4628      	mov	r0, r5
 80a1794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1796 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1796:	2200      	movs	r2, #0
 80a1798:	7c00      	ldrb	r0, [r0, #16]
 80a179a:	f7ff bb21 	b.w	80a0de0 <hal_i2c_write>

080a179e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a179e:	2100      	movs	r1, #0
 80a17a0:	7c00      	ldrb	r0, [r0, #16]
 80a17a2:	f7ff bb25 	b.w	80a0df0 <hal_i2c_available>

080a17a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a17a6:	2100      	movs	r1, #0
 80a17a8:	7c00      	ldrb	r0, [r0, #16]
 80a17aa:	f7ff bb29 	b.w	80a0e00 <hal_i2c_read>

080a17ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a17ae:	2100      	movs	r1, #0
 80a17b0:	7c00      	ldrb	r0, [r0, #16]
 80a17b2:	f7ff bb2d 	b.w	80a0e10 <hal_i2c_peek>

080a17b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a17b6:	2100      	movs	r1, #0
 80a17b8:	7c00      	ldrb	r0, [r0, #16]
 80a17ba:	f7ff bb31 	b.w	80a0e20 <hal_i2c_flush>

080a17be <_ZN7TwoWireD0Ev>:
 80a17be:	b510      	push	{r4, lr}
 80a17c0:	4604      	mov	r4, r0
 80a17c2:	2114      	movs	r1, #20
 80a17c4:	f000 fe7a 	bl	80a24bc <_ZdlPvj>
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	bd10      	pop	{r4, pc}

080a17cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a17cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a17ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a17d2:	4604      	mov	r4, r0
 80a17d4:	4608      	mov	r0, r1
 80a17d6:	2100      	movs	r1, #0
 80a17d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a17dc:	4b03      	ldr	r3, [pc, #12]	; (80a17ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a17de:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a17e0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a17e2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a17e4:	f7ff fb2c 	bl	80a0e40 <hal_i2c_init>
}
 80a17e8:	4620      	mov	r0, r4
 80a17ea:	bd10      	pop	{r4, pc}
 80a17ec:	080a4130 	.word	0x080a4130

080a17f0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a17f0:	2200      	movs	r2, #0
 80a17f2:	7c00      	ldrb	r0, [r0, #16]
 80a17f4:	f7ff bad4 	b.w	80a0da0 <hal_i2c_set_speed>

080a17f8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a17f8:	2300      	movs	r3, #0
 80a17fa:	7c00      	ldrb	r0, [r0, #16]
 80a17fc:	461a      	mov	r2, r3
 80a17fe:	4619      	mov	r1, r3
 80a1800:	f7ff bad6 	b.w	80a0db0 <hal_i2c_begin>

080a1804 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a1806:	2200      	movs	r2, #0
 80a1808:	2314      	movs	r3, #20
 80a180a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a180e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a1812:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1814:	7c00      	ldrb	r0, [r0, #16]
 80a1816:	f88d 3008 	strb.w	r3, [sp, #8]
 80a181a:	684b      	ldr	r3, [r1, #4]
 80a181c:	9303      	str	r3, [sp, #12]
 80a181e:	68cb      	ldr	r3, [r1, #12]
 80a1820:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a1822:	7a0b      	ldrb	r3, [r1, #8]
 80a1824:	a901      	add	r1, sp, #4
 80a1826:	9305      	str	r3, [sp, #20]
 80a1828:	f7ff fb14 	bl	80a0e54 <hal_i2c_request_ex>
}
 80a182c:	b007      	add	sp, #28
 80a182e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1832 <_ZN7TwoWire11requestFromEhjh>:
{
 80a1832:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1834:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1836:	f88d 1000 	strb.w	r1, [sp]
 80a183a:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a183e:	bf18      	it	ne
 80a1840:	2301      	movne	r3, #1
 80a1842:	9103      	str	r1, [sp, #12]
 80a1844:	4669      	mov	r1, sp
    size_ = size;
 80a1846:	9201      	str	r2, [sp, #4]
 80a1848:	f88d 3008 	strb.w	r3, [sp, #8]
 80a184c:	f7ff ffda 	bl	80a1804 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1850:	b005      	add	sp, #20
 80a1852:	f85d fb04 	ldr.w	pc, [sp], #4

080a1856 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a1856:	2301      	movs	r3, #1
 80a1858:	f7ff bfeb 	b.w	80a1832 <_ZN7TwoWire11requestFromEhjh>

080a185c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a185c:	2200      	movs	r2, #0
 80a185e:	7c00      	ldrb	r0, [r0, #16]
 80a1860:	f7ff baae 	b.w	80a0dc0 <hal_i2c_begin_transmission>

080a1864 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a1864:	b2c9      	uxtb	r1, r1
 80a1866:	f7ff bff9 	b.w	80a185c <_ZN7TwoWire17beginTransmissionEh>

080a186a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a186a:	2200      	movs	r2, #0
 80a186c:	7c00      	ldrb	r0, [r0, #16]
 80a186e:	f7ff baaf 	b.w	80a0dd0 <hal_i2c_end_transmission>

080a1872 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1872:	2101      	movs	r1, #1
 80a1874:	f7ff bff9 	b.w	80a186a <_ZN7TwoWire15endTransmissionEh>

080a1878 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1878:	4770      	bx	lr

080a187a <_ZN9IPAddressD0Ev>:
 80a187a:	b510      	push	{r4, lr}
 80a187c:	4604      	mov	r4, r0
 80a187e:	2118      	movs	r1, #24
 80a1880:	f000 fe1c 	bl	80a24bc <_ZdlPvj>
 80a1884:	4620      	mov	r0, r4
 80a1886:	bd10      	pop	{r4, pc}

080a1888 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a188a:	460e      	mov	r6, r1
 80a188c:	2400      	movs	r4, #0
 80a188e:	f100 0708 	add.w	r7, r0, #8
 80a1892:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1894:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1898:	220a      	movs	r2, #10
 80a189a:	4630      	mov	r0, r6
 80a189c:	f000 f907 	bl	80a1aae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a18a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a18a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a18a4:	d101      	bne.n	80a18aa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a18a6:	4620      	mov	r0, r4
 80a18a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a18aa:	2c00      	cmp	r4, #0
 80a18ac:	d0f2      	beq.n	80a1894 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a18ae:	212e      	movs	r1, #46	; 0x2e
 80a18b0:	4630      	mov	r0, r6
 80a18b2:	f000 f8e1 	bl	80a1a78 <_ZN5Print5printEc>
 80a18b6:	4404      	add	r4, r0
 80a18b8:	e7ec      	b.n	80a1894 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a18bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a18bc:	b510      	push	{r4, lr}
 80a18be:	4604      	mov	r4, r0
 80a18c0:	4b04      	ldr	r3, [pc, #16]	; (80a18d4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a18c2:	2211      	movs	r2, #17
 80a18c4:	2100      	movs	r1, #0
 80a18c6:	f840 3b04 	str.w	r3, [r0], #4
 80a18ca:	f001 fe8f 	bl	80a35ec <memset>
}
 80a18ce:	4620      	mov	r0, r4
 80a18d0:	bd10      	pop	{r4, pc}
 80a18d2:	bf00      	nop
 80a18d4:	080a4158 	.word	0x080a4158

080a18d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a18d8:	4603      	mov	r3, r0
 80a18da:	4a07      	ldr	r2, [pc, #28]	; (80a18f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a18dc:	b510      	push	{r4, lr}
 80a18de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a18e2:	f101 0210 	add.w	r2, r1, #16
 80a18e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a18ea:	4291      	cmp	r1, r2
 80a18ec:	f843 4b04 	str.w	r4, [r3], #4
 80a18f0:	d1f9      	bne.n	80a18e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a18f2:	780a      	ldrb	r2, [r1, #0]
 80a18f4:	701a      	strb	r2, [r3, #0]
}
 80a18f6:	bd10      	pop	{r4, pc}
 80a18f8:	080a4158 	.word	0x080a4158

080a18fc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a18fc:	4a02      	ldr	r2, [pc, #8]	; (80a1908 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a18fe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1902:	2204      	movs	r2, #4
 80a1904:	7502      	strb	r2, [r0, #20]
}
 80a1906:	4770      	bx	lr
 80a1908:	080a4158 	.word	0x080a4158

080a190c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a190c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a190e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1912:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1916:	2304      	movs	r3, #4
 80a1918:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a191c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1920:	6044      	str	r4, [r0, #4]
 80a1922:	7503      	strb	r3, [r0, #20]
}
 80a1924:	bd10      	pop	{r4, pc}
	...

080a1928 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a192a:	4d04      	ldr	r5, [pc, #16]	; (80a193c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a192c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a192e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1932:	9500      	str	r5, [sp, #0]
 80a1934:	f7ff ffea 	bl	80a190c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1938:	b003      	add	sp, #12
 80a193a:	bd30      	pop	{r4, r5, pc}
 80a193c:	080a4158 	.word	0x080a4158

080a1940 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1940:	4b01      	ldr	r3, [pc, #4]	; (80a1948 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1942:	4a02      	ldr	r2, [pc, #8]	; (80a194c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1944:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1946:	4770      	bx	lr
 80a1948:	20000780 	.word	0x20000780
 80a194c:	080a4164 	.word	0x080a4164

080a1950 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1950:	2300      	movs	r3, #0
 80a1952:	6840      	ldr	r0, [r0, #4]
 80a1954:	461a      	mov	r2, r3
 80a1956:	f7ff bb83 	b.w	80a1060 <network_connect>

080a195a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a195a:	2200      	movs	r2, #0
 80a195c:	2102      	movs	r1, #2
 80a195e:	6840      	ldr	r0, [r0, #4]
 80a1960:	f7ff bb8e 	b.w	80a1080 <network_disconnect>

080a1964 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1964:	2200      	movs	r2, #0
 80a1966:	6840      	ldr	r0, [r0, #4]
 80a1968:	4611      	mov	r1, r2
 80a196a:	f7ff bb81 	b.w	80a1070 <network_connecting>

080a196e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a196e:	2200      	movs	r2, #0
 80a1970:	6840      	ldr	r0, [r0, #4]
 80a1972:	4611      	mov	r1, r2
 80a1974:	f7ff bb8c 	b.w	80a1090 <network_ready>

080a1978 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1978:	2300      	movs	r3, #0
 80a197a:	6840      	ldr	r0, [r0, #4]
 80a197c:	461a      	mov	r2, r3
 80a197e:	4619      	mov	r1, r3
 80a1980:	f7ff bb8e 	b.w	80a10a0 <network_on>

080a1984 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1984:	2300      	movs	r3, #0
 80a1986:	6840      	ldr	r0, [r0, #4]
 80a1988:	461a      	mov	r2, r3
 80a198a:	4619      	mov	r1, r3
 80a198c:	f7ff bb90 	b.w	80a10b0 <network_off>

080a1990 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1990:	2100      	movs	r1, #0
 80a1992:	6840      	ldr	r0, [r0, #4]
 80a1994:	f7ff bbb4 	b.w	80a1100 <network_is_on>

080a1998 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1998:	2100      	movs	r1, #0
 80a199a:	6840      	ldr	r0, [r0, #4]
 80a199c:	f7ff bbb8 	b.w	80a1110 <network_is_off>

080a19a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a19a0:	2200      	movs	r2, #0
 80a19a2:	6840      	ldr	r0, [r0, #4]
 80a19a4:	f081 0101 	eor.w	r1, r1, #1
 80a19a8:	f7ff bb8a 	b.w	80a10c0 <network_listen>

080a19ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a19ac:	2200      	movs	r2, #0
 80a19ae:	6840      	ldr	r0, [r0, #4]
 80a19b0:	f7ff bb96 	b.w	80a10e0 <network_set_listen_timeout>

080a19b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a19b4:	2200      	movs	r2, #0
 80a19b6:	6840      	ldr	r0, [r0, #4]
 80a19b8:	4611      	mov	r1, r2
 80a19ba:	f7ff bb99 	b.w	80a10f0 <network_get_listen_timeout>

080a19be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a19be:	2200      	movs	r2, #0
 80a19c0:	6840      	ldr	r0, [r0, #4]
 80a19c2:	4611      	mov	r1, r2
 80a19c4:	f7ff bb84 	b.w	80a10d0 <network_listening>

080a19c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a19c8:	b570      	push	{r4, r5, r6, lr}
 80a19ca:	4615      	mov	r5, r2
 80a19cc:	b08e      	sub	sp, #56	; 0x38
 80a19ce:	4604      	mov	r4, r0
    IPAddress addr;
 80a19d0:	a808      	add	r0, sp, #32
 80a19d2:	f7ff ff73 	bl	80a18bc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a19d6:	2211      	movs	r2, #17
 80a19d8:	2100      	movs	r1, #0
 80a19da:	a803      	add	r0, sp, #12
 80a19dc:	f001 fe06 	bl	80a35ec <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a19e0:	2600      	movs	r6, #0
 80a19e2:	4628      	mov	r0, r5
 80a19e4:	f001 fe5b 	bl	80a369e <strlen>
 80a19e8:	4b0a      	ldr	r3, [pc, #40]	; (80a1a14 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a19ea:	9600      	str	r6, [sp, #0]
 80a19ec:	b281      	uxth	r1, r0
 80a19ee:	685b      	ldr	r3, [r3, #4]
 80a19f0:	4628      	mov	r0, r5
 80a19f2:	aa03      	add	r2, sp, #12
 80a19f4:	f7ff fac0 	bl	80a0f78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a19f8:	b130      	cbz	r0, 80a1a08 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a19fa:	4631      	mov	r1, r6
 80a19fc:	4620      	mov	r0, r4
 80a19fe:	f7ff ff7d 	bl	80a18fc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	b00e      	add	sp, #56	; 0x38
 80a1a06:	bd70      	pop	{r4, r5, r6, pc}
 80a1a08:	4620      	mov	r0, r4
 80a1a0a:	a903      	add	r1, sp, #12
 80a1a0c:	f7ff ff64 	bl	80a18d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1a10:	e7f7      	b.n	80a1a02 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1a12:	bf00      	nop
 80a1a14:	20000c14 	.word	0x20000c14

080a1a18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a18:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1a1a:	4a03      	ldr	r2, [pc, #12]	; (80a1a28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1a1c:	601a      	str	r2, [r3, #0]
 80a1a1e:	2200      	movs	r2, #0
 80a1a20:	605a      	str	r2, [r3, #4]

} // spark
 80a1a22:	4770      	bx	lr
 80a1a24:	20000784 	.word	0x20000784
 80a1a28:	080a4170 	.word	0x080a4170

080a1a2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a2e:	4606      	mov	r6, r0
 80a1a30:	460d      	mov	r5, r1
  size_t n = 0;
 80a1a32:	2400      	movs	r4, #0
 80a1a34:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1a36:	42bd      	cmp	r5, r7
 80a1a38:	d00c      	beq.n	80a1a54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a3a:	6833      	ldr	r3, [r6, #0]
 80a1a3c:	4630      	mov	r0, r6
 80a1a3e:	689b      	ldr	r3, [r3, #8]
 80a1a40:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1a44:	4798      	blx	r3
     if (chunk>=0)
 80a1a46:	1e03      	subs	r3, r0, #0
 80a1a48:	db01      	blt.n	80a1a4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1a4a:	441c      	add	r4, r3
  while (size--) {
 80a1a4c:	e7f3      	b.n	80a1a36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1a4e:	2c00      	cmp	r4, #0
 80a1a50:	bf08      	it	eq
 80a1a52:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1a54:	4620      	mov	r0, r4
 80a1a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a58 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1a58:	b570      	push	{r4, r5, r6, lr}
 80a1a5a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a5c:	460c      	mov	r4, r1
    }
 80a1a5e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1a60:	b149      	cbz	r1, 80a1a76 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a62:	f001 fe1c 	bl	80a369e <strlen>
 80a1a66:	682b      	ldr	r3, [r5, #0]
 80a1a68:	4602      	mov	r2, r0
 80a1a6a:	4621      	mov	r1, r4
 80a1a6c:	4628      	mov	r0, r5
    }
 80a1a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1a72:	68db      	ldr	r3, [r3, #12]
 80a1a74:	4718      	bx	r3
    }
 80a1a76:	bd70      	pop	{r4, r5, r6, pc}

080a1a78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a78:	6803      	ldr	r3, [r0, #0]
 80a1a7a:	689b      	ldr	r3, [r3, #8]
 80a1a7c:	4718      	bx	r3

080a1a7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1a7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1a80:	210d      	movs	r1, #13
{
 80a1a82:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1a84:	f7ff fff8 	bl	80a1a78 <_ZN5Print5printEc>
  n += print('\n');
 80a1a88:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1a8a:	4604      	mov	r4, r0
  n += print('\n');
 80a1a8c:	4628      	mov	r0, r5
 80a1a8e:	f7ff fff3 	bl	80a1a78 <_ZN5Print5printEc>
  return n;
}
 80a1a92:	4420      	add	r0, r4
 80a1a94:	bd38      	pop	{r3, r4, r5, pc}

080a1a96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1a96:	b538      	push	{r3, r4, r5, lr}
 80a1a98:	4605      	mov	r5, r0
  return write(str);
 80a1a9a:	f7ff ffdd 	bl	80a1a58 <_ZN5Print5writeEPKc>
 80a1a9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1aa0:	4628      	mov	r0, r5
 80a1aa2:	f7ff ffec 	bl	80a1a7e <_ZN5Print7printlnEv>
  return n;
}
 80a1aa6:	4420      	add	r0, r4
 80a1aa8:	bd38      	pop	{r3, r4, r5, pc}

080a1aaa <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a1aaa:	f7ff bff4 	b.w	80a1a96 <_ZN5Print7printlnEPKc>

080a1aae <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1aae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1ab0:	2a01      	cmp	r2, #1
 80a1ab2:	bf98      	it	ls
 80a1ab4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ab6:	b530      	push	{r4, r5, lr}
 80a1ab8:	b08b      	sub	sp, #44	; 0x2c
 80a1aba:	460c      	mov	r4, r1
  *str = '\0';
 80a1abc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1ac0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1ac2:	4625      	mov	r5, r4
 80a1ac4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1ac8:	fb04 5312 	mls	r3, r4, r2, r5
 80a1acc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1ace:	2b09      	cmp	r3, #9
 80a1ad0:	bf94      	ite	ls
 80a1ad2:	3330      	addls	r3, #48	; 0x30
 80a1ad4:	3337      	addhi	r3, #55	; 0x37
 80a1ad6:	b2db      	uxtb	r3, r3
  } while(n);
 80a1ad8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1ada:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1ade:	d9f0      	bls.n	80a1ac2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1ae0:	f7ff ffba 	bl	80a1a58 <_ZN5Print5writeEPKc>
}
 80a1ae4:	b00b      	add	sp, #44	; 0x2c
 80a1ae6:	bd30      	pop	{r4, r5, pc}

080a1ae8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1ae8:	2200      	movs	r2, #0
 80a1aea:	4b01      	ldr	r3, [pc, #4]	; (80a1af0 <_GLOBAL__sub_I_RGB+0x8>)
 80a1aec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1aee:	4770      	bx	lr
 80a1af0:	2000078c 	.word	0x2000078c

080a1af4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1af4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1af6:	2600      	movs	r6, #0
 80a1af8:	4604      	mov	r4, r0
 80a1afa:	460d      	mov	r5, r1
 80a1afc:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1b00:	f7ff f906 	bl	80a0d10 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1b04:	4628      	mov	r0, r5
    _spi = spi;
 80a1b06:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1b08:	f7ff f9ae 	bl	80a0e68 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1b0c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1b0e:	6066      	str	r6, [r4, #4]
}
 80a1b10:	bd70      	pop	{r4, r5, r6, pc}

080a1b12 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b12:	b510      	push	{r4, lr}
 80a1b14:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b16:	6800      	ldr	r0, [r0, #0]
 80a1b18:	f7ff fb0a 	bl	80a1130 <free>
}
 80a1b1c:	4620      	mov	r0, r4
 80a1b1e:	bd10      	pop	{r4, pc}

080a1b20 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b20:	b510      	push	{r4, lr}
 80a1b22:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b24:	6800      	ldr	r0, [r0, #0]
 80a1b26:	b108      	cbz	r0, 80a1b2c <_ZN6String10invalidateEv+0xc>
 80a1b28:	f7ff fb02 	bl	80a1130 <free>
	buffer = NULL;
 80a1b2c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1b2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1b32:	6023      	str	r3, [r4, #0]
}
 80a1b34:	bd10      	pop	{r4, pc}

080a1b36 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b36:	b538      	push	{r3, r4, r5, lr}
 80a1b38:	4604      	mov	r4, r0
 80a1b3a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b3c:	6800      	ldr	r0, [r0, #0]
 80a1b3e:	3101      	adds	r1, #1
 80a1b40:	f7ff fafe 	bl	80a1140 <realloc>
	if (newbuffer) {
 80a1b44:	b110      	cbz	r0, 80a1b4c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1b46:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1b4a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1b4c:	bd38      	pop	{r3, r4, r5, pc}

080a1b4e <_ZN6String7reserveEj>:
{
 80a1b4e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1b50:	6803      	ldr	r3, [r0, #0]
{
 80a1b52:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1b54:	b123      	cbz	r3, 80a1b60 <_ZN6String7reserveEj+0x12>
 80a1b56:	6843      	ldr	r3, [r0, #4]
 80a1b58:	428b      	cmp	r3, r1
 80a1b5a:	d301      	bcc.n	80a1b60 <_ZN6String7reserveEj+0x12>
 80a1b5c:	2001      	movs	r0, #1
}
 80a1b5e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	f7ff ffe8 	bl	80a1b36 <_ZN6String12changeBufferEj>
 80a1b66:	2800      	cmp	r0, #0
 80a1b68:	d0f9      	beq.n	80a1b5e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1b6a:	68a3      	ldr	r3, [r4, #8]
 80a1b6c:	2b00      	cmp	r3, #0
 80a1b6e:	d1f5      	bne.n	80a1b5c <_ZN6String7reserveEj+0xe>
 80a1b70:	6822      	ldr	r2, [r4, #0]
 80a1b72:	7013      	strb	r3, [r2, #0]
 80a1b74:	e7f2      	b.n	80a1b5c <_ZN6String7reserveEj+0xe>

080a1b76 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1b76:	b570      	push	{r4, r5, r6, lr}
 80a1b78:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1b7a:	4611      	mov	r1, r2
{
 80a1b7c:	4604      	mov	r4, r0
 80a1b7e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1b80:	f7ff ffe5 	bl	80a1b4e <_ZN6String7reserveEj>
 80a1b84:	b920      	cbnz	r0, 80a1b90 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	f7ff ffca 	bl	80a1b20 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1b90:	462a      	mov	r2, r5
 80a1b92:	4631      	mov	r1, r6
 80a1b94:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1b96:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1b98:	f001 fd1a 	bl	80a35d0 <memcpy>
	buffer[len] = 0;
 80a1b9c:	2100      	movs	r1, #0
 80a1b9e:	6822      	ldr	r2, [r4, #0]
 80a1ba0:	68a3      	ldr	r3, [r4, #8]
 80a1ba2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1ba4:	e7f2      	b.n	80a1b8c <_ZN6String4copyEPKcj+0x16>

080a1ba6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1ba6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1ba8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1baa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1bac:	460d      	mov	r5, r1
	capacity = 0;
 80a1bae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1bb2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1bb4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1bb6:	b139      	cbz	r1, 80a1bc8 <_ZN6StringC1EPKc+0x22>
 80a1bb8:	4608      	mov	r0, r1
 80a1bba:	f001 fd70 	bl	80a369e <strlen>
 80a1bbe:	4629      	mov	r1, r5
 80a1bc0:	4602      	mov	r2, r0
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	f7ff ffd7 	bl	80a1b76 <_ZN6String4copyEPKcj>
}
 80a1bc8:	4620      	mov	r0, r4
 80a1bca:	bd38      	pop	{r3, r4, r5, pc}

080a1bcc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1bcc:	4288      	cmp	r0, r1
{
 80a1bce:	b510      	push	{r4, lr}
 80a1bd0:	460b      	mov	r3, r1
 80a1bd2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1bd4:	d004      	beq.n	80a1be0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1bd6:	6809      	ldr	r1, [r1, #0]
 80a1bd8:	b121      	cbz	r1, 80a1be4 <_ZN6StringaSERKS_+0x18>
 80a1bda:	689a      	ldr	r2, [r3, #8]
 80a1bdc:	f7ff ffcb 	bl	80a1b76 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1be0:	4620      	mov	r0, r4
 80a1be2:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1be4:	f7ff ff9c 	bl	80a1b20 <_ZN6String10invalidateEv>
 80a1be8:	e7fa      	b.n	80a1be0 <_ZN6StringaSERKS_+0x14>

080a1bea <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1bea:	2300      	movs	r3, #0
String::String(const String &value)
 80a1bec:	b510      	push	{r4, lr}
 80a1bee:	4604      	mov	r4, r0
	capacity = 0;
 80a1bf0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1bf4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1bf6:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1bf8:	f7ff ffe8 	bl	80a1bcc <_ZN6StringaSERKS_>
}
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	bd10      	pop	{r4, pc}

080a1c00 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1c00:	b538      	push	{r3, r4, r5, lr}
 80a1c02:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c04:	460c      	mov	r4, r1
 80a1c06:	b149      	cbz	r1, 80a1c1c <_ZN6StringaSEPKc+0x1c>
 80a1c08:	4608      	mov	r0, r1
 80a1c0a:	f001 fd48 	bl	80a369e <strlen>
 80a1c0e:	4621      	mov	r1, r4
 80a1c10:	4602      	mov	r2, r0
 80a1c12:	4628      	mov	r0, r5
 80a1c14:	f7ff ffaf 	bl	80a1b76 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1c18:	4628      	mov	r0, r5
 80a1c1a:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1c1c:	f7ff ff80 	bl	80a1b20 <_ZN6String10invalidateEv>
 80a1c20:	e7fa      	b.n	80a1c18 <_ZN6StringaSEPKc+0x18>

080a1c22 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a1c22:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1c24:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a1c26:	4604      	mov	r4, r0
 80a1c28:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1c2a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1c2e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1c30:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a1c32:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1c34:	a901      	add	r1, sp, #4
 80a1c36:	f000 fa8d 	bl	80a2154 <ltoa>
	*this = buf;
 80a1c3a:	4620      	mov	r0, r4
 80a1c3c:	a901      	add	r1, sp, #4
 80a1c3e:	f7ff ffdf 	bl	80a1c00 <_ZN6StringaSEPKc>
}
 80a1c42:	4620      	mov	r0, r4
 80a1c44:	b00a      	add	sp, #40	; 0x28
 80a1c46:	bd10      	pop	{r4, pc}

080a1c48 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1c48:	b570      	push	{r4, r5, r6, lr}
 80a1c4a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1c4c:	460e      	mov	r6, r1
 80a1c4e:	b909      	cbnz	r1, 80a1c54 <_ZN6String6concatEPKcj+0xc>
 80a1c50:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1c52:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1c54:	b16a      	cbz	r2, 80a1c72 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1c56:	6884      	ldr	r4, [r0, #8]
 80a1c58:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1c5a:	4621      	mov	r1, r4
 80a1c5c:	f7ff ff77 	bl	80a1b4e <_ZN6String7reserveEj>
 80a1c60:	2800      	cmp	r0, #0
 80a1c62:	d0f5      	beq.n	80a1c50 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1c64:	6828      	ldr	r0, [r5, #0]
 80a1c66:	68ab      	ldr	r3, [r5, #8]
 80a1c68:	4631      	mov	r1, r6
 80a1c6a:	4418      	add	r0, r3
 80a1c6c:	f001 fcf4 	bl	80a3658 <strcpy>
	len = newlen;
 80a1c70:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1c72:	2001      	movs	r0, #1
 80a1c74:	e7ed      	b.n	80a1c52 <_ZN6String6concatEPKcj+0xa>

080a1c76 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1c76:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1c78:	688a      	ldr	r2, [r1, #8]
 80a1c7a:	6809      	ldr	r1, [r1, #0]
{
 80a1c7c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1c7e:	f7ff ffe3 	bl	80a1c48 <_ZN6String6concatEPKcj>
 80a1c82:	b910      	cbnz	r0, 80a1c8a <_ZplRK15StringSumHelperRK6String+0x14>
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	f7ff ff4b 	bl	80a1b20 <_ZN6String10invalidateEv>
	return a;
}
 80a1c8a:	4620      	mov	r0, r4
 80a1c8c:	bd10      	pop	{r4, pc}

080a1c8e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1c8e:	b538      	push	{r3, r4, r5, lr}
 80a1c90:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1c92:	460d      	mov	r5, r1
 80a1c94:	b921      	cbnz	r1, 80a1ca0 <_ZplRK15StringSumHelperPKc+0x12>
 80a1c96:	4620      	mov	r0, r4
 80a1c98:	f7ff ff42 	bl	80a1b20 <_ZN6String10invalidateEv>
	return a;
}
 80a1c9c:	4620      	mov	r0, r4
 80a1c9e:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1ca0:	4608      	mov	r0, r1
 80a1ca2:	f001 fcfc 	bl	80a369e <strlen>
 80a1ca6:	4629      	mov	r1, r5
 80a1ca8:	4602      	mov	r2, r0
 80a1caa:	4620      	mov	r0, r4
 80a1cac:	f7ff ffcc 	bl	80a1c48 <_ZN6String6concatEPKcj>
 80a1cb0:	2800      	cmp	r0, #0
 80a1cb2:	d0f0      	beq.n	80a1c96 <_ZplRK15StringSumHelperPKc+0x8>
 80a1cb4:	e7f2      	b.n	80a1c9c <_ZplRK15StringSumHelperPKc+0xe>
	...

080a1cb8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1cb8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1cba:	2000      	movs	r0, #0
 80a1cbc:	4b04      	ldr	r3, [pc, #16]	; (80a1cd0 <_GLOBAL__sub_I_System+0x18>)
 80a1cbe:	601a      	str	r2, [r3, #0]
 80a1cc0:	4b04      	ldr	r3, [pc, #16]	; (80a1cd4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1cc2:	4a05      	ldr	r2, [pc, #20]	; (80a1cd8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1cc4:	6018      	str	r0, [r3, #0]
 80a1cc6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1cc8:	7198      	strb	r0, [r3, #6]
 80a1cca:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1ccc:	f7ff b964 	b.w	80a0f98 <set_system_mode>
 80a1cd0:	200007a8 	.word	0x200007a8
 80a1cd4:	2000079c 	.word	0x2000079c
 80a1cd8:	ffff0000 	.word	0xffff0000

080a1cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a1cdc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1cde:	2000      	movs	r0, #0
 80a1ce0:	f7ff f9ae 	bl	80a1040 <spark_sync_time_pending>
 80a1ce4:	b128      	cbz	r0, 80a1cf2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1ce6:	f7ff f99b 	bl	80a1020 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1cea:	f080 0001 	eor.w	r0, r0, #1
 80a1cee:	b2c0      	uxtb	r0, r0
    }
 80a1cf0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1cf2:	2001      	movs	r0, #1
 80a1cf4:	e7fc      	b.n	80a1cf0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a1cf8 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a1cf8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1cfa:	490a      	ldr	r1, [pc, #40]	; (80a1d24 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a1cfc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1cfe:	f001 f971 	bl	80a2fe4 <__aeabi_fcmplt>
 80a1d02:	b968      	cbnz	r0, 80a1d20 <_ZN9TimeClass4zoneEf+0x28>
 80a1d04:	4620      	mov	r0, r4
 80a1d06:	4908      	ldr	r1, [pc, #32]	; (80a1d28 <_ZN9TimeClass4zoneEf+0x30>)
 80a1d08:	f001 f98a 	bl	80a3020 <__aeabi_fcmpgt>
 80a1d0c:	b940      	cbnz	r0, 80a1d20 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a1d0e:	4907      	ldr	r1, [pc, #28]	; (80a1d2c <_ZN9TimeClass4zoneEf+0x34>)
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	f000 ffc9 	bl	80a2ca8 <__aeabi_fmul>
 80a1d16:	f001 f98d 	bl	80a3034 <__aeabi_f2lz>
 80a1d1a:	4b05      	ldr	r3, [pc, #20]	; (80a1d30 <_ZN9TimeClass4zoneEf+0x38>)
 80a1d1c:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a1d20:	bd10      	pop	{r4, pc}
 80a1d22:	bf00      	nop
 80a1d24:	c1400000 	.word	0xc1400000
 80a1d28:	41600000 	.word	0x41600000
 80a1d2c:	45610000 	.word	0x45610000
 80a1d30:	200007b8 	.word	0x200007b8

080a1d34 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a1d34:	b530      	push	{r4, r5, lr}
 80a1d36:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a1d38:	4818      	ldr	r0, [pc, #96]	; (80a1d9c <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a1d3a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a1d3c:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a1d40:	1852      	adds	r2, r2, r1
 80a1d42:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a1d46:	4816      	ldr	r0, [pc, #88]	; (80a1da0 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a1d48:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a1d4a:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a1d4e:	1852      	adds	r2, r2, r1
 80a1d50:	eb40 0303 	adc.w	r3, r0, r3
 80a1d54:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a1d58:	2224      	movs	r2, #36	; 0x24
 80a1d5a:	2100      	movs	r1, #0
 80a1d5c:	eb0d 0002 	add.w	r0, sp, r2
 80a1d60:	f001 fc44 	bl	80a35ec <memset>
    localtime_r(&t, &calendar_time);
 80a1d64:	a909      	add	r1, sp, #36	; 0x24
 80a1d66:	4668      	mov	r0, sp
 80a1d68:	f001 fb28 	bl	80a33bc <localtime_r>
    char ascstr[26] = {};
 80a1d6c:	2216      	movs	r2, #22
 80a1d6e:	4629      	mov	r1, r5
 80a1d70:	a803      	add	r0, sp, #12
 80a1d72:	9502      	str	r5, [sp, #8]
 80a1d74:	f001 fc3a 	bl	80a35ec <memset>
    asctime_r(&calendar_time, ascstr);
 80a1d78:	a902      	add	r1, sp, #8
 80a1d7a:	a809      	add	r0, sp, #36	; 0x24
 80a1d7c:	f001 faf2 	bl	80a3364 <asctime_r>
    int len = strlen(ascstr);
 80a1d80:	a802      	add	r0, sp, #8
 80a1d82:	f001 fc8c 	bl	80a369e <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a1d86:	ab12      	add	r3, sp, #72	; 0x48
 80a1d88:	4418      	add	r0, r3
 80a1d8a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a1d8e:	a902      	add	r1, sp, #8
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	f7ff ff08 	bl	80a1ba6 <_ZN6StringC1EPKc>
}
 80a1d96:	4620      	mov	r0, r4
 80a1d98:	b013      	add	sp, #76	; 0x4c
 80a1d9a:	bd30      	pop	{r4, r5, pc}
 80a1d9c:	200007b8 	.word	0x200007b8
 80a1da0:	200007b0 	.word	0x200007b0

080a1da4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1da4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1da6:	2000      	movs	r0, #0
 80a1da8:	f7fe ffd2 	bl	80a0d50 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1dac:	4604      	mov	r4, r0
 80a1dae:	b9a0      	cbnz	r0, 80a1dda <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1db0:	f7ff f8ea 	bl	80a0f88 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1db4:	2801      	cmp	r0, #1
 80a1db6:	d110      	bne.n	80a1dda <_ZN9TimeClass7isValidEv+0x36>
 80a1db8:	4620      	mov	r0, r4
 80a1dba:	f7ff f90d 	bl	80a0fd8 <system_thread_get_state>
 80a1dbe:	b960      	cbnz	r0, 80a1dda <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1dc0:	f7ff ff8c 	bl	80a1cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1dc4:	b910      	cbnz	r0, 80a1dcc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1dc6:	f7ff f923 	bl	80a1010 <spark_process>
        while (_while() && !_condition()) {
 80a1dca:	e7f9      	b.n	80a1dc0 <_ZN9TimeClass7isValidEv+0x1c>
 80a1dcc:	f7ff ff86 	bl	80a1cdc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1dd4:	2000      	movs	r0, #0
 80a1dd6:	f7fe bfbb 	b.w	80a0d50 <hal_rtc_time_is_valid>
}
 80a1dda:	4620      	mov	r0, r4
 80a1ddc:	bd10      	pop	{r4, pc}

080a1dde <_ZN9TimeClass3nowEv>:
{
 80a1dde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1de0:	f7ff ffe0 	bl	80a1da4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1de4:	2210      	movs	r2, #16
 80a1de6:	2100      	movs	r1, #0
 80a1de8:	4668      	mov	r0, sp
 80a1dea:	f001 fbff 	bl	80a35ec <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1dee:	2100      	movs	r1, #0
 80a1df0:	4668      	mov	r0, sp
 80a1df2:	f7fe ffb5 	bl	80a0d60 <hal_rtc_get_time>
}
 80a1df6:	9800      	ldr	r0, [sp, #0]
 80a1df8:	b005      	add	sp, #20
 80a1dfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1e00:	4b02      	ldr	r3, [pc, #8]	; (80a1e0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1e02:	681a      	ldr	r2, [r3, #0]
 80a1e04:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1e06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1e08:	4770      	bx	lr
 80a1e0a:	bf00      	nop
 80a1e0c:	20000010 	.word	0x20000010
 80a1e10:	200007ac 	.word	0x200007ac

080a1e14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e14:	4770      	bx	lr

080a1e16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e16:	7441      	strb	r1, [r0, #17]
}
 80a1e18:	4770      	bx	lr

080a1e1a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1e1a:	4770      	bx	lr

080a1e1c <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1e1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1e1e:	7c00      	ldrb	r0, [r0, #16]
 80a1e20:	f7ff f86a 	bl	80a0ef8 <hal_usart_available_data_for_write>
}
 80a1e24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e28:	bd08      	pop	{r3, pc}

080a1e2a <_ZN11USARTSerial9availableEv>:
{
 80a1e2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1e2c:	7c00      	ldrb	r0, [r0, #16]
 80a1e2e:	f7ff f83b 	bl	80a0ea8 <hal_usart_available>
}
 80a1e32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e36:	bd08      	pop	{r3, pc}

080a1e38 <_ZN11USARTSerial4peekEv>:
{
 80a1e38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1e3a:	7c00      	ldrb	r0, [r0, #16]
 80a1e3c:	f7ff f844 	bl	80a0ec8 <hal_usart_peek>
}
 80a1e40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e44:	bd08      	pop	{r3, pc}

080a1e46 <_ZN11USARTSerial4readEv>:
{
 80a1e46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1e48:	7c00      	ldrb	r0, [r0, #16]
 80a1e4a:	f7ff f835 	bl	80a0eb8 <hal_usart_read>
}
 80a1e4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e52:	bd08      	pop	{r3, pc}

080a1e54 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1e54:	7c00      	ldrb	r0, [r0, #16]
 80a1e56:	f7ff b83f 	b.w	80a0ed8 <hal_usart_flush>

080a1e5a <_ZN11USARTSerial5writeEh>:
{
 80a1e5a:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e5c:	7c46      	ldrb	r6, [r0, #17]
{
 80a1e5e:	4604      	mov	r4, r0
 80a1e60:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e62:	b12e      	cbz	r6, 80a1e70 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1e64:	4629      	mov	r1, r5
 80a1e66:	7c20      	ldrb	r0, [r4, #16]
}
 80a1e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1e6c:	f7ff b814 	b.w	80a0e98 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e70:	7c00      	ldrb	r0, [r0, #16]
 80a1e72:	f7ff f841 	bl	80a0ef8 <hal_usart_available_data_for_write>
 80a1e76:	2800      	cmp	r0, #0
 80a1e78:	dcf4      	bgt.n	80a1e64 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1e7a:	4630      	mov	r0, r6
 80a1e7c:	bd70      	pop	{r4, r5, r6, pc}

080a1e7e <_ZN11USARTSerialD0Ev>:
 80a1e7e:	b510      	push	{r4, lr}
 80a1e80:	4604      	mov	r4, r0
 80a1e82:	2114      	movs	r1, #20
 80a1e84:	f000 fb1a 	bl	80a24bc <_ZdlPvj>
 80a1e88:	4620      	mov	r0, r4
 80a1e8a:	bd10      	pop	{r4, pc}

080a1e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1e8c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e90:	b510      	push	{r4, lr}
 80a1e92:	4604      	mov	r4, r0
 80a1e94:	4608      	mov	r0, r1
 80a1e96:	4611      	mov	r1, r2
 80a1e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1e9c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1ea0:	4a04      	ldr	r2, [pc, #16]	; (80a1eb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1ea2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1ea4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1ea6:	2201      	movs	r2, #1
 80a1ea8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1eaa:	461a      	mov	r2, r3
 80a1eac:	f7fe ffec 	bl	80a0e88 <hal_usart_init>
}
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bd10      	pop	{r4, pc}
 80a1eb4:	080a41c8 	.word	0x080a41c8

080a1eb8 <_Z22__fetch_global_Serial1v>:
{
 80a1eb8:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1eba:	4d0c      	ldr	r5, [pc, #48]	; (80a1eec <_Z22__fetch_global_Serial1v+0x34>)
 80a1ebc:	7829      	ldrb	r1, [r5, #0]
 80a1ebe:	f3bf 8f5b 	dmb	ish
 80a1ec2:	f011 0401 	ands.w	r4, r1, #1
 80a1ec6:	d10f      	bne.n	80a1ee8 <_Z22__fetch_global_Serial1v+0x30>
 80a1ec8:	4628      	mov	r0, r5
 80a1eca:	f7fe f8ea 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ece:	b158      	cbz	r0, 80a1ee8 <_Z22__fetch_global_Serial1v+0x30>
 80a1ed0:	4621      	mov	r1, r4
 80a1ed2:	4b07      	ldr	r3, [pc, #28]	; (80a1ef0 <_Z22__fetch_global_Serial1v+0x38>)
 80a1ed4:	4a07      	ldr	r2, [pc, #28]	; (80a1ef4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1ed6:	4808      	ldr	r0, [pc, #32]	; (80a1ef8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1ed8:	f7ff ffd8 	bl	80a1e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1edc:	4628      	mov	r0, r5
 80a1ede:	f7fe f8e5 	bl	80a00ac <__cxa_guard_release>
 80a1ee2:	4806      	ldr	r0, [pc, #24]	; (80a1efc <_Z22__fetch_global_Serial1v+0x44>)
 80a1ee4:	f001 fa64 	bl	80a33b0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1ee8:	4803      	ldr	r0, [pc, #12]	; (80a1ef8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1eea:	bd38      	pop	{r3, r4, r5, pc}
 80a1eec:	200007c0 	.word	0x200007c0
 80a1ef0:	20000848 	.word	0x20000848
 80a1ef4:	200007c4 	.word	0x200007c4
 80a1ef8:	200008cc 	.word	0x200008cc
 80a1efc:	080a1e1b 	.word	0x080a1e1b

080a1f00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f00:	7441      	strb	r1, [r0, #17]
}
 80a1f02:	4770      	bx	lr

080a1f04 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f04:	4770      	bx	lr

080a1f06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1f06:	4770      	bx	lr

080a1f08 <_ZN9USBSerial4readEv>:
{
 80a1f08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1f0a:	2100      	movs	r1, #0
 80a1f0c:	7c00      	ldrb	r0, [r0, #16]
 80a1f0e:	f7ff f81b 	bl	80a0f48 <HAL_USB_USART_Receive_Data>
}
 80a1f12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f16:	bd08      	pop	{r3, pc}

080a1f18 <_ZN9USBSerial4peekEv>:
{
 80a1f18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1f1a:	2101      	movs	r1, #1
 80a1f1c:	7c00      	ldrb	r0, [r0, #16]
 80a1f1e:	f7ff f813 	bl	80a0f48 <HAL_USB_USART_Receive_Data>
}
 80a1f22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f26:	bd08      	pop	{r3, pc}

080a1f28 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1f28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1f2a:	7c00      	ldrb	r0, [r0, #16]
 80a1f2c:	f7ff f804 	bl	80a0f38 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f34:	bd08      	pop	{r3, pc}

080a1f36 <_ZN9USBSerial9availableEv>:
{
 80a1f36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1f38:	7c00      	ldrb	r0, [r0, #16]
 80a1f3a:	f7fe fff5 	bl	80a0f28 <HAL_USB_USART_Available_Data>
}
 80a1f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f42:	bd08      	pop	{r3, pc}

080a1f44 <_ZN9USBSerial5writeEh>:
{
 80a1f44:	b538      	push	{r3, r4, r5, lr}
 80a1f46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f48:	7c00      	ldrb	r0, [r0, #16]
{
 80a1f4a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f4c:	f7fe fff4 	bl	80a0f38 <HAL_USB_USART_Available_Data_For_Write>
 80a1f50:	2800      	cmp	r0, #0
 80a1f52:	dc01      	bgt.n	80a1f58 <_ZN9USBSerial5writeEh+0x14>
 80a1f54:	7c60      	ldrb	r0, [r4, #17]
 80a1f56:	b128      	cbz	r0, 80a1f64 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1f58:	4629      	mov	r1, r5
 80a1f5a:	7c20      	ldrb	r0, [r4, #16]
 80a1f5c:	f7fe fffc 	bl	80a0f58 <HAL_USB_USART_Send_Data>
 80a1f60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1f64:	bd38      	pop	{r3, r4, r5, pc}

080a1f66 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1f66:	7c00      	ldrb	r0, [r0, #16]
 80a1f68:	f7fe bffe 	b.w	80a0f68 <HAL_USB_USART_Flush_Data>

080a1f6c <_ZN9USBSerialD0Ev>:
 80a1f6c:	b510      	push	{r4, lr}
 80a1f6e:	4604      	mov	r4, r0
 80a1f70:	2114      	movs	r1, #20
 80a1f72:	f000 faa3 	bl	80a24bc <_ZdlPvj>
 80a1f76:	4620      	mov	r0, r4
 80a1f78:	bd10      	pop	{r4, pc}

080a1f7a <__tcf_1>:
 80a1f7a:	4770      	bx	lr

080a1f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f82:	4604      	mov	r4, r0
 80a1f84:	4608      	mov	r0, r1
 80a1f86:	2100      	movs	r1, #0
 80a1f88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1f8c:	4b04      	ldr	r3, [pc, #16]	; (80a1fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1f8e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f90:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1f92:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1f94:	4611      	mov	r1, r2
  _blocking = true;
 80a1f96:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1f98:	f7fe ffb6 	bl	80a0f08 <HAL_USB_USART_Init>
}
 80a1f9c:	4620      	mov	r0, r4
 80a1f9e:	bd10      	pop	{r4, pc}
 80a1fa0:	080a41f8 	.word	0x080a41f8

080a1fa4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1fa4:	2200      	movs	r2, #0
 80a1fa6:	7c00      	ldrb	r0, [r0, #16]
 80a1fa8:	f7fe bfb6 	b.w	80a0f18 <HAL_USB_USART_Begin>

080a1fac <_Z19acquireSerialBufferv>:
{
 80a1fac:	b510      	push	{r4, lr}
 80a1fae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fb0:	2214      	movs	r2, #20
 80a1fb2:	2100      	movs	r1, #0
 80a1fb4:	f001 fb1a 	bl	80a35ec <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1fb8:	4b05      	ldr	r3, [pc, #20]	; (80a1fd0 <_Z19acquireSerialBufferv+0x24>)
}
 80a1fba:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1fbc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1fbe:	4b05      	ldr	r3, [pc, #20]	; (80a1fd4 <_Z19acquireSerialBufferv+0x28>)
 80a1fc0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fc2:	f240 1301 	movw	r3, #257	; 0x101
 80a1fc6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fc8:	2381      	movs	r3, #129	; 0x81
 80a1fca:	8223      	strh	r3, [r4, #16]
}
 80a1fcc:	bd10      	pop	{r4, pc}
 80a1fce:	bf00      	nop
 80a1fd0:	20000910 	.word	0x20000910
 80a1fd4:	20000a11 	.word	0x20000a11

080a1fd8 <_Z16_fetch_usbserialv>:
{
 80a1fd8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1fda:	4d0e      	ldr	r5, [pc, #56]	; (80a2014 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1fdc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1fde:	a801      	add	r0, sp, #4
 80a1fe0:	f7ff ffe4 	bl	80a1fac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1fe4:	7829      	ldrb	r1, [r5, #0]
 80a1fe6:	f3bf 8f5b 	dmb	ish
 80a1fea:	f011 0401 	ands.w	r4, r1, #1
 80a1fee:	d10e      	bne.n	80a200e <_Z16_fetch_usbserialv+0x36>
 80a1ff0:	4628      	mov	r0, r5
 80a1ff2:	f7fe f856 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ff6:	b150      	cbz	r0, 80a200e <_Z16_fetch_usbserialv+0x36>
 80a1ff8:	4621      	mov	r1, r4
 80a1ffa:	aa01      	add	r2, sp, #4
 80a1ffc:	4806      	ldr	r0, [pc, #24]	; (80a2018 <_Z16_fetch_usbserialv+0x40>)
 80a1ffe:	f7ff ffbd 	bl	80a1f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2002:	4628      	mov	r0, r5
 80a2004:	f7fe f852 	bl	80a00ac <__cxa_guard_release>
 80a2008:	4804      	ldr	r0, [pc, #16]	; (80a201c <_Z16_fetch_usbserialv+0x44>)
 80a200a:	f001 f9d1 	bl	80a33b0 <atexit>
	return _usbserial;
}
 80a200e:	4802      	ldr	r0, [pc, #8]	; (80a2018 <_Z16_fetch_usbserialv+0x40>)
 80a2010:	b007      	add	sp, #28
 80a2012:	bd30      	pop	{r4, r5, pc}
 80a2014:	200008e0 	.word	0x200008e0
 80a2018:	200008e8 	.word	0x200008e8
 80a201c:	080a1f05 	.word	0x080a1f05

080a2020 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2020:	b510      	push	{r4, lr}
 80a2022:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2024:	2214      	movs	r2, #20
 80a2026:	2100      	movs	r1, #0
 80a2028:	f001 fae0 	bl	80a35ec <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a202c:	4b05      	ldr	r3, [pc, #20]	; (80a2044 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a202e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2030:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2032:	4b05      	ldr	r3, [pc, #20]	; (80a2048 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2034:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2036:	f240 1301 	movw	r3, #257	; 0x101
 80a203a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a203c:	2381      	movs	r3, #129	; 0x81
 80a203e:	8223      	strh	r3, [r4, #16]
}
 80a2040:	bd10      	pop	{r4, pc}
 80a2042:	bf00      	nop
 80a2044:	20000a92 	.word	0x20000a92
 80a2048:	20000b93 	.word	0x20000b93

080a204c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a204c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a204e:	4c0e      	ldr	r4, [pc, #56]	; (80a2088 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2050:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2052:	a801      	add	r0, sp, #4
 80a2054:	f7ff ffe4 	bl	80a2020 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2058:	7823      	ldrb	r3, [r4, #0]
 80a205a:	f3bf 8f5b 	dmb	ish
 80a205e:	07db      	lsls	r3, r3, #31
 80a2060:	d40e      	bmi.n	80a2080 <_Z17_fetch_usbserial1v+0x34>
 80a2062:	4620      	mov	r0, r4
 80a2064:	f7fe f81d 	bl	80a00a2 <__cxa_guard_acquire>
 80a2068:	b150      	cbz	r0, 80a2080 <_Z17_fetch_usbserial1v+0x34>
 80a206a:	2101      	movs	r1, #1
 80a206c:	aa01      	add	r2, sp, #4
 80a206e:	4807      	ldr	r0, [pc, #28]	; (80a208c <_Z17_fetch_usbserial1v+0x40>)
 80a2070:	f7ff ff84 	bl	80a1f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2074:	4620      	mov	r0, r4
 80a2076:	f7fe f819 	bl	80a00ac <__cxa_guard_release>
 80a207a:	4805      	ldr	r0, [pc, #20]	; (80a2090 <_Z17_fetch_usbserial1v+0x44>)
 80a207c:	f001 f998 	bl	80a33b0 <atexit>
  return _usbserial1;
}
 80a2080:	4802      	ldr	r0, [pc, #8]	; (80a208c <_Z17_fetch_usbserial1v+0x40>)
 80a2082:	b006      	add	sp, #24
 80a2084:	bd10      	pop	{r4, pc}
 80a2086:	bf00      	nop
 80a2088:	200008e4 	.word	0x200008e4
 80a208c:	200008fc 	.word	0x200008fc
 80a2090:	080a1f7b 	.word	0x080a1f7b

080a2094 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2094:	2200      	movs	r2, #0
 80a2096:	6840      	ldr	r0, [r0, #4]
 80a2098:	4611      	mov	r1, r2
 80a209a:	f7fe bff9 	b.w	80a1090 <network_ready>

080a209e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a209e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20a0:	4615      	mov	r5, r2
 80a20a2:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a20a4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a20a6:	460e      	mov	r6, r1
 80a20a8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a20aa:	2100      	movs	r1, #0
 80a20ac:	a803      	add	r0, sp, #12
 80a20ae:	f001 fa9d 	bl	80a35ec <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a20b2:	4628      	mov	r0, r5
 80a20b4:	f001 faf3 	bl	80a369e <strlen>
 80a20b8:	2700      	movs	r7, #0
 80a20ba:	b281      	uxth	r1, r0
 80a20bc:	6873      	ldr	r3, [r6, #4]
 80a20be:	4628      	mov	r0, r5
 80a20c0:	9700      	str	r7, [sp, #0]
 80a20c2:	aa03      	add	r2, sp, #12
 80a20c4:	f7fe ff58 	bl	80a0f78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a20c8:	b130      	cbz	r0, 80a20d8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a20ca:	4639      	mov	r1, r7
 80a20cc:	4620      	mov	r0, r4
 80a20ce:	f7ff fc15 	bl	80a18fc <_ZN9IPAddressC1Em>
    }
 80a20d2:	4620      	mov	r0, r4
 80a20d4:	b009      	add	sp, #36	; 0x24
 80a20d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a20d8:	4620      	mov	r0, r4
 80a20da:	a903      	add	r1, sp, #12
 80a20dc:	f7ff fbfc 	bl	80a18d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a20e0:	e7f7      	b.n	80a20d2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a20e2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a20e2:	2200      	movs	r2, #0
 80a20e4:	6840      	ldr	r0, [r0, #4]
 80a20e6:	4611      	mov	r1, r2
 80a20e8:	f7fe bff2 	b.w	80a10d0 <network_listening>

080a20ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a20ec:	2200      	movs	r2, #0
 80a20ee:	6840      	ldr	r0, [r0, #4]
 80a20f0:	4611      	mov	r1, r2
 80a20f2:	f7fe bffd 	b.w	80a10f0 <network_get_listen_timeout>

080a20f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a20f6:	2200      	movs	r2, #0
 80a20f8:	6840      	ldr	r0, [r0, #4]
 80a20fa:	f7fe bff1 	b.w	80a10e0 <network_set_listen_timeout>

080a20fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a20fe:	2200      	movs	r2, #0
 80a2100:	6840      	ldr	r0, [r0, #4]
 80a2102:	f081 0101 	eor.w	r1, r1, #1
 80a2106:	f7fe bfdb 	b.w	80a10c0 <network_listen>

080a210a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a210a:	2300      	movs	r3, #0
 80a210c:	6840      	ldr	r0, [r0, #4]
 80a210e:	461a      	mov	r2, r3
 80a2110:	4619      	mov	r1, r3
 80a2112:	f7fe bfcd 	b.w	80a10b0 <network_off>

080a2116 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2116:	2300      	movs	r3, #0
 80a2118:	6840      	ldr	r0, [r0, #4]
 80a211a:	461a      	mov	r2, r3
 80a211c:	4619      	mov	r1, r3
 80a211e:	f7fe bfbf 	b.w	80a10a0 <network_on>

080a2122 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2122:	2200      	movs	r2, #0
 80a2124:	6840      	ldr	r0, [r0, #4]
 80a2126:	4611      	mov	r1, r2
 80a2128:	f7fe bfa2 	b.w	80a1070 <network_connecting>

080a212c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a212c:	2200      	movs	r2, #0
 80a212e:	2102      	movs	r1, #2
 80a2130:	6840      	ldr	r0, [r0, #4]
 80a2132:	f7fe bfa5 	b.w	80a1080 <network_disconnect>

080a2136 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2136:	2300      	movs	r3, #0
 80a2138:	6840      	ldr	r0, [r0, #4]
 80a213a:	461a      	mov	r2, r3
 80a213c:	f7fe bf90 	b.w	80a1060 <network_connect>

080a2140 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2140:	2204      	movs	r2, #4
 80a2142:	4b02      	ldr	r3, [pc, #8]	; (80a214c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2144:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2146:	4a02      	ldr	r2, [pc, #8]	; (80a2150 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2148:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a214a:	4770      	bx	lr
 80a214c:	20000c14 	.word	0x20000c14
 80a2150:	080a4228 	.word	0x080a4228

080a2154 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2154:	1e93      	subs	r3, r2, #2
 80a2156:	2b22      	cmp	r3, #34	; 0x22
 80a2158:	f04f 0300 	mov.w	r3, #0
{
 80a215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2160:	b08c      	sub	sp, #48	; 0x30
 80a2162:	460d      	mov	r5, r1
 80a2164:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2166:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a216a:	d926      	bls.n	80a21ba <ltoa+0x66>

      if (10 == base && N < 0L)
 80a216c:	2800      	cmp	r0, #0
 80a216e:	da29      	bge.n	80a21c4 <ltoa+0x70>
      {
            *head++ = '-';
 80a2170:	462e      	mov	r6, r5
 80a2172:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a2174:	240a      	movs	r4, #10
            *head++ = '-';
 80a2176:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a217a:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a217c:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a2180:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2184:	4622      	mov	r2, r4
 80a2186:	4601      	mov	r1, r0
 80a2188:	a801      	add	r0, sp, #4
 80a218a:	f001 fa0d 	bl	80a35a8 <ldiv>
 80a218e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2190:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a2192:	2b09      	cmp	r3, #9
 80a2194:	bfcc      	ite	gt
 80a2196:	2237      	movgt	r2, #55	; 0x37
 80a2198:	2230      	movle	r2, #48	; 0x30
 80a219a:	4413      	add	r3, r2
 80a219c:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a21a0:	f108 0801 	add.w	r8, r8, #1
 80a21a4:	2800      	cmp	r0, #0
 80a21a6:	d1ed      	bne.n	80a2184 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a21a8:	4642      	mov	r2, r8
 80a21aa:	4630      	mov	r0, r6
 80a21ac:	1c79      	adds	r1, r7, #1
 80a21ae:	f001 fa0f 	bl	80a35d0 <memcpy>
      return str;
}
 80a21b2:	4628      	mov	r0, r5
 80a21b4:	b00c      	add	sp, #48	; 0x30
 80a21b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a21ba:	2a0a      	cmp	r2, #10
 80a21bc:	d0d6      	beq.n	80a216c <ltoa+0x18>
      if (uarg)
 80a21be:	b118      	cbz	r0, 80a21c8 <ltoa+0x74>
 80a21c0:	462e      	mov	r6, r5
 80a21c2:	e7db      	b.n	80a217c <ltoa+0x28>
 80a21c4:	240a      	movs	r4, #10
 80a21c6:	e7fa      	b.n	80a21be <ltoa+0x6a>
      else  *tail-- = '0';
 80a21c8:	2330      	movs	r3, #48	; 0x30
 80a21ca:	462e      	mov	r6, r5
      int i = 2;
 80a21cc:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a21d0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a21d4:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a21d8:	e7e6      	b.n	80a21a8 <ltoa+0x54>
	...

080a21dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a21dc:	4b01      	ldr	r3, [pc, #4]	; (80a21e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a21de:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a21e0:	4770      	bx	lr
 80a21e2:	bf00      	nop
 80a21e4:	20000014 	.word	0x20000014

080a21e8 <serialEventRun>:
{
 80a21e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a21ea:	4b13      	ldr	r3, [pc, #76]	; (80a2238 <serialEventRun+0x50>)
 80a21ec:	b143      	cbz	r3, 80a2200 <serialEventRun+0x18>
 80a21ee:	f7ff fef3 	bl	80a1fd8 <_Z16_fetch_usbserialv>
 80a21f2:	6803      	ldr	r3, [r0, #0]
 80a21f4:	691b      	ldr	r3, [r3, #16]
 80a21f6:	4798      	blx	r3
 80a21f8:	2800      	cmp	r0, #0
 80a21fa:	dd01      	ble.n	80a2200 <serialEventRun+0x18>
        serialEvent();
 80a21fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2200:	4b0e      	ldr	r3, [pc, #56]	; (80a223c <serialEventRun+0x54>)
 80a2202:	b143      	cbz	r3, 80a2216 <serialEventRun+0x2e>
 80a2204:	f7ff fe58 	bl	80a1eb8 <_Z22__fetch_global_Serial1v>
 80a2208:	6803      	ldr	r3, [r0, #0]
 80a220a:	691b      	ldr	r3, [r3, #16]
 80a220c:	4798      	blx	r3
 80a220e:	2800      	cmp	r0, #0
 80a2210:	dd01      	ble.n	80a2216 <serialEventRun+0x2e>
        serialEvent1();
 80a2212:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2216:	4b0a      	ldr	r3, [pc, #40]	; (80a2240 <serialEventRun+0x58>)
 80a2218:	b10b      	cbz	r3, 80a221e <serialEventRun+0x36>
 80a221a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a221e:	4b09      	ldr	r3, [pc, #36]	; (80a2244 <serialEventRun+0x5c>)
 80a2220:	b143      	cbz	r3, 80a2234 <serialEventRun+0x4c>
 80a2222:	f7ff ff13 	bl	80a204c <_Z17_fetch_usbserial1v>
 80a2226:	6803      	ldr	r3, [r0, #0]
 80a2228:	691b      	ldr	r3, [r3, #16]
 80a222a:	4798      	blx	r3
 80a222c:	2800      	cmp	r0, #0
 80a222e:	dd01      	ble.n	80a2234 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2230:	f3af 8000 	nop.w
}
 80a2234:	bd08      	pop	{r3, pc}
 80a2236:	bf00      	nop
	...

080a2248 <_post_loop>:
{
 80a2248:	b508      	push	{r3, lr}
	serialEventRun();
 80a224a:	f7ff ffcd 	bl	80a21e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a224e:	f7fe fd77 	bl	80a0d40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2252:	4b01      	ldr	r3, [pc, #4]	; (80a2258 <_post_loop+0x10>)
 80a2254:	6018      	str	r0, [r3, #0]
}
 80a2256:	bd08      	pop	{r3, pc}
 80a2258:	20000c34 	.word	0x20000c34

080a225c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a225c:	4805      	ldr	r0, [pc, #20]	; (80a2274 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a225e:	4a06      	ldr	r2, [pc, #24]	; (80a2278 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2260:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2262:	1a12      	subs	r2, r2, r0
 80a2264:	4905      	ldr	r1, [pc, #20]	; (80a227c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2266:	f001 f9b3 	bl	80a35d0 <memcpy>
    __backup_sram_signature = signature;
 80a226a:	4b05      	ldr	r3, [pc, #20]	; (80a2280 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a226c:	4a05      	ldr	r2, [pc, #20]	; (80a2284 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a226e:	601a      	str	r2, [r3, #0]
}
 80a2270:	bd08      	pop	{r3, pc}
 80a2272:	bf00      	nop
 80a2274:	40024000 	.word	0x40024000
 80a2278:	40024004 	.word	0x40024004
 80a227c:	080a4488 	.word	0x080a4488
 80a2280:	40024000 	.word	0x40024000
 80a2284:	9a271c1e 	.word	0x9a271c1e

080a2288 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2288:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a228a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a228c:	461a      	mov	r2, r3
 80a228e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2292:	9300      	str	r3, [sp, #0]
 80a2294:	f7fe feb2 	bl	80a0ffc <system_ctrl_set_result>
}
 80a2298:	b003      	add	sp, #12
 80a229a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a22a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a22a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a22a2:	8843      	ldrh	r3, [r0, #2]
 80a22a4:	2b0a      	cmp	r3, #10
 80a22a6:	d008      	beq.n	80a22ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a22a8:	2b50      	cmp	r3, #80	; 0x50
 80a22aa:	d10b      	bne.n	80a22c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a22ac:	4b09      	ldr	r3, [pc, #36]	; (80a22d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a22ae:	681b      	ldr	r3, [r3, #0]
 80a22b0:	b14b      	cbz	r3, 80a22c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a22b2:	b003      	add	sp, #12
 80a22b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a22b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a22ba:	f7ff ffe5 	bl	80a2288 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a22be:	b003      	add	sp, #12
 80a22c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22c4:	2300      	movs	r3, #0
 80a22c6:	461a      	mov	r2, r3
 80a22c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a22cc:	9300      	str	r3, [sp, #0]
 80a22ce:	f7fe fe95 	bl	80a0ffc <system_ctrl_set_result>
}
 80a22d2:	e7f4      	b.n	80a22be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a22d4:	20000c20 	.word	0x20000c20

080a22d8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a22d8:	2100      	movs	r1, #0
{
 80a22da:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a22dc:	4811      	ldr	r0, [pc, #68]	; (80a2324 <module_user_init_hook+0x4c>)
 80a22de:	f7fe ff57 	bl	80a1190 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a22e2:	4b11      	ldr	r3, [pc, #68]	; (80a2328 <module_user_init_hook+0x50>)
 80a22e4:	681a      	ldr	r2, [r3, #0]
 80a22e6:	4b11      	ldr	r3, [pc, #68]	; (80a232c <module_user_init_hook+0x54>)
 80a22e8:	429a      	cmp	r2, r3
 80a22ea:	bf0c      	ite	eq
 80a22ec:	2201      	moveq	r2, #1
 80a22ee:	2200      	movne	r2, #0
 80a22f0:	4b0f      	ldr	r3, [pc, #60]	; (80a2330 <module_user_init_hook+0x58>)
 80a22f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a22f4:	d001      	beq.n	80a22fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a22f6:	f7ff ffb1 	bl	80a225c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a22fa:	f7fe fd19 	bl	80a0d30 <HAL_RNG_GetRandomNumber>
 80a22fe:	4604      	mov	r4, r0
    srand(seed);
 80a2300:	f001 f97c 	bl	80a35fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2304:	4b0b      	ldr	r3, [pc, #44]	; (80a2334 <module_user_init_hook+0x5c>)
 80a2306:	b113      	cbz	r3, 80a230e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2308:	4620      	mov	r0, r4
 80a230a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a230e:	2100      	movs	r1, #0
 80a2310:	4808      	ldr	r0, [pc, #32]	; (80a2334 <module_user_init_hook+0x5c>)
 80a2312:	f7fe fe9d 	bl	80a1050 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a231a:	2100      	movs	r1, #0
 80a231c:	4806      	ldr	r0, [pc, #24]	; (80a2338 <module_user_init_hook+0x60>)
 80a231e:	f7fe be63 	b.w	80a0fe8 <system_ctrl_set_app_request_handler>
 80a2322:	bf00      	nop
 80a2324:	080a21dd 	.word	0x080a21dd
 80a2328:	40024000 	.word	0x40024000
 80a232c:	9a271c1e 	.word	0x9a271c1e
 80a2330:	20000c1c 	.word	0x20000c1c
 80a2334:	00000000 	.word	0x00000000
 80a2338:	080a22a1 	.word	0x080a22a1

080a233c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a233c:	4b02      	ldr	r3, [pc, #8]	; (80a2348 <__tcf_0+0xc>)
 80a233e:	6898      	ldr	r0, [r3, #8]
 80a2340:	b108      	cbz	r0, 80a2346 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2342:	f7fe bced 	b.w	80a0d20 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2346:	4770      	bx	lr
 80a2348:	20000c28 	.word	0x20000c28

080a234c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a234c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a234e:	b570      	push	{r4, r5, r6, lr}
 80a2350:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2352:	d901      	bls.n	80a2358 <pinAvailable+0xc>
    return false;
 80a2354:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2356:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2358:	f1a0 030d 	sub.w	r3, r0, #13
 80a235c:	2b02      	cmp	r3, #2
 80a235e:	d90b      	bls.n	80a2378 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2360:	2801      	cmp	r0, #1
 80a2362:	d824      	bhi.n	80a23ae <pinAvailable+0x62>
 80a2364:	f000 f878 	bl	80a2458 <_Z19__fetch_global_Wirev>
 80a2368:	2100      	movs	r1, #0
 80a236a:	7c00      	ldrb	r0, [r0, #16]
 80a236c:	f7fe fd60 	bl	80a0e30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2370:	f080 0001 	eor.w	r0, r0, #1
 80a2374:	b2c0      	uxtb	r0, r0
 80a2376:	e7ee      	b.n	80a2356 <pinAvailable+0xa>
 80a2378:	4e12      	ldr	r6, [pc, #72]	; (80a23c4 <pinAvailable+0x78>)
 80a237a:	7831      	ldrb	r1, [r6, #0]
 80a237c:	f3bf 8f5b 	dmb	ish
 80a2380:	f011 0501 	ands.w	r5, r1, #1
 80a2384:	d10d      	bne.n	80a23a2 <pinAvailable+0x56>
 80a2386:	4630      	mov	r0, r6
 80a2388:	f7fd fe8b 	bl	80a00a2 <__cxa_guard_acquire>
 80a238c:	b148      	cbz	r0, 80a23a2 <pinAvailable+0x56>
 80a238e:	4629      	mov	r1, r5
 80a2390:	480d      	ldr	r0, [pc, #52]	; (80a23c8 <pinAvailable+0x7c>)
 80a2392:	f7ff fbaf 	bl	80a1af4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2396:	4630      	mov	r0, r6
 80a2398:	f7fd fe88 	bl	80a00ac <__cxa_guard_release>
 80a239c:	480b      	ldr	r0, [pc, #44]	; (80a23cc <pinAvailable+0x80>)
 80a239e:	f001 f807 	bl	80a33b0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a23a2:	4b09      	ldr	r3, [pc, #36]	; (80a23c8 <pinAvailable+0x7c>)
 80a23a4:	7818      	ldrb	r0, [r3, #0]
 80a23a6:	f7fe fd67 	bl	80a0e78 <hal_spi_is_enabled>
 80a23aa:	2800      	cmp	r0, #0
 80a23ac:	d1d2      	bne.n	80a2354 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a23ae:	3c12      	subs	r4, #18
 80a23b0:	2c01      	cmp	r4, #1
 80a23b2:	d805      	bhi.n	80a23c0 <pinAvailable+0x74>
 80a23b4:	f7ff fd80 	bl	80a1eb8 <_Z22__fetch_global_Serial1v>
 80a23b8:	7c00      	ldrb	r0, [r0, #16]
 80a23ba:	f7fe fd95 	bl	80a0ee8 <hal_usart_is_enabled>
 80a23be:	e7d7      	b.n	80a2370 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a23c0:	2001      	movs	r0, #1
 80a23c2:	e7c8      	b.n	80a2356 <pinAvailable+0xa>
 80a23c4:	20000c24 	.word	0x20000c24
 80a23c8:	20000c28 	.word	0x20000c28
 80a23cc:	080a233d 	.word	0x080a233d

080a23d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23d0:	2817      	cmp	r0, #23
{
 80a23d2:	b538      	push	{r3, r4, r5, lr}
 80a23d4:	4604      	mov	r4, r0
 80a23d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23d8:	d80a      	bhi.n	80a23f0 <pinMode+0x20>
 80a23da:	29ff      	cmp	r1, #255	; 0xff
 80a23dc:	d008      	beq.n	80a23f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a23de:	f7ff ffb5 	bl	80a234c <pinAvailable>
 80a23e2:	b128      	cbz	r0, 80a23f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a23e4:	4629      	mov	r1, r5
 80a23e6:	4620      	mov	r0, r4
}
 80a23e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a23ec:	f7fe bcc0 	b.w	80a0d70 <HAL_Pin_Mode>
}
 80a23f0:	bd38      	pop	{r3, r4, r5, pc}

080a23f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a23f2:	b538      	push	{r3, r4, r5, lr}
 80a23f4:	4604      	mov	r4, r0
 80a23f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a23f8:	f7fe fcc2 	bl	80a0d80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a23fc:	28ff      	cmp	r0, #255	; 0xff
 80a23fe:	d010      	beq.n	80a2422 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2400:	2806      	cmp	r0, #6
 80a2402:	d804      	bhi.n	80a240e <digitalWrite+0x1c>
 80a2404:	234d      	movs	r3, #77	; 0x4d
 80a2406:	fa23 f000 	lsr.w	r0, r3, r0
 80a240a:	07c3      	lsls	r3, r0, #31
 80a240c:	d409      	bmi.n	80a2422 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a240e:	4620      	mov	r0, r4
 80a2410:	f7ff ff9c 	bl	80a234c <pinAvailable>
 80a2414:	b128      	cbz	r0, 80a2422 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2416:	4629      	mov	r1, r5
 80a2418:	4620      	mov	r0, r4
}
 80a241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a241e:	f7fe bcb7 	b.w	80a0d90 <HAL_GPIO_Write>
}
 80a2422:	bd38      	pop	{r3, r4, r5, pc}

080a2424 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2424:	4770      	bx	lr
	...

080a2428 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2428:	2300      	movs	r3, #0
{
 80a242a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a242c:	2520      	movs	r5, #32
 80a242e:	8043      	strh	r3, [r0, #2]
 80a2430:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2432:	4e08      	ldr	r6, [pc, #32]	; (80a2454 <_Z17acquireWireBufferv+0x2c>)
{
 80a2434:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2436:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2438:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a243a:	6085      	str	r5, [r0, #8]
 80a243c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a243e:	4628      	mov	r0, r5
 80a2440:	f000 f83e 	bl	80a24c0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2444:	4631      	mov	r1, r6
	};
 80a2446:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2448:	4628      	mov	r0, r5
 80a244a:	f000 f839 	bl	80a24c0 <_ZnajRKSt9nothrow_t>
	};
 80a244e:	60e0      	str	r0, [r4, #12]
}
 80a2450:	4620      	mov	r0, r4
 80a2452:	bd70      	pop	{r4, r5, r6, pc}
 80a2454:	080a425c 	.word	0x080a425c

080a2458 <_Z19__fetch_global_Wirev>:
{
 80a2458:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a245a:	4d0e      	ldr	r5, [pc, #56]	; (80a2494 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a245c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a245e:	7829      	ldrb	r1, [r5, #0]
 80a2460:	f3bf 8f5b 	dmb	ish
 80a2464:	f011 0401 	ands.w	r4, r1, #1
 80a2468:	d111      	bne.n	80a248e <_Z19__fetch_global_Wirev+0x36>
 80a246a:	4628      	mov	r0, r5
 80a246c:	f7fd fe19 	bl	80a00a2 <__cxa_guard_acquire>
 80a2470:	b168      	cbz	r0, 80a248e <_Z19__fetch_global_Wirev+0x36>
 80a2472:	a801      	add	r0, sp, #4
 80a2474:	f7ff ffd8 	bl	80a2428 <_Z17acquireWireBufferv>
 80a2478:	4621      	mov	r1, r4
 80a247a:	aa01      	add	r2, sp, #4
 80a247c:	4806      	ldr	r0, [pc, #24]	; (80a2498 <_Z19__fetch_global_Wirev+0x40>)
 80a247e:	f7ff f9a5 	bl	80a17cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2482:	4628      	mov	r0, r5
 80a2484:	f7fd fe12 	bl	80a00ac <__cxa_guard_release>
 80a2488:	4804      	ldr	r0, [pc, #16]	; (80a249c <_Z19__fetch_global_Wirev+0x44>)
 80a248a:	f000 ff91 	bl	80a33b0 <atexit>
	return wire;
}
 80a248e:	4802      	ldr	r0, [pc, #8]	; (80a2498 <_Z19__fetch_global_Wirev+0x40>)
 80a2490:	b007      	add	sp, #28
 80a2492:	bd30      	pop	{r4, r5, pc}
 80a2494:	20000c38 	.word	0x20000c38
 80a2498:	20000c3c 	.word	0x20000c3c
 80a249c:	080a2425 	.word	0x080a2425

080a24a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a24a0:	2300      	movs	r3, #0
 80a24a2:	b507      	push	{r0, r1, r2, lr}
 80a24a4:	461a      	mov	r2, r3
 80a24a6:	4619      	mov	r1, r3
 80a24a8:	9300      	str	r3, [sp, #0]
 80a24aa:	4803      	ldr	r0, [pc, #12]	; (80a24b8 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a24ac:	f7ff fa3c 	bl	80a1928 <_ZN9IPAddressC1Ehhhh>
 80a24b0:	b003      	add	sp, #12
 80a24b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a24b6:	bf00      	nop
 80a24b8:	20000c50 	.word	0x20000c50

080a24bc <_ZdlPvj>:
 80a24bc:	f7fd bdef 	b.w	80a009e <_ZdlPv>

080a24c0 <_ZnajRKSt9nothrow_t>:
 80a24c0:	f7fd bdeb 	b.w	80a009a <_Znaj>

080a24c4 <_ZSt25__throw_bad_function_callv>:
 80a24c4:	b508      	push	{r3, lr}
 80a24c6:	f7fe fe53 	bl	80a1170 <abort>
	...

080a24cc <__aeabi_drsub>:
 80a24cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a24d0:	e002      	b.n	80a24d8 <__adddf3>
 80a24d2:	bf00      	nop

080a24d4 <__aeabi_dsub>:
 80a24d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a24d8 <__adddf3>:
 80a24d8:	b530      	push	{r4, r5, lr}
 80a24da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a24de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a24e2:	ea94 0f05 	teq	r4, r5
 80a24e6:	bf08      	it	eq
 80a24e8:	ea90 0f02 	teqeq	r0, r2
 80a24ec:	bf1f      	itttt	ne
 80a24ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a24f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a24f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a24fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a24fe:	f000 80e2 	beq.w	80a26c6 <__adddf3+0x1ee>
 80a2502:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2506:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a250a:	bfb8      	it	lt
 80a250c:	426d      	neglt	r5, r5
 80a250e:	dd0c      	ble.n	80a252a <__adddf3+0x52>
 80a2510:	442c      	add	r4, r5
 80a2512:	ea80 0202 	eor.w	r2, r0, r2
 80a2516:	ea81 0303 	eor.w	r3, r1, r3
 80a251a:	ea82 0000 	eor.w	r0, r2, r0
 80a251e:	ea83 0101 	eor.w	r1, r3, r1
 80a2522:	ea80 0202 	eor.w	r2, r0, r2
 80a2526:	ea81 0303 	eor.w	r3, r1, r3
 80a252a:	2d36      	cmp	r5, #54	; 0x36
 80a252c:	bf88      	it	hi
 80a252e:	bd30      	pophi	{r4, r5, pc}
 80a2530:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2534:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2538:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a253c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2540:	d002      	beq.n	80a2548 <__adddf3+0x70>
 80a2542:	4240      	negs	r0, r0
 80a2544:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2548:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a254c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2550:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2554:	d002      	beq.n	80a255c <__adddf3+0x84>
 80a2556:	4252      	negs	r2, r2
 80a2558:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a255c:	ea94 0f05 	teq	r4, r5
 80a2560:	f000 80a7 	beq.w	80a26b2 <__adddf3+0x1da>
 80a2564:	f1a4 0401 	sub.w	r4, r4, #1
 80a2568:	f1d5 0e20 	rsbs	lr, r5, #32
 80a256c:	db0d      	blt.n	80a258a <__adddf3+0xb2>
 80a256e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2572:	fa22 f205 	lsr.w	r2, r2, r5
 80a2576:	1880      	adds	r0, r0, r2
 80a2578:	f141 0100 	adc.w	r1, r1, #0
 80a257c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2580:	1880      	adds	r0, r0, r2
 80a2582:	fa43 f305 	asr.w	r3, r3, r5
 80a2586:	4159      	adcs	r1, r3
 80a2588:	e00e      	b.n	80a25a8 <__adddf3+0xd0>
 80a258a:	f1a5 0520 	sub.w	r5, r5, #32
 80a258e:	f10e 0e20 	add.w	lr, lr, #32
 80a2592:	2a01      	cmp	r2, #1
 80a2594:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2598:	bf28      	it	cs
 80a259a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a259e:	fa43 f305 	asr.w	r3, r3, r5
 80a25a2:	18c0      	adds	r0, r0, r3
 80a25a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a25a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a25ac:	d507      	bpl.n	80a25be <__adddf3+0xe6>
 80a25ae:	f04f 0e00 	mov.w	lr, #0
 80a25b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a25b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a25ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80a25be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a25c2:	d31b      	bcc.n	80a25fc <__adddf3+0x124>
 80a25c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a25c8:	d30c      	bcc.n	80a25e4 <__adddf3+0x10c>
 80a25ca:	0849      	lsrs	r1, r1, #1
 80a25cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a25d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a25d4:	f104 0401 	add.w	r4, r4, #1
 80a25d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a25dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a25e0:	f080 809a 	bcs.w	80a2718 <__adddf3+0x240>
 80a25e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a25e8:	bf08      	it	eq
 80a25ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a25ee:	f150 0000 	adcs.w	r0, r0, #0
 80a25f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a25f6:	ea41 0105 	orr.w	r1, r1, r5
 80a25fa:	bd30      	pop	{r4, r5, pc}
 80a25fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2600:	4140      	adcs	r0, r0
 80a2602:	eb41 0101 	adc.w	r1, r1, r1
 80a2606:	3c01      	subs	r4, #1
 80a2608:	bf28      	it	cs
 80a260a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a260e:	d2e9      	bcs.n	80a25e4 <__adddf3+0x10c>
 80a2610:	f091 0f00 	teq	r1, #0
 80a2614:	bf04      	itt	eq
 80a2616:	4601      	moveq	r1, r0
 80a2618:	2000      	moveq	r0, #0
 80a261a:	fab1 f381 	clz	r3, r1
 80a261e:	bf08      	it	eq
 80a2620:	3320      	addeq	r3, #32
 80a2622:	f1a3 030b 	sub.w	r3, r3, #11
 80a2626:	f1b3 0220 	subs.w	r2, r3, #32
 80a262a:	da0c      	bge.n	80a2646 <__adddf3+0x16e>
 80a262c:	320c      	adds	r2, #12
 80a262e:	dd08      	ble.n	80a2642 <__adddf3+0x16a>
 80a2630:	f102 0c14 	add.w	ip, r2, #20
 80a2634:	f1c2 020c 	rsb	r2, r2, #12
 80a2638:	fa01 f00c 	lsl.w	r0, r1, ip
 80a263c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2640:	e00c      	b.n	80a265c <__adddf3+0x184>
 80a2642:	f102 0214 	add.w	r2, r2, #20
 80a2646:	bfd8      	it	le
 80a2648:	f1c2 0c20 	rsble	ip, r2, #32
 80a264c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2650:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2654:	bfdc      	itt	le
 80a2656:	ea41 010c 	orrle.w	r1, r1, ip
 80a265a:	4090      	lslle	r0, r2
 80a265c:	1ae4      	subs	r4, r4, r3
 80a265e:	bfa2      	ittt	ge
 80a2660:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2664:	4329      	orrge	r1, r5
 80a2666:	bd30      	popge	{r4, r5, pc}
 80a2668:	ea6f 0404 	mvn.w	r4, r4
 80a266c:	3c1f      	subs	r4, #31
 80a266e:	da1c      	bge.n	80a26aa <__adddf3+0x1d2>
 80a2670:	340c      	adds	r4, #12
 80a2672:	dc0e      	bgt.n	80a2692 <__adddf3+0x1ba>
 80a2674:	f104 0414 	add.w	r4, r4, #20
 80a2678:	f1c4 0220 	rsb	r2, r4, #32
 80a267c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2680:	fa01 f302 	lsl.w	r3, r1, r2
 80a2684:	ea40 0003 	orr.w	r0, r0, r3
 80a2688:	fa21 f304 	lsr.w	r3, r1, r4
 80a268c:	ea45 0103 	orr.w	r1, r5, r3
 80a2690:	bd30      	pop	{r4, r5, pc}
 80a2692:	f1c4 040c 	rsb	r4, r4, #12
 80a2696:	f1c4 0220 	rsb	r2, r4, #32
 80a269a:	fa20 f002 	lsr.w	r0, r0, r2
 80a269e:	fa01 f304 	lsl.w	r3, r1, r4
 80a26a2:	ea40 0003 	orr.w	r0, r0, r3
 80a26a6:	4629      	mov	r1, r5
 80a26a8:	bd30      	pop	{r4, r5, pc}
 80a26aa:	fa21 f004 	lsr.w	r0, r1, r4
 80a26ae:	4629      	mov	r1, r5
 80a26b0:	bd30      	pop	{r4, r5, pc}
 80a26b2:	f094 0f00 	teq	r4, #0
 80a26b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a26ba:	bf06      	itte	eq
 80a26bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a26c0:	3401      	addeq	r4, #1
 80a26c2:	3d01      	subne	r5, #1
 80a26c4:	e74e      	b.n	80a2564 <__adddf3+0x8c>
 80a26c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26ca:	bf18      	it	ne
 80a26cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a26d0:	d029      	beq.n	80a2726 <__adddf3+0x24e>
 80a26d2:	ea94 0f05 	teq	r4, r5
 80a26d6:	bf08      	it	eq
 80a26d8:	ea90 0f02 	teqeq	r0, r2
 80a26dc:	d005      	beq.n	80a26ea <__adddf3+0x212>
 80a26de:	ea54 0c00 	orrs.w	ip, r4, r0
 80a26e2:	bf04      	itt	eq
 80a26e4:	4619      	moveq	r1, r3
 80a26e6:	4610      	moveq	r0, r2
 80a26e8:	bd30      	pop	{r4, r5, pc}
 80a26ea:	ea91 0f03 	teq	r1, r3
 80a26ee:	bf1e      	ittt	ne
 80a26f0:	2100      	movne	r1, #0
 80a26f2:	2000      	movne	r0, #0
 80a26f4:	bd30      	popne	{r4, r5, pc}
 80a26f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a26fa:	d105      	bne.n	80a2708 <__adddf3+0x230>
 80a26fc:	0040      	lsls	r0, r0, #1
 80a26fe:	4149      	adcs	r1, r1
 80a2700:	bf28      	it	cs
 80a2702:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2706:	bd30      	pop	{r4, r5, pc}
 80a2708:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a270c:	bf3c      	itt	cc
 80a270e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2712:	bd30      	popcc	{r4, r5, pc}
 80a2714:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2718:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a271c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2720:	f04f 0000 	mov.w	r0, #0
 80a2724:	bd30      	pop	{r4, r5, pc}
 80a2726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a272a:	bf1a      	itte	ne
 80a272c:	4619      	movne	r1, r3
 80a272e:	4610      	movne	r0, r2
 80a2730:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2734:	bf1c      	itt	ne
 80a2736:	460b      	movne	r3, r1
 80a2738:	4602      	movne	r2, r0
 80a273a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a273e:	bf06      	itte	eq
 80a2740:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2744:	ea91 0f03 	teqeq	r1, r3
 80a2748:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a274c:	bd30      	pop	{r4, r5, pc}
 80a274e:	bf00      	nop

080a2750 <__aeabi_ui2d>:
 80a2750:	f090 0f00 	teq	r0, #0
 80a2754:	bf04      	itt	eq
 80a2756:	2100      	moveq	r1, #0
 80a2758:	4770      	bxeq	lr
 80a275a:	b530      	push	{r4, r5, lr}
 80a275c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2764:	f04f 0500 	mov.w	r5, #0
 80a2768:	f04f 0100 	mov.w	r1, #0
 80a276c:	e750      	b.n	80a2610 <__adddf3+0x138>
 80a276e:	bf00      	nop

080a2770 <__aeabi_i2d>:
 80a2770:	f090 0f00 	teq	r0, #0
 80a2774:	bf04      	itt	eq
 80a2776:	2100      	moveq	r1, #0
 80a2778:	4770      	bxeq	lr
 80a277a:	b530      	push	{r4, r5, lr}
 80a277c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2780:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2784:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2788:	bf48      	it	mi
 80a278a:	4240      	negmi	r0, r0
 80a278c:	f04f 0100 	mov.w	r1, #0
 80a2790:	e73e      	b.n	80a2610 <__adddf3+0x138>
 80a2792:	bf00      	nop

080a2794 <__aeabi_f2d>:
 80a2794:	0042      	lsls	r2, r0, #1
 80a2796:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a279a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a279e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a27a2:	bf1f      	itttt	ne
 80a27a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a27a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a27ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a27b0:	4770      	bxne	lr
 80a27b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a27b6:	bf08      	it	eq
 80a27b8:	4770      	bxeq	lr
 80a27ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a27be:	bf04      	itt	eq
 80a27c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a27c4:	4770      	bxeq	lr
 80a27c6:	b530      	push	{r4, r5, lr}
 80a27c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a27cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a27d4:	e71c      	b.n	80a2610 <__adddf3+0x138>
 80a27d6:	bf00      	nop

080a27d8 <__aeabi_ul2d>:
 80a27d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a27dc:	bf08      	it	eq
 80a27de:	4770      	bxeq	lr
 80a27e0:	b530      	push	{r4, r5, lr}
 80a27e2:	f04f 0500 	mov.w	r5, #0
 80a27e6:	e00a      	b.n	80a27fe <__aeabi_l2d+0x16>

080a27e8 <__aeabi_l2d>:
 80a27e8:	ea50 0201 	orrs.w	r2, r0, r1
 80a27ec:	bf08      	it	eq
 80a27ee:	4770      	bxeq	lr
 80a27f0:	b530      	push	{r4, r5, lr}
 80a27f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a27f6:	d502      	bpl.n	80a27fe <__aeabi_l2d+0x16>
 80a27f8:	4240      	negs	r0, r0
 80a27fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a27fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2802:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2806:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a280a:	f43f aed8 	beq.w	80a25be <__adddf3+0xe6>
 80a280e:	f04f 0203 	mov.w	r2, #3
 80a2812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2816:	bf18      	it	ne
 80a2818:	3203      	addne	r2, #3
 80a281a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a281e:	bf18      	it	ne
 80a2820:	3203      	addne	r2, #3
 80a2822:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2826:	f1c2 0320 	rsb	r3, r2, #32
 80a282a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a282e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2832:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2836:	ea40 000e 	orr.w	r0, r0, lr
 80a283a:	fa21 f102 	lsr.w	r1, r1, r2
 80a283e:	4414      	add	r4, r2
 80a2840:	e6bd      	b.n	80a25be <__adddf3+0xe6>
 80a2842:	bf00      	nop

080a2844 <__aeabi_dmul>:
 80a2844:	b570      	push	{r4, r5, r6, lr}
 80a2846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a284a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a284e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2852:	bf1d      	ittte	ne
 80a2854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2858:	ea94 0f0c 	teqne	r4, ip
 80a285c:	ea95 0f0c 	teqne	r5, ip
 80a2860:	f000 f8de 	bleq	80a2a20 <__aeabi_dmul+0x1dc>
 80a2864:	442c      	add	r4, r5
 80a2866:	ea81 0603 	eor.w	r6, r1, r3
 80a286a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a286e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2872:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2876:	bf18      	it	ne
 80a2878:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a287c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2884:	d038      	beq.n	80a28f8 <__aeabi_dmul+0xb4>
 80a2886:	fba0 ce02 	umull	ip, lr, r0, r2
 80a288a:	f04f 0500 	mov.w	r5, #0
 80a288e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2892:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2896:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a289a:	f04f 0600 	mov.w	r6, #0
 80a289e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a28a2:	f09c 0f00 	teq	ip, #0
 80a28a6:	bf18      	it	ne
 80a28a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a28ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a28b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a28b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a28b8:	d204      	bcs.n	80a28c4 <__aeabi_dmul+0x80>
 80a28ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a28be:	416d      	adcs	r5, r5
 80a28c0:	eb46 0606 	adc.w	r6, r6, r6
 80a28c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a28c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a28cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a28d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a28d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a28d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a28dc:	bf88      	it	hi
 80a28de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a28e2:	d81e      	bhi.n	80a2922 <__aeabi_dmul+0xde>
 80a28e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a28e8:	bf08      	it	eq
 80a28ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a28ee:	f150 0000 	adcs.w	r0, r0, #0
 80a28f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a28f6:	bd70      	pop	{r4, r5, r6, pc}
 80a28f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a28fc:	ea46 0101 	orr.w	r1, r6, r1
 80a2900:	ea40 0002 	orr.w	r0, r0, r2
 80a2904:	ea81 0103 	eor.w	r1, r1, r3
 80a2908:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a290c:	bfc2      	ittt	gt
 80a290e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2916:	bd70      	popgt	{r4, r5, r6, pc}
 80a2918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a291c:	f04f 0e00 	mov.w	lr, #0
 80a2920:	3c01      	subs	r4, #1
 80a2922:	f300 80ab 	bgt.w	80a2a7c <__aeabi_dmul+0x238>
 80a2926:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a292a:	bfde      	ittt	le
 80a292c:	2000      	movle	r0, #0
 80a292e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2932:	bd70      	pople	{r4, r5, r6, pc}
 80a2934:	f1c4 0400 	rsb	r4, r4, #0
 80a2938:	3c20      	subs	r4, #32
 80a293a:	da35      	bge.n	80a29a8 <__aeabi_dmul+0x164>
 80a293c:	340c      	adds	r4, #12
 80a293e:	dc1b      	bgt.n	80a2978 <__aeabi_dmul+0x134>
 80a2940:	f104 0414 	add.w	r4, r4, #20
 80a2944:	f1c4 0520 	rsb	r5, r4, #32
 80a2948:	fa00 f305 	lsl.w	r3, r0, r5
 80a294c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2950:	fa01 f205 	lsl.w	r2, r1, r5
 80a2954:	ea40 0002 	orr.w	r0, r0, r2
 80a2958:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a295c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2960:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2964:	fa21 f604 	lsr.w	r6, r1, r4
 80a2968:	eb42 0106 	adc.w	r1, r2, r6
 80a296c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2970:	bf08      	it	eq
 80a2972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2976:	bd70      	pop	{r4, r5, r6, pc}
 80a2978:	f1c4 040c 	rsb	r4, r4, #12
 80a297c:	f1c4 0520 	rsb	r5, r4, #32
 80a2980:	fa00 f304 	lsl.w	r3, r0, r4
 80a2984:	fa20 f005 	lsr.w	r0, r0, r5
 80a2988:	fa01 f204 	lsl.w	r2, r1, r4
 80a298c:	ea40 0002 	orr.w	r0, r0, r2
 80a2990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2998:	f141 0100 	adc.w	r1, r1, #0
 80a299c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a29a0:	bf08      	it	eq
 80a29a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a29a6:	bd70      	pop	{r4, r5, r6, pc}
 80a29a8:	f1c4 0520 	rsb	r5, r4, #32
 80a29ac:	fa00 f205 	lsl.w	r2, r0, r5
 80a29b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a29b4:	fa20 f304 	lsr.w	r3, r0, r4
 80a29b8:	fa01 f205 	lsl.w	r2, r1, r5
 80a29bc:	ea43 0302 	orr.w	r3, r3, r2
 80a29c0:	fa21 f004 	lsr.w	r0, r1, r4
 80a29c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a29c8:	fa21 f204 	lsr.w	r2, r1, r4
 80a29cc:	ea20 0002 	bic.w	r0, r0, r2
 80a29d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a29d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a29d8:	bf08      	it	eq
 80a29da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a29de:	bd70      	pop	{r4, r5, r6, pc}
 80a29e0:	f094 0f00 	teq	r4, #0
 80a29e4:	d10f      	bne.n	80a2a06 <__aeabi_dmul+0x1c2>
 80a29e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a29ea:	0040      	lsls	r0, r0, #1
 80a29ec:	eb41 0101 	adc.w	r1, r1, r1
 80a29f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a29f4:	bf08      	it	eq
 80a29f6:	3c01      	subeq	r4, #1
 80a29f8:	d0f7      	beq.n	80a29ea <__aeabi_dmul+0x1a6>
 80a29fa:	ea41 0106 	orr.w	r1, r1, r6
 80a29fe:	f095 0f00 	teq	r5, #0
 80a2a02:	bf18      	it	ne
 80a2a04:	4770      	bxne	lr
 80a2a06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2a0a:	0052      	lsls	r2, r2, #1
 80a2a0c:	eb43 0303 	adc.w	r3, r3, r3
 80a2a10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2a14:	bf08      	it	eq
 80a2a16:	3d01      	subeq	r5, #1
 80a2a18:	d0f7      	beq.n	80a2a0a <__aeabi_dmul+0x1c6>
 80a2a1a:	ea43 0306 	orr.w	r3, r3, r6
 80a2a1e:	4770      	bx	lr
 80a2a20:	ea94 0f0c 	teq	r4, ip
 80a2a24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2a28:	bf18      	it	ne
 80a2a2a:	ea95 0f0c 	teqne	r5, ip
 80a2a2e:	d00c      	beq.n	80a2a4a <__aeabi_dmul+0x206>
 80a2a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2a34:	bf18      	it	ne
 80a2a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2a3a:	d1d1      	bne.n	80a29e0 <__aeabi_dmul+0x19c>
 80a2a3c:	ea81 0103 	eor.w	r1, r1, r3
 80a2a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a44:	f04f 0000 	mov.w	r0, #0
 80a2a48:	bd70      	pop	{r4, r5, r6, pc}
 80a2a4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2a4e:	bf06      	itte	eq
 80a2a50:	4610      	moveq	r0, r2
 80a2a52:	4619      	moveq	r1, r3
 80a2a54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2a58:	d019      	beq.n	80a2a8e <__aeabi_dmul+0x24a>
 80a2a5a:	ea94 0f0c 	teq	r4, ip
 80a2a5e:	d102      	bne.n	80a2a66 <__aeabi_dmul+0x222>
 80a2a60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2a64:	d113      	bne.n	80a2a8e <__aeabi_dmul+0x24a>
 80a2a66:	ea95 0f0c 	teq	r5, ip
 80a2a6a:	d105      	bne.n	80a2a78 <__aeabi_dmul+0x234>
 80a2a6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2a70:	bf1c      	itt	ne
 80a2a72:	4610      	movne	r0, r2
 80a2a74:	4619      	movne	r1, r3
 80a2a76:	d10a      	bne.n	80a2a8e <__aeabi_dmul+0x24a>
 80a2a78:	ea81 0103 	eor.w	r1, r1, r3
 80a2a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a88:	f04f 0000 	mov.w	r0, #0
 80a2a8c:	bd70      	pop	{r4, r5, r6, pc}
 80a2a8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2a96:	bd70      	pop	{r4, r5, r6, pc}

080a2a98 <__aeabi_ddiv>:
 80a2a98:	b570      	push	{r4, r5, r6, lr}
 80a2a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2aa6:	bf1d      	ittte	ne
 80a2aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2aac:	ea94 0f0c 	teqne	r4, ip
 80a2ab0:	ea95 0f0c 	teqne	r5, ip
 80a2ab4:	f000 f8a7 	bleq	80a2c06 <__aeabi_ddiv+0x16e>
 80a2ab8:	eba4 0405 	sub.w	r4, r4, r5
 80a2abc:	ea81 0e03 	eor.w	lr, r1, r3
 80a2ac0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ac4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ac8:	f000 8088 	beq.w	80a2bdc <__aeabi_ddiv+0x144>
 80a2acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2ad0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2ad4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2ad8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2adc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2ae0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2ae4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2ae8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2aec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2af0:	429d      	cmp	r5, r3
 80a2af2:	bf08      	it	eq
 80a2af4:	4296      	cmpeq	r6, r2
 80a2af6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2afa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2afe:	d202      	bcs.n	80a2b06 <__aeabi_ddiv+0x6e>
 80a2b00:	085b      	lsrs	r3, r3, #1
 80a2b02:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b06:	1ab6      	subs	r6, r6, r2
 80a2b08:	eb65 0503 	sbc.w	r5, r5, r3
 80a2b0c:	085b      	lsrs	r3, r3, #1
 80a2b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2b16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2b1a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b22:	bf22      	ittt	cs
 80a2b24:	1ab6      	subcs	r6, r6, r2
 80a2b26:	4675      	movcs	r5, lr
 80a2b28:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2b2c:	085b      	lsrs	r3, r3, #1
 80a2b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b3a:	bf22      	ittt	cs
 80a2b3c:	1ab6      	subcs	r6, r6, r2
 80a2b3e:	4675      	movcs	r5, lr
 80a2b40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2b44:	085b      	lsrs	r3, r3, #1
 80a2b46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b52:	bf22      	ittt	cs
 80a2b54:	1ab6      	subcs	r6, r6, r2
 80a2b56:	4675      	movcs	r5, lr
 80a2b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2b5c:	085b      	lsrs	r3, r3, #1
 80a2b5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b62:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b6a:	bf22      	ittt	cs
 80a2b6c:	1ab6      	subcs	r6, r6, r2
 80a2b6e:	4675      	movcs	r5, lr
 80a2b70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2b74:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2b78:	d018      	beq.n	80a2bac <__aeabi_ddiv+0x114>
 80a2b7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2b7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2b82:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2b86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2b8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2b8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2b92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2b96:	d1c0      	bne.n	80a2b1a <__aeabi_ddiv+0x82>
 80a2b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2b9c:	d10b      	bne.n	80a2bb6 <__aeabi_ddiv+0x11e>
 80a2b9e:	ea41 0100 	orr.w	r1, r1, r0
 80a2ba2:	f04f 0000 	mov.w	r0, #0
 80a2ba6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2baa:	e7b6      	b.n	80a2b1a <__aeabi_ddiv+0x82>
 80a2bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2bb0:	bf04      	itt	eq
 80a2bb2:	4301      	orreq	r1, r0
 80a2bb4:	2000      	moveq	r0, #0
 80a2bb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2bba:	bf88      	it	hi
 80a2bbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bc0:	f63f aeaf 	bhi.w	80a2922 <__aeabi_dmul+0xde>
 80a2bc4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2bc8:	bf04      	itt	eq
 80a2bca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2bd2:	f150 0000 	adcs.w	r0, r0, #0
 80a2bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bda:	bd70      	pop	{r4, r5, r6, pc}
 80a2bdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2be0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2be4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2be8:	bfc2      	ittt	gt
 80a2bea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2bee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2bf2:	bd70      	popgt	{r4, r5, r6, pc}
 80a2bf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2bf8:	f04f 0e00 	mov.w	lr, #0
 80a2bfc:	3c01      	subs	r4, #1
 80a2bfe:	e690      	b.n	80a2922 <__aeabi_dmul+0xde>
 80a2c00:	ea45 0e06 	orr.w	lr, r5, r6
 80a2c04:	e68d      	b.n	80a2922 <__aeabi_dmul+0xde>
 80a2c06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2c0a:	ea94 0f0c 	teq	r4, ip
 80a2c0e:	bf08      	it	eq
 80a2c10:	ea95 0f0c 	teqeq	r5, ip
 80a2c14:	f43f af3b 	beq.w	80a2a8e <__aeabi_dmul+0x24a>
 80a2c18:	ea94 0f0c 	teq	r4, ip
 80a2c1c:	d10a      	bne.n	80a2c34 <__aeabi_ddiv+0x19c>
 80a2c1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2c22:	f47f af34 	bne.w	80a2a8e <__aeabi_dmul+0x24a>
 80a2c26:	ea95 0f0c 	teq	r5, ip
 80a2c2a:	f47f af25 	bne.w	80a2a78 <__aeabi_dmul+0x234>
 80a2c2e:	4610      	mov	r0, r2
 80a2c30:	4619      	mov	r1, r3
 80a2c32:	e72c      	b.n	80a2a8e <__aeabi_dmul+0x24a>
 80a2c34:	ea95 0f0c 	teq	r5, ip
 80a2c38:	d106      	bne.n	80a2c48 <__aeabi_ddiv+0x1b0>
 80a2c3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2c3e:	f43f aefd 	beq.w	80a2a3c <__aeabi_dmul+0x1f8>
 80a2c42:	4610      	mov	r0, r2
 80a2c44:	4619      	mov	r1, r3
 80a2c46:	e722      	b.n	80a2a8e <__aeabi_dmul+0x24a>
 80a2c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2c4c:	bf18      	it	ne
 80a2c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2c52:	f47f aec5 	bne.w	80a29e0 <__aeabi_dmul+0x19c>
 80a2c56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2c5a:	f47f af0d 	bne.w	80a2a78 <__aeabi_dmul+0x234>
 80a2c5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2c62:	f47f aeeb 	bne.w	80a2a3c <__aeabi_dmul+0x1f8>
 80a2c66:	e712      	b.n	80a2a8e <__aeabi_dmul+0x24a>

080a2c68 <__aeabi_d2uiz>:
 80a2c68:	004a      	lsls	r2, r1, #1
 80a2c6a:	d211      	bcs.n	80a2c90 <__aeabi_d2uiz+0x28>
 80a2c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2c70:	d211      	bcs.n	80a2c96 <__aeabi_d2uiz+0x2e>
 80a2c72:	d50d      	bpl.n	80a2c90 <__aeabi_d2uiz+0x28>
 80a2c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2c7c:	d40e      	bmi.n	80a2c9c <__aeabi_d2uiz+0x34>
 80a2c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2c8a:	fa23 f002 	lsr.w	r0, r3, r2
 80a2c8e:	4770      	bx	lr
 80a2c90:	f04f 0000 	mov.w	r0, #0
 80a2c94:	4770      	bx	lr
 80a2c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2c9a:	d102      	bne.n	80a2ca2 <__aeabi_d2uiz+0x3a>
 80a2c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2ca0:	4770      	bx	lr
 80a2ca2:	f04f 0000 	mov.w	r0, #0
 80a2ca6:	4770      	bx	lr

080a2ca8 <__aeabi_fmul>:
 80a2ca8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2cac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2cb0:	bf1e      	ittt	ne
 80a2cb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2cb6:	ea92 0f0c 	teqne	r2, ip
 80a2cba:	ea93 0f0c 	teqne	r3, ip
 80a2cbe:	d06f      	beq.n	80a2da0 <__aeabi_fmul+0xf8>
 80a2cc0:	441a      	add	r2, r3
 80a2cc2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2cc6:	0240      	lsls	r0, r0, #9
 80a2cc8:	bf18      	it	ne
 80a2cca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2cce:	d01e      	beq.n	80a2d0e <__aeabi_fmul+0x66>
 80a2cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2cd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2cd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2cdc:	fba0 3101 	umull	r3, r1, r0, r1
 80a2ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2ce4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2ce8:	bf3e      	ittt	cc
 80a2cea:	0049      	lslcc	r1, r1, #1
 80a2cec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2cf0:	005b      	lslcc	r3, r3, #1
 80a2cf2:	ea40 0001 	orr.w	r0, r0, r1
 80a2cf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2cfa:	2afd      	cmp	r2, #253	; 0xfd
 80a2cfc:	d81d      	bhi.n	80a2d3a <__aeabi_fmul+0x92>
 80a2cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2d02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2d06:	bf08      	it	eq
 80a2d08:	f020 0001 	biceq.w	r0, r0, #1
 80a2d0c:	4770      	bx	lr
 80a2d0e:	f090 0f00 	teq	r0, #0
 80a2d12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2d16:	bf08      	it	eq
 80a2d18:	0249      	lsleq	r1, r1, #9
 80a2d1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2d1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2d22:	3a7f      	subs	r2, #127	; 0x7f
 80a2d24:	bfc2      	ittt	gt
 80a2d26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2d2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2d2e:	4770      	bxgt	lr
 80a2d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2d34:	f04f 0300 	mov.w	r3, #0
 80a2d38:	3a01      	subs	r2, #1
 80a2d3a:	dc5d      	bgt.n	80a2df8 <__aeabi_fmul+0x150>
 80a2d3c:	f112 0f19 	cmn.w	r2, #25
 80a2d40:	bfdc      	itt	le
 80a2d42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2d46:	4770      	bxle	lr
 80a2d48:	f1c2 0200 	rsb	r2, r2, #0
 80a2d4c:	0041      	lsls	r1, r0, #1
 80a2d4e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2d52:	f1c2 0220 	rsb	r2, r2, #32
 80a2d56:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2d5a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2d5e:	f140 0000 	adc.w	r0, r0, #0
 80a2d62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2d66:	bf08      	it	eq
 80a2d68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2d6c:	4770      	bx	lr
 80a2d6e:	f092 0f00 	teq	r2, #0
 80a2d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2d76:	bf02      	ittt	eq
 80a2d78:	0040      	lsleq	r0, r0, #1
 80a2d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2d7e:	3a01      	subeq	r2, #1
 80a2d80:	d0f9      	beq.n	80a2d76 <__aeabi_fmul+0xce>
 80a2d82:	ea40 000c 	orr.w	r0, r0, ip
 80a2d86:	f093 0f00 	teq	r3, #0
 80a2d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2d8e:	bf02      	ittt	eq
 80a2d90:	0049      	lsleq	r1, r1, #1
 80a2d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2d96:	3b01      	subeq	r3, #1
 80a2d98:	d0f9      	beq.n	80a2d8e <__aeabi_fmul+0xe6>
 80a2d9a:	ea41 010c 	orr.w	r1, r1, ip
 80a2d9e:	e78f      	b.n	80a2cc0 <__aeabi_fmul+0x18>
 80a2da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2da4:	ea92 0f0c 	teq	r2, ip
 80a2da8:	bf18      	it	ne
 80a2daa:	ea93 0f0c 	teqne	r3, ip
 80a2dae:	d00a      	beq.n	80a2dc6 <__aeabi_fmul+0x11e>
 80a2db0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2db4:	bf18      	it	ne
 80a2db6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2dba:	d1d8      	bne.n	80a2d6e <__aeabi_fmul+0xc6>
 80a2dbc:	ea80 0001 	eor.w	r0, r0, r1
 80a2dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2dc4:	4770      	bx	lr
 80a2dc6:	f090 0f00 	teq	r0, #0
 80a2dca:	bf17      	itett	ne
 80a2dcc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2dd0:	4608      	moveq	r0, r1
 80a2dd2:	f091 0f00 	teqne	r1, #0
 80a2dd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2dda:	d014      	beq.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2ddc:	ea92 0f0c 	teq	r2, ip
 80a2de0:	d101      	bne.n	80a2de6 <__aeabi_fmul+0x13e>
 80a2de2:	0242      	lsls	r2, r0, #9
 80a2de4:	d10f      	bne.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2de6:	ea93 0f0c 	teq	r3, ip
 80a2dea:	d103      	bne.n	80a2df4 <__aeabi_fmul+0x14c>
 80a2dec:	024b      	lsls	r3, r1, #9
 80a2dee:	bf18      	it	ne
 80a2df0:	4608      	movne	r0, r1
 80a2df2:	d108      	bne.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2df4:	ea80 0001 	eor.w	r0, r0, r1
 80a2df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2dfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2e04:	4770      	bx	lr
 80a2e06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2e0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2e0e:	4770      	bx	lr

080a2e10 <__aeabi_fdiv>:
 80a2e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2e18:	bf1e      	ittt	ne
 80a2e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2e1e:	ea92 0f0c 	teqne	r2, ip
 80a2e22:	ea93 0f0c 	teqne	r3, ip
 80a2e26:	d069      	beq.n	80a2efc <__aeabi_fdiv+0xec>
 80a2e28:	eba2 0203 	sub.w	r2, r2, r3
 80a2e2c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2e30:	0249      	lsls	r1, r1, #9
 80a2e32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2e36:	d037      	beq.n	80a2ea8 <__aeabi_fdiv+0x98>
 80a2e38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2e3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2e40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2e48:	428b      	cmp	r3, r1
 80a2e4a:	bf38      	it	cc
 80a2e4c:	005b      	lslcc	r3, r3, #1
 80a2e4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2e52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2e56:	428b      	cmp	r3, r1
 80a2e58:	bf24      	itt	cs
 80a2e5a:	1a5b      	subcs	r3, r3, r1
 80a2e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2e64:	bf24      	itt	cs
 80a2e66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2e6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2e72:	bf24      	itt	cs
 80a2e74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2e78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2e80:	bf24      	itt	cs
 80a2e82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2e86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e8a:	011b      	lsls	r3, r3, #4
 80a2e8c:	bf18      	it	ne
 80a2e8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2e92:	d1e0      	bne.n	80a2e56 <__aeabi_fdiv+0x46>
 80a2e94:	2afd      	cmp	r2, #253	; 0xfd
 80a2e96:	f63f af50 	bhi.w	80a2d3a <__aeabi_fmul+0x92>
 80a2e9a:	428b      	cmp	r3, r1
 80a2e9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ea0:	bf08      	it	eq
 80a2ea2:	f020 0001 	biceq.w	r0, r0, #1
 80a2ea6:	4770      	bx	lr
 80a2ea8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2eac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2eb0:	327f      	adds	r2, #127	; 0x7f
 80a2eb2:	bfc2      	ittt	gt
 80a2eb4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2eb8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2ebc:	4770      	bxgt	lr
 80a2ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ec2:	f04f 0300 	mov.w	r3, #0
 80a2ec6:	3a01      	subs	r2, #1
 80a2ec8:	e737      	b.n	80a2d3a <__aeabi_fmul+0x92>
 80a2eca:	f092 0f00 	teq	r2, #0
 80a2ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2ed2:	bf02      	ittt	eq
 80a2ed4:	0040      	lsleq	r0, r0, #1
 80a2ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2eda:	3a01      	subeq	r2, #1
 80a2edc:	d0f9      	beq.n	80a2ed2 <__aeabi_fdiv+0xc2>
 80a2ede:	ea40 000c 	orr.w	r0, r0, ip
 80a2ee2:	f093 0f00 	teq	r3, #0
 80a2ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2eea:	bf02      	ittt	eq
 80a2eec:	0049      	lsleq	r1, r1, #1
 80a2eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2ef2:	3b01      	subeq	r3, #1
 80a2ef4:	d0f9      	beq.n	80a2eea <__aeabi_fdiv+0xda>
 80a2ef6:	ea41 010c 	orr.w	r1, r1, ip
 80a2efa:	e795      	b.n	80a2e28 <__aeabi_fdiv+0x18>
 80a2efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2f00:	ea92 0f0c 	teq	r2, ip
 80a2f04:	d108      	bne.n	80a2f18 <__aeabi_fdiv+0x108>
 80a2f06:	0242      	lsls	r2, r0, #9
 80a2f08:	f47f af7d 	bne.w	80a2e06 <__aeabi_fmul+0x15e>
 80a2f0c:	ea93 0f0c 	teq	r3, ip
 80a2f10:	f47f af70 	bne.w	80a2df4 <__aeabi_fmul+0x14c>
 80a2f14:	4608      	mov	r0, r1
 80a2f16:	e776      	b.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2f18:	ea93 0f0c 	teq	r3, ip
 80a2f1c:	d104      	bne.n	80a2f28 <__aeabi_fdiv+0x118>
 80a2f1e:	024b      	lsls	r3, r1, #9
 80a2f20:	f43f af4c 	beq.w	80a2dbc <__aeabi_fmul+0x114>
 80a2f24:	4608      	mov	r0, r1
 80a2f26:	e76e      	b.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2f2c:	bf18      	it	ne
 80a2f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2f32:	d1ca      	bne.n	80a2eca <__aeabi_fdiv+0xba>
 80a2f34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2f38:	f47f af5c 	bne.w	80a2df4 <__aeabi_fmul+0x14c>
 80a2f3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2f40:	f47f af3c 	bne.w	80a2dbc <__aeabi_fmul+0x114>
 80a2f44:	e75f      	b.n	80a2e06 <__aeabi_fmul+0x15e>
 80a2f46:	bf00      	nop

080a2f48 <__gesf2>:
 80a2f48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2f4c:	e006      	b.n	80a2f5c <__cmpsf2+0x4>
 80a2f4e:	bf00      	nop

080a2f50 <__lesf2>:
 80a2f50:	f04f 0c01 	mov.w	ip, #1
 80a2f54:	e002      	b.n	80a2f5c <__cmpsf2+0x4>
 80a2f56:	bf00      	nop

080a2f58 <__cmpsf2>:
 80a2f58:	f04f 0c01 	mov.w	ip, #1
 80a2f5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2f64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2f68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2f6c:	bf18      	it	ne
 80a2f6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2f72:	d011      	beq.n	80a2f98 <__cmpsf2+0x40>
 80a2f74:	b001      	add	sp, #4
 80a2f76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2f7a:	bf18      	it	ne
 80a2f7c:	ea90 0f01 	teqne	r0, r1
 80a2f80:	bf58      	it	pl
 80a2f82:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2f86:	bf88      	it	hi
 80a2f88:	17c8      	asrhi	r0, r1, #31
 80a2f8a:	bf38      	it	cc
 80a2f8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2f90:	bf18      	it	ne
 80a2f92:	f040 0001 	orrne.w	r0, r0, #1
 80a2f96:	4770      	bx	lr
 80a2f98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2f9c:	d102      	bne.n	80a2fa4 <__cmpsf2+0x4c>
 80a2f9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2fa2:	d105      	bne.n	80a2fb0 <__cmpsf2+0x58>
 80a2fa4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2fa8:	d1e4      	bne.n	80a2f74 <__cmpsf2+0x1c>
 80a2faa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2fae:	d0e1      	beq.n	80a2f74 <__cmpsf2+0x1c>
 80a2fb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2fb4:	4770      	bx	lr
 80a2fb6:	bf00      	nop

080a2fb8 <__aeabi_cfrcmple>:
 80a2fb8:	4684      	mov	ip, r0
 80a2fba:	4608      	mov	r0, r1
 80a2fbc:	4661      	mov	r1, ip
 80a2fbe:	e7ff      	b.n	80a2fc0 <__aeabi_cfcmpeq>

080a2fc0 <__aeabi_cfcmpeq>:
 80a2fc0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2fc2:	f7ff ffc9 	bl	80a2f58 <__cmpsf2>
 80a2fc6:	2800      	cmp	r0, #0
 80a2fc8:	bf48      	it	mi
 80a2fca:	f110 0f00 	cmnmi.w	r0, #0
 80a2fce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2fd0 <__aeabi_fcmpeq>:
 80a2fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fd4:	f7ff fff4 	bl	80a2fc0 <__aeabi_cfcmpeq>
 80a2fd8:	bf0c      	ite	eq
 80a2fda:	2001      	moveq	r0, #1
 80a2fdc:	2000      	movne	r0, #0
 80a2fde:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fe2:	bf00      	nop

080a2fe4 <__aeabi_fcmplt>:
 80a2fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fe8:	f7ff ffea 	bl	80a2fc0 <__aeabi_cfcmpeq>
 80a2fec:	bf34      	ite	cc
 80a2fee:	2001      	movcc	r0, #1
 80a2ff0:	2000      	movcs	r0, #0
 80a2ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ff6:	bf00      	nop

080a2ff8 <__aeabi_fcmple>:
 80a2ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ffc:	f7ff ffe0 	bl	80a2fc0 <__aeabi_cfcmpeq>
 80a3000:	bf94      	ite	ls
 80a3002:	2001      	movls	r0, #1
 80a3004:	2000      	movhi	r0, #0
 80a3006:	f85d fb08 	ldr.w	pc, [sp], #8
 80a300a:	bf00      	nop

080a300c <__aeabi_fcmpge>:
 80a300c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3010:	f7ff ffd2 	bl	80a2fb8 <__aeabi_cfrcmple>
 80a3014:	bf94      	ite	ls
 80a3016:	2001      	movls	r0, #1
 80a3018:	2000      	movhi	r0, #0
 80a301a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a301e:	bf00      	nop

080a3020 <__aeabi_fcmpgt>:
 80a3020:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3024:	f7ff ffc8 	bl	80a2fb8 <__aeabi_cfrcmple>
 80a3028:	bf34      	ite	cc
 80a302a:	2001      	movcc	r0, #1
 80a302c:	2000      	movcs	r0, #0
 80a302e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3032:	bf00      	nop

080a3034 <__aeabi_f2lz>:
 80a3034:	b510      	push	{r4, lr}
 80a3036:	2100      	movs	r1, #0
 80a3038:	4604      	mov	r4, r0
 80a303a:	f7ff ffd3 	bl	80a2fe4 <__aeabi_fcmplt>
 80a303e:	b920      	cbnz	r0, 80a304a <__aeabi_f2lz+0x16>
 80a3040:	4620      	mov	r0, r4
 80a3042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3046:	f000 b809 	b.w	80a305c <__aeabi_f2ulz>
 80a304a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a304e:	f000 f805 	bl	80a305c <__aeabi_f2ulz>
 80a3052:	4240      	negs	r0, r0
 80a3054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3058:	bd10      	pop	{r4, pc}
 80a305a:	bf00      	nop

080a305c <__aeabi_f2ulz>:
 80a305c:	b5d0      	push	{r4, r6, r7, lr}
 80a305e:	f7ff fb99 	bl	80a2794 <__aeabi_f2d>
 80a3062:	2200      	movs	r2, #0
 80a3064:	4b0b      	ldr	r3, [pc, #44]	; (80a3094 <__aeabi_f2ulz+0x38>)
 80a3066:	4606      	mov	r6, r0
 80a3068:	460f      	mov	r7, r1
 80a306a:	f7ff fbeb 	bl	80a2844 <__aeabi_dmul>
 80a306e:	f7ff fdfb 	bl	80a2c68 <__aeabi_d2uiz>
 80a3072:	4604      	mov	r4, r0
 80a3074:	f7ff fb6c 	bl	80a2750 <__aeabi_ui2d>
 80a3078:	2200      	movs	r2, #0
 80a307a:	4b07      	ldr	r3, [pc, #28]	; (80a3098 <__aeabi_f2ulz+0x3c>)
 80a307c:	f7ff fbe2 	bl	80a2844 <__aeabi_dmul>
 80a3080:	4602      	mov	r2, r0
 80a3082:	460b      	mov	r3, r1
 80a3084:	4630      	mov	r0, r6
 80a3086:	4639      	mov	r1, r7
 80a3088:	f7ff fa24 	bl	80a24d4 <__aeabi_dsub>
 80a308c:	f7ff fdec 	bl	80a2c68 <__aeabi_d2uiz>
 80a3090:	4621      	mov	r1, r4
 80a3092:	bdd0      	pop	{r4, r6, r7, pc}
 80a3094:	3df00000 	.word	0x3df00000
 80a3098:	41f00000 	.word	0x41f00000

080a309c <__udivmoddi4>:
 80a309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a30a0:	9e08      	ldr	r6, [sp, #32]
 80a30a2:	460d      	mov	r5, r1
 80a30a4:	4604      	mov	r4, r0
 80a30a6:	468e      	mov	lr, r1
 80a30a8:	2b00      	cmp	r3, #0
 80a30aa:	f040 8083 	bne.w	80a31b4 <__udivmoddi4+0x118>
 80a30ae:	428a      	cmp	r2, r1
 80a30b0:	4617      	mov	r7, r2
 80a30b2:	d947      	bls.n	80a3144 <__udivmoddi4+0xa8>
 80a30b4:	fab2 f382 	clz	r3, r2
 80a30b8:	b14b      	cbz	r3, 80a30ce <__udivmoddi4+0x32>
 80a30ba:	f1c3 0120 	rsb	r1, r3, #32
 80a30be:	fa05 fe03 	lsl.w	lr, r5, r3
 80a30c2:	fa20 f101 	lsr.w	r1, r0, r1
 80a30c6:	409f      	lsls	r7, r3
 80a30c8:	ea41 0e0e 	orr.w	lr, r1, lr
 80a30cc:	409c      	lsls	r4, r3
 80a30ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a30d2:	fbbe fcf8 	udiv	ip, lr, r8
 80a30d6:	fa1f f987 	uxth.w	r9, r7
 80a30da:	fb08 e21c 	mls	r2, r8, ip, lr
 80a30de:	fb0c f009 	mul.w	r0, ip, r9
 80a30e2:	0c21      	lsrs	r1, r4, #16
 80a30e4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a30e8:	4290      	cmp	r0, r2
 80a30ea:	d90a      	bls.n	80a3102 <__udivmoddi4+0x66>
 80a30ec:	18ba      	adds	r2, r7, r2
 80a30ee:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a30f2:	f080 8118 	bcs.w	80a3326 <__udivmoddi4+0x28a>
 80a30f6:	4290      	cmp	r0, r2
 80a30f8:	f240 8115 	bls.w	80a3326 <__udivmoddi4+0x28a>
 80a30fc:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3100:	443a      	add	r2, r7
 80a3102:	1a12      	subs	r2, r2, r0
 80a3104:	fbb2 f0f8 	udiv	r0, r2, r8
 80a3108:	fb08 2210 	mls	r2, r8, r0, r2
 80a310c:	fb00 f109 	mul.w	r1, r0, r9
 80a3110:	b2a4      	uxth	r4, r4
 80a3112:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3116:	42a1      	cmp	r1, r4
 80a3118:	d909      	bls.n	80a312e <__udivmoddi4+0x92>
 80a311a:	193c      	adds	r4, r7, r4
 80a311c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3120:	f080 8103 	bcs.w	80a332a <__udivmoddi4+0x28e>
 80a3124:	42a1      	cmp	r1, r4
 80a3126:	f240 8100 	bls.w	80a332a <__udivmoddi4+0x28e>
 80a312a:	3802      	subs	r0, #2
 80a312c:	443c      	add	r4, r7
 80a312e:	1a64      	subs	r4, r4, r1
 80a3130:	2100      	movs	r1, #0
 80a3132:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3136:	b11e      	cbz	r6, 80a3140 <__udivmoddi4+0xa4>
 80a3138:	2200      	movs	r2, #0
 80a313a:	40dc      	lsrs	r4, r3
 80a313c:	e9c6 4200 	strd	r4, r2, [r6]
 80a3140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3144:	b902      	cbnz	r2, 80a3148 <__udivmoddi4+0xac>
 80a3146:	deff      	udf	#255	; 0xff
 80a3148:	fab2 f382 	clz	r3, r2
 80a314c:	2b00      	cmp	r3, #0
 80a314e:	d14f      	bne.n	80a31f0 <__udivmoddi4+0x154>
 80a3150:	1a8d      	subs	r5, r1, r2
 80a3152:	2101      	movs	r1, #1
 80a3154:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3158:	fa1f f882 	uxth.w	r8, r2
 80a315c:	fbb5 fcfe 	udiv	ip, r5, lr
 80a3160:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3164:	fb08 f00c 	mul.w	r0, r8, ip
 80a3168:	0c22      	lsrs	r2, r4, #16
 80a316a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a316e:	42a8      	cmp	r0, r5
 80a3170:	d907      	bls.n	80a3182 <__udivmoddi4+0xe6>
 80a3172:	197d      	adds	r5, r7, r5
 80a3174:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80a3178:	d202      	bcs.n	80a3180 <__udivmoddi4+0xe4>
 80a317a:	42a8      	cmp	r0, r5
 80a317c:	f200 80e9 	bhi.w	80a3352 <__udivmoddi4+0x2b6>
 80a3180:	4694      	mov	ip, r2
 80a3182:	1a2d      	subs	r5, r5, r0
 80a3184:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3188:	fb0e 5510 	mls	r5, lr, r0, r5
 80a318c:	fb08 f800 	mul.w	r8, r8, r0
 80a3190:	b2a4      	uxth	r4, r4
 80a3192:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3196:	45a0      	cmp	r8, r4
 80a3198:	d907      	bls.n	80a31aa <__udivmoddi4+0x10e>
 80a319a:	193c      	adds	r4, r7, r4
 80a319c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a31a0:	d202      	bcs.n	80a31a8 <__udivmoddi4+0x10c>
 80a31a2:	45a0      	cmp	r8, r4
 80a31a4:	f200 80d9 	bhi.w	80a335a <__udivmoddi4+0x2be>
 80a31a8:	4610      	mov	r0, r2
 80a31aa:	eba4 0408 	sub.w	r4, r4, r8
 80a31ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a31b2:	e7c0      	b.n	80a3136 <__udivmoddi4+0x9a>
 80a31b4:	428b      	cmp	r3, r1
 80a31b6:	d908      	bls.n	80a31ca <__udivmoddi4+0x12e>
 80a31b8:	2e00      	cmp	r6, #0
 80a31ba:	f000 80b1 	beq.w	80a3320 <__udivmoddi4+0x284>
 80a31be:	2100      	movs	r1, #0
 80a31c0:	e9c6 0500 	strd	r0, r5, [r6]
 80a31c4:	4608      	mov	r0, r1
 80a31c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a31ca:	fab3 f183 	clz	r1, r3
 80a31ce:	2900      	cmp	r1, #0
 80a31d0:	d14b      	bne.n	80a326a <__udivmoddi4+0x1ce>
 80a31d2:	42ab      	cmp	r3, r5
 80a31d4:	d302      	bcc.n	80a31dc <__udivmoddi4+0x140>
 80a31d6:	4282      	cmp	r2, r0
 80a31d8:	f200 80b9 	bhi.w	80a334e <__udivmoddi4+0x2b2>
 80a31dc:	1a84      	subs	r4, r0, r2
 80a31de:	eb65 0303 	sbc.w	r3, r5, r3
 80a31e2:	2001      	movs	r0, #1
 80a31e4:	469e      	mov	lr, r3
 80a31e6:	2e00      	cmp	r6, #0
 80a31e8:	d0aa      	beq.n	80a3140 <__udivmoddi4+0xa4>
 80a31ea:	e9c6 4e00 	strd	r4, lr, [r6]
 80a31ee:	e7a7      	b.n	80a3140 <__udivmoddi4+0xa4>
 80a31f0:	409f      	lsls	r7, r3
 80a31f2:	f1c3 0220 	rsb	r2, r3, #32
 80a31f6:	40d1      	lsrs	r1, r2
 80a31f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a31fc:	fbb1 f0fe 	udiv	r0, r1, lr
 80a3200:	fa1f f887 	uxth.w	r8, r7
 80a3204:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3208:	fa24 f202 	lsr.w	r2, r4, r2
 80a320c:	409d      	lsls	r5, r3
 80a320e:	fb00 fc08 	mul.w	ip, r0, r8
 80a3212:	432a      	orrs	r2, r5
 80a3214:	0c15      	lsrs	r5, r2, #16
 80a3216:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a321a:	45ac      	cmp	ip, r5
 80a321c:	fa04 f403 	lsl.w	r4, r4, r3
 80a3220:	d909      	bls.n	80a3236 <__udivmoddi4+0x19a>
 80a3222:	197d      	adds	r5, r7, r5
 80a3224:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a3228:	f080 808f 	bcs.w	80a334a <__udivmoddi4+0x2ae>
 80a322c:	45ac      	cmp	ip, r5
 80a322e:	f240 808c 	bls.w	80a334a <__udivmoddi4+0x2ae>
 80a3232:	3802      	subs	r0, #2
 80a3234:	443d      	add	r5, r7
 80a3236:	eba5 050c 	sub.w	r5, r5, ip
 80a323a:	fbb5 f1fe 	udiv	r1, r5, lr
 80a323e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a3242:	fb01 f908 	mul.w	r9, r1, r8
 80a3246:	b295      	uxth	r5, r2
 80a3248:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a324c:	45a9      	cmp	r9, r5
 80a324e:	d907      	bls.n	80a3260 <__udivmoddi4+0x1c4>
 80a3250:	197d      	adds	r5, r7, r5
 80a3252:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80a3256:	d274      	bcs.n	80a3342 <__udivmoddi4+0x2a6>
 80a3258:	45a9      	cmp	r9, r5
 80a325a:	d972      	bls.n	80a3342 <__udivmoddi4+0x2a6>
 80a325c:	3902      	subs	r1, #2
 80a325e:	443d      	add	r5, r7
 80a3260:	eba5 0509 	sub.w	r5, r5, r9
 80a3264:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3268:	e778      	b.n	80a315c <__udivmoddi4+0xc0>
 80a326a:	f1c1 0720 	rsb	r7, r1, #32
 80a326e:	408b      	lsls	r3, r1
 80a3270:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3274:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3278:	fa25 f407 	lsr.w	r4, r5, r7
 80a327c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a3280:	fbb4 f9fe 	udiv	r9, r4, lr
 80a3284:	fa1f f88c 	uxth.w	r8, ip
 80a3288:	fb0e 4419 	mls	r4, lr, r9, r4
 80a328c:	fa20 f307 	lsr.w	r3, r0, r7
 80a3290:	fb09 fa08 	mul.w	sl, r9, r8
 80a3294:	408d      	lsls	r5, r1
 80a3296:	431d      	orrs	r5, r3
 80a3298:	0c2b      	lsrs	r3, r5, #16
 80a329a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a329e:	45a2      	cmp	sl, r4
 80a32a0:	fa02 f201 	lsl.w	r2, r2, r1
 80a32a4:	fa00 f301 	lsl.w	r3, r0, r1
 80a32a8:	d909      	bls.n	80a32be <__udivmoddi4+0x222>
 80a32aa:	eb1c 0404 	adds.w	r4, ip, r4
 80a32ae:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a32b2:	d248      	bcs.n	80a3346 <__udivmoddi4+0x2aa>
 80a32b4:	45a2      	cmp	sl, r4
 80a32b6:	d946      	bls.n	80a3346 <__udivmoddi4+0x2aa>
 80a32b8:	f1a9 0902 	sub.w	r9, r9, #2
 80a32bc:	4464      	add	r4, ip
 80a32be:	eba4 040a 	sub.w	r4, r4, sl
 80a32c2:	fbb4 f0fe 	udiv	r0, r4, lr
 80a32c6:	fb0e 4410 	mls	r4, lr, r0, r4
 80a32ca:	fb00 fa08 	mul.w	sl, r0, r8
 80a32ce:	b2ad      	uxth	r5, r5
 80a32d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a32d4:	45a2      	cmp	sl, r4
 80a32d6:	d908      	bls.n	80a32ea <__udivmoddi4+0x24e>
 80a32d8:	eb1c 0404 	adds.w	r4, ip, r4
 80a32dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a32e0:	d22d      	bcs.n	80a333e <__udivmoddi4+0x2a2>
 80a32e2:	45a2      	cmp	sl, r4
 80a32e4:	d92b      	bls.n	80a333e <__udivmoddi4+0x2a2>
 80a32e6:	3802      	subs	r0, #2
 80a32e8:	4464      	add	r4, ip
 80a32ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a32ee:	fba0 8902 	umull	r8, r9, r0, r2
 80a32f2:	eba4 040a 	sub.w	r4, r4, sl
 80a32f6:	454c      	cmp	r4, r9
 80a32f8:	46c6      	mov	lr, r8
 80a32fa:	464d      	mov	r5, r9
 80a32fc:	d319      	bcc.n	80a3332 <__udivmoddi4+0x296>
 80a32fe:	d016      	beq.n	80a332e <__udivmoddi4+0x292>
 80a3300:	b15e      	cbz	r6, 80a331a <__udivmoddi4+0x27e>
 80a3302:	ebb3 020e 	subs.w	r2, r3, lr
 80a3306:	eb64 0405 	sbc.w	r4, r4, r5
 80a330a:	fa04 f707 	lsl.w	r7, r4, r7
 80a330e:	fa22 f301 	lsr.w	r3, r2, r1
 80a3312:	431f      	orrs	r7, r3
 80a3314:	40cc      	lsrs	r4, r1
 80a3316:	e9c6 7400 	strd	r7, r4, [r6]
 80a331a:	2100      	movs	r1, #0
 80a331c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3320:	4631      	mov	r1, r6
 80a3322:	4630      	mov	r0, r6
 80a3324:	e70c      	b.n	80a3140 <__udivmoddi4+0xa4>
 80a3326:	468c      	mov	ip, r1
 80a3328:	e6eb      	b.n	80a3102 <__udivmoddi4+0x66>
 80a332a:	4610      	mov	r0, r2
 80a332c:	e6ff      	b.n	80a312e <__udivmoddi4+0x92>
 80a332e:	4543      	cmp	r3, r8
 80a3330:	d2e6      	bcs.n	80a3300 <__udivmoddi4+0x264>
 80a3332:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3336:	eb69 050c 	sbc.w	r5, r9, ip
 80a333a:	3801      	subs	r0, #1
 80a333c:	e7e0      	b.n	80a3300 <__udivmoddi4+0x264>
 80a333e:	4628      	mov	r0, r5
 80a3340:	e7d3      	b.n	80a32ea <__udivmoddi4+0x24e>
 80a3342:	4611      	mov	r1, r2
 80a3344:	e78c      	b.n	80a3260 <__udivmoddi4+0x1c4>
 80a3346:	4681      	mov	r9, r0
 80a3348:	e7b9      	b.n	80a32be <__udivmoddi4+0x222>
 80a334a:	4608      	mov	r0, r1
 80a334c:	e773      	b.n	80a3236 <__udivmoddi4+0x19a>
 80a334e:	4608      	mov	r0, r1
 80a3350:	e749      	b.n	80a31e6 <__udivmoddi4+0x14a>
 80a3352:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3356:	443d      	add	r5, r7
 80a3358:	e713      	b.n	80a3182 <__udivmoddi4+0xe6>
 80a335a:	3802      	subs	r0, #2
 80a335c:	443c      	add	r4, r7
 80a335e:	e724      	b.n	80a31aa <__udivmoddi4+0x10e>

080a3360 <__aeabi_idiv0>:
 80a3360:	4770      	bx	lr
 80a3362:	bf00      	nop

080a3364 <asctime_r>:
 80a3364:	b510      	push	{r4, lr}
 80a3366:	460c      	mov	r4, r1
 80a3368:	6941      	ldr	r1, [r0, #20]
 80a336a:	b086      	sub	sp, #24
 80a336c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a3370:	6903      	ldr	r3, [r0, #16]
 80a3372:	6982      	ldr	r2, [r0, #24]
 80a3374:	9104      	str	r1, [sp, #16]
 80a3376:	6801      	ldr	r1, [r0, #0]
 80a3378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a337c:	9103      	str	r1, [sp, #12]
 80a337e:	6841      	ldr	r1, [r0, #4]
 80a3380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a3384:	9102      	str	r1, [sp, #8]
 80a3386:	6881      	ldr	r1, [r0, #8]
 80a3388:	9101      	str	r1, [sp, #4]
 80a338a:	68c1      	ldr	r1, [r0, #12]
 80a338c:	4620      	mov	r0, r4
 80a338e:	9100      	str	r1, [sp, #0]
 80a3390:	4904      	ldr	r1, [pc, #16]	; (80a33a4 <asctime_r+0x40>)
 80a3392:	440b      	add	r3, r1
 80a3394:	4904      	ldr	r1, [pc, #16]	; (80a33a8 <asctime_r+0x44>)
 80a3396:	440a      	add	r2, r1
 80a3398:	4904      	ldr	r1, [pc, #16]	; (80a33ac <asctime_r+0x48>)
 80a339a:	f7fd fed9 	bl	80a1150 <siprintf>
 80a339e:	4620      	mov	r0, r4
 80a33a0:	b006      	add	sp, #24
 80a33a2:	bd10      	pop	{r4, pc}
 80a33a4:	080a4292 	.word	0x080a4292
 80a33a8:	080a427d 	.word	0x080a427d
 80a33ac:	080a425d 	.word	0x080a425d

080a33b0 <atexit>:
 80a33b0:	2300      	movs	r3, #0
 80a33b2:	4601      	mov	r1, r0
 80a33b4:	461a      	mov	r2, r3
 80a33b6:	4618      	mov	r0, r3
 80a33b8:	f000 bc4c 	b.w	80a3c54 <__register_exitproc>

080a33bc <localtime_r>:
 80a33bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a33c0:	460c      	mov	r4, r1
 80a33c2:	4607      	mov	r7, r0
 80a33c4:	f000 fcec 	bl	80a3da0 <__gettzinfo>
 80a33c8:	4621      	mov	r1, r4
 80a33ca:	4680      	mov	r8, r0
 80a33cc:	4638      	mov	r0, r7
 80a33ce:	f000 fceb 	bl	80a3da8 <gmtime_r>
 80a33d2:	6943      	ldr	r3, [r0, #20]
 80a33d4:	4604      	mov	r4, r0
 80a33d6:	079a      	lsls	r2, r3, #30
 80a33d8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a33dc:	d105      	bne.n	80a33ea <localtime_r+0x2e>
 80a33de:	2264      	movs	r2, #100	; 0x64
 80a33e0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a33e4:	fb02 6313 	mls	r3, r2, r3, r6
 80a33e8:	bb7b      	cbnz	r3, 80a344a <localtime_r+0x8e>
 80a33ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a33ee:	fb96 f5f3 	sdiv	r5, r6, r3
 80a33f2:	fb03 6515 	mls	r5, r3, r5, r6
 80a33f6:	fab5 f585 	clz	r5, r5
 80a33fa:	096d      	lsrs	r5, r5, #5
 80a33fc:	2230      	movs	r2, #48	; 0x30
 80a33fe:	4b68      	ldr	r3, [pc, #416]	; (80a35a0 <localtime_r+0x1e4>)
 80a3400:	fb02 3505 	mla	r5, r2, r5, r3
 80a3404:	f000 fa94 	bl	80a3930 <__tz_lock>
 80a3408:	f000 fa9e 	bl	80a3948 <_tzset_unlocked>
 80a340c:	4b65      	ldr	r3, [pc, #404]	; (80a35a4 <localtime_r+0x1e8>)
 80a340e:	681b      	ldr	r3, [r3, #0]
 80a3410:	b353      	cbz	r3, 80a3468 <localtime_r+0xac>
 80a3412:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a3416:	42b3      	cmp	r3, r6
 80a3418:	d119      	bne.n	80a344e <localtime_r+0x92>
 80a341a:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a341e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a3422:	f8d8 1000 	ldr.w	r1, [r8]
 80a3426:	b9d1      	cbnz	r1, 80a345e <localtime_r+0xa2>
 80a3428:	4296      	cmp	r6, r2
 80a342a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a342e:	da23      	bge.n	80a3478 <localtime_r+0xbc>
 80a3430:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a3434:	4296      	cmp	r6, r2
 80a3436:	eb77 0303 	sbcs.w	r3, r7, r3
 80a343a:	bfb4      	ite	lt
 80a343c:	2301      	movlt	r3, #1
 80a343e:	2300      	movge	r3, #0
 80a3440:	6223      	str	r3, [r4, #32]
 80a3442:	db1b      	blt.n	80a347c <localtime_r+0xc0>
 80a3444:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a3448:	e01a      	b.n	80a3480 <localtime_r+0xc4>
 80a344a:	2501      	movs	r5, #1
 80a344c:	e7d6      	b.n	80a33fc <localtime_r+0x40>
 80a344e:	4630      	mov	r0, r6
 80a3450:	f000 f9c6 	bl	80a37e0 <__tzcalc_limits>
 80a3454:	2800      	cmp	r0, #0
 80a3456:	d1e0      	bne.n	80a341a <localtime_r+0x5e>
 80a3458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a345c:	e004      	b.n	80a3468 <localtime_r+0xac>
 80a345e:	4296      	cmp	r6, r2
 80a3460:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3464:	da02      	bge.n	80a346c <localtime_r+0xb0>
 80a3466:	2300      	movs	r3, #0
 80a3468:	6223      	str	r3, [r4, #32]
 80a346a:	e7eb      	b.n	80a3444 <localtime_r+0x88>
 80a346c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a3470:	4296      	cmp	r6, r2
 80a3472:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3476:	daf6      	bge.n	80a3466 <localtime_r+0xaa>
 80a3478:	2301      	movs	r3, #1
 80a347a:	6223      	str	r3, [r4, #32]
 80a347c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a3480:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a3484:	fb91 f6f3 	sdiv	r6, r1, r3
 80a3488:	203c      	movs	r0, #60	; 0x3c
 80a348a:	fb03 1316 	mls	r3, r3, r6, r1
 80a348e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a3492:	fb00 3012 	mls	r0, r0, r2, r3
 80a3496:	6861      	ldr	r1, [r4, #4]
 80a3498:	6823      	ldr	r3, [r4, #0]
 80a349a:	1a89      	subs	r1, r1, r2
 80a349c:	68a2      	ldr	r2, [r4, #8]
 80a349e:	1a1b      	subs	r3, r3, r0
 80a34a0:	1b92      	subs	r2, r2, r6
 80a34a2:	2b3b      	cmp	r3, #59	; 0x3b
 80a34a4:	6023      	str	r3, [r4, #0]
 80a34a6:	6061      	str	r1, [r4, #4]
 80a34a8:	60a2      	str	r2, [r4, #8]
 80a34aa:	dd34      	ble.n	80a3516 <localtime_r+0x15a>
 80a34ac:	3101      	adds	r1, #1
 80a34ae:	6061      	str	r1, [r4, #4]
 80a34b0:	3b3c      	subs	r3, #60	; 0x3c
 80a34b2:	6023      	str	r3, [r4, #0]
 80a34b4:	6863      	ldr	r3, [r4, #4]
 80a34b6:	2b3b      	cmp	r3, #59	; 0x3b
 80a34b8:	dd33      	ble.n	80a3522 <localtime_r+0x166>
 80a34ba:	3201      	adds	r2, #1
 80a34bc:	60a2      	str	r2, [r4, #8]
 80a34be:	3b3c      	subs	r3, #60	; 0x3c
 80a34c0:	6063      	str	r3, [r4, #4]
 80a34c2:	68a3      	ldr	r3, [r4, #8]
 80a34c4:	2b17      	cmp	r3, #23
 80a34c6:	dd32      	ble.n	80a352e <localtime_r+0x172>
 80a34c8:	69e2      	ldr	r2, [r4, #28]
 80a34ca:	3b18      	subs	r3, #24
 80a34cc:	3201      	adds	r2, #1
 80a34ce:	61e2      	str	r2, [r4, #28]
 80a34d0:	69a2      	ldr	r2, [r4, #24]
 80a34d2:	60a3      	str	r3, [r4, #8]
 80a34d4:	3201      	adds	r2, #1
 80a34d6:	2a06      	cmp	r2, #6
 80a34d8:	bfc8      	it	gt
 80a34da:	2200      	movgt	r2, #0
 80a34dc:	61a2      	str	r2, [r4, #24]
 80a34de:	68e2      	ldr	r2, [r4, #12]
 80a34e0:	6923      	ldr	r3, [r4, #16]
 80a34e2:	3201      	adds	r2, #1
 80a34e4:	60e2      	str	r2, [r4, #12]
 80a34e6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a34ea:	428a      	cmp	r2, r1
 80a34ec:	dd0e      	ble.n	80a350c <localtime_r+0x150>
 80a34ee:	2b0b      	cmp	r3, #11
 80a34f0:	eba2 0201 	sub.w	r2, r2, r1
 80a34f4:	60e2      	str	r2, [r4, #12]
 80a34f6:	f103 0201 	add.w	r2, r3, #1
 80a34fa:	bf05      	ittet	eq
 80a34fc:	2200      	moveq	r2, #0
 80a34fe:	6963      	ldreq	r3, [r4, #20]
 80a3500:	6122      	strne	r2, [r4, #16]
 80a3502:	3301      	addeq	r3, #1
 80a3504:	bf02      	ittt	eq
 80a3506:	6122      	streq	r2, [r4, #16]
 80a3508:	6163      	streq	r3, [r4, #20]
 80a350a:	61e2      	streq	r2, [r4, #28]
 80a350c:	f000 fa16 	bl	80a393c <__tz_unlock>
 80a3510:	4620      	mov	r0, r4
 80a3512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3516:	2b00      	cmp	r3, #0
 80a3518:	dacc      	bge.n	80a34b4 <localtime_r+0xf8>
 80a351a:	3901      	subs	r1, #1
 80a351c:	6061      	str	r1, [r4, #4]
 80a351e:	333c      	adds	r3, #60	; 0x3c
 80a3520:	e7c7      	b.n	80a34b2 <localtime_r+0xf6>
 80a3522:	2b00      	cmp	r3, #0
 80a3524:	dacd      	bge.n	80a34c2 <localtime_r+0x106>
 80a3526:	3a01      	subs	r2, #1
 80a3528:	60a2      	str	r2, [r4, #8]
 80a352a:	333c      	adds	r3, #60	; 0x3c
 80a352c:	e7c8      	b.n	80a34c0 <localtime_r+0x104>
 80a352e:	2b00      	cmp	r3, #0
 80a3530:	daec      	bge.n	80a350c <localtime_r+0x150>
 80a3532:	69e2      	ldr	r2, [r4, #28]
 80a3534:	3318      	adds	r3, #24
 80a3536:	3a01      	subs	r2, #1
 80a3538:	61e2      	str	r2, [r4, #28]
 80a353a:	69a2      	ldr	r2, [r4, #24]
 80a353c:	60a3      	str	r3, [r4, #8]
 80a353e:	3a01      	subs	r2, #1
 80a3540:	bf48      	it	mi
 80a3542:	2206      	movmi	r2, #6
 80a3544:	61a2      	str	r2, [r4, #24]
 80a3546:	68e2      	ldr	r2, [r4, #12]
 80a3548:	3a01      	subs	r2, #1
 80a354a:	60e2      	str	r2, [r4, #12]
 80a354c:	2a00      	cmp	r2, #0
 80a354e:	d1dd      	bne.n	80a350c <localtime_r+0x150>
 80a3550:	6923      	ldr	r3, [r4, #16]
 80a3552:	3b01      	subs	r3, #1
 80a3554:	d405      	bmi.n	80a3562 <localtime_r+0x1a6>
 80a3556:	6123      	str	r3, [r4, #16]
 80a3558:	6923      	ldr	r3, [r4, #16]
 80a355a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a355e:	60e3      	str	r3, [r4, #12]
 80a3560:	e7d4      	b.n	80a350c <localtime_r+0x150>
 80a3562:	230b      	movs	r3, #11
 80a3564:	6123      	str	r3, [r4, #16]
 80a3566:	6963      	ldr	r3, [r4, #20]
 80a3568:	1e5a      	subs	r2, r3, #1
 80a356a:	6162      	str	r2, [r4, #20]
 80a356c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a3570:	0793      	lsls	r3, r2, #30
 80a3572:	d105      	bne.n	80a3580 <localtime_r+0x1c4>
 80a3574:	2164      	movs	r1, #100	; 0x64
 80a3576:	fb92 f3f1 	sdiv	r3, r2, r1
 80a357a:	fb01 2313 	mls	r3, r1, r3, r2
 80a357e:	b963      	cbnz	r3, 80a359a <localtime_r+0x1de>
 80a3580:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a3584:	fb92 f3f1 	sdiv	r3, r2, r1
 80a3588:	fb01 2313 	mls	r3, r1, r3, r2
 80a358c:	fab3 f383 	clz	r3, r3
 80a3590:	095b      	lsrs	r3, r3, #5
 80a3592:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a3596:	61e3      	str	r3, [r4, #28]
 80a3598:	e7de      	b.n	80a3558 <localtime_r+0x19c>
 80a359a:	2301      	movs	r3, #1
 80a359c:	e7f9      	b.n	80a3592 <localtime_r+0x1d6>
 80a359e:	bf00      	nop
 80a35a0:	080a42b8 	.word	0x080a42b8
 80a35a4:	20000c84 	.word	0x20000c84

080a35a8 <ldiv>:
 80a35a8:	b510      	push	{r4, lr}
 80a35aa:	fb91 f4f2 	sdiv	r4, r1, r2
 80a35ae:	2900      	cmp	r1, #0
 80a35b0:	fb02 1314 	mls	r3, r2, r4, r1
 80a35b4:	db06      	blt.n	80a35c4 <ldiv+0x1c>
 80a35b6:	2b00      	cmp	r3, #0
 80a35b8:	da01      	bge.n	80a35be <ldiv+0x16>
 80a35ba:	3401      	adds	r4, #1
 80a35bc:	1a9b      	subs	r3, r3, r2
 80a35be:	e9c0 4300 	strd	r4, r3, [r0]
 80a35c2:	bd10      	pop	{r4, pc}
 80a35c4:	2b00      	cmp	r3, #0
 80a35c6:	bfc4      	itt	gt
 80a35c8:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a35cc:	189b      	addgt	r3, r3, r2
 80a35ce:	e7f6      	b.n	80a35be <ldiv+0x16>

080a35d0 <memcpy>:
 80a35d0:	440a      	add	r2, r1
 80a35d2:	4291      	cmp	r1, r2
 80a35d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a35d8:	d100      	bne.n	80a35dc <memcpy+0xc>
 80a35da:	4770      	bx	lr
 80a35dc:	b510      	push	{r4, lr}
 80a35de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a35e2:	4291      	cmp	r1, r2
 80a35e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a35e8:	d1f9      	bne.n	80a35de <memcpy+0xe>
 80a35ea:	bd10      	pop	{r4, pc}

080a35ec <memset>:
 80a35ec:	4603      	mov	r3, r0
 80a35ee:	4402      	add	r2, r0
 80a35f0:	4293      	cmp	r3, r2
 80a35f2:	d100      	bne.n	80a35f6 <memset+0xa>
 80a35f4:	4770      	bx	lr
 80a35f6:	f803 1b01 	strb.w	r1, [r3], #1
 80a35fa:	e7f9      	b.n	80a35f0 <memset+0x4>

080a35fc <srand>:
 80a35fc:	b538      	push	{r3, r4, r5, lr}
 80a35fe:	4b0d      	ldr	r3, [pc, #52]	; (80a3634 <srand+0x38>)
 80a3600:	4604      	mov	r4, r0
 80a3602:	681d      	ldr	r5, [r3, #0]
 80a3604:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3606:	b97b      	cbnz	r3, 80a3628 <srand+0x2c>
 80a3608:	2018      	movs	r0, #24
 80a360a:	f7fd fd89 	bl	80a1120 <malloc>
 80a360e:	4a0a      	ldr	r2, [pc, #40]	; (80a3638 <srand+0x3c>)
 80a3610:	4b0a      	ldr	r3, [pc, #40]	; (80a363c <srand+0x40>)
 80a3612:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3614:	e9c0 2300 	strd	r2, r3, [r0]
 80a3618:	4b09      	ldr	r3, [pc, #36]	; (80a3640 <srand+0x44>)
 80a361a:	2201      	movs	r2, #1
 80a361c:	6083      	str	r3, [r0, #8]
 80a361e:	230b      	movs	r3, #11
 80a3620:	8183      	strh	r3, [r0, #12]
 80a3622:	2300      	movs	r3, #0
 80a3624:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3628:	2200      	movs	r2, #0
 80a362a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a362c:	611c      	str	r4, [r3, #16]
 80a362e:	615a      	str	r2, [r3, #20]
 80a3630:	bd38      	pop	{r3, r4, r5, pc}
 80a3632:	bf00      	nop
 80a3634:	20000014 	.word	0x20000014
 80a3638:	abcd330e 	.word	0xabcd330e
 80a363c:	e66d1234 	.word	0xe66d1234
 80a3640:	0005deec 	.word	0x0005deec

080a3644 <strcmp>:
 80a3644:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3648:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a364c:	2a01      	cmp	r2, #1
 80a364e:	bf28      	it	cs
 80a3650:	429a      	cmpcs	r2, r3
 80a3652:	d0f7      	beq.n	80a3644 <strcmp>
 80a3654:	1ad0      	subs	r0, r2, r3
 80a3656:	4770      	bx	lr

080a3658 <strcpy>:
 80a3658:	4603      	mov	r3, r0
 80a365a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a365e:	f803 2b01 	strb.w	r2, [r3], #1
 80a3662:	2a00      	cmp	r2, #0
 80a3664:	d1f9      	bne.n	80a365a <strcpy+0x2>
 80a3666:	4770      	bx	lr

080a3668 <strdup>:
 80a3668:	4b02      	ldr	r3, [pc, #8]	; (80a3674 <strdup+0xc>)
 80a366a:	4601      	mov	r1, r0
 80a366c:	6818      	ldr	r0, [r3, #0]
 80a366e:	f000 b803 	b.w	80a3678 <_strdup_r>
 80a3672:	bf00      	nop
 80a3674:	20000014 	.word	0x20000014

080a3678 <_strdup_r>:
 80a3678:	b570      	push	{r4, r5, r6, lr}
 80a367a:	4604      	mov	r4, r0
 80a367c:	4608      	mov	r0, r1
 80a367e:	460d      	mov	r5, r1
 80a3680:	f000 f80d 	bl	80a369e <strlen>
 80a3684:	1c46      	adds	r6, r0, #1
 80a3686:	4631      	mov	r1, r6
 80a3688:	4620      	mov	r0, r4
 80a368a:	f7fd fd79 	bl	80a1180 <_malloc_r>
 80a368e:	4604      	mov	r4, r0
 80a3690:	b118      	cbz	r0, 80a369a <_strdup_r+0x22>
 80a3692:	4632      	mov	r2, r6
 80a3694:	4629      	mov	r1, r5
 80a3696:	f7ff ff9b 	bl	80a35d0 <memcpy>
 80a369a:	4620      	mov	r0, r4
 80a369c:	bd70      	pop	{r4, r5, r6, pc}

080a369e <strlen>:
 80a369e:	4603      	mov	r3, r0
 80a36a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a36a4:	2a00      	cmp	r2, #0
 80a36a6:	d1fb      	bne.n	80a36a0 <strlen+0x2>
 80a36a8:	1a18      	subs	r0, r3, r0
 80a36aa:	3801      	subs	r0, #1
 80a36ac:	4770      	bx	lr

080a36ae <strncmp>:
 80a36ae:	b510      	push	{r4, lr}
 80a36b0:	b16a      	cbz	r2, 80a36ce <strncmp+0x20>
 80a36b2:	3901      	subs	r1, #1
 80a36b4:	1884      	adds	r4, r0, r2
 80a36b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a36ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a36be:	4293      	cmp	r3, r2
 80a36c0:	d103      	bne.n	80a36ca <strncmp+0x1c>
 80a36c2:	42a0      	cmp	r0, r4
 80a36c4:	d001      	beq.n	80a36ca <strncmp+0x1c>
 80a36c6:	2b00      	cmp	r3, #0
 80a36c8:	d1f5      	bne.n	80a36b6 <strncmp+0x8>
 80a36ca:	1a98      	subs	r0, r3, r2
 80a36cc:	bd10      	pop	{r4, pc}
 80a36ce:	4610      	mov	r0, r2
 80a36d0:	e7fc      	b.n	80a36cc <strncmp+0x1e>
	...

080a36d4 <_strtoul_l.isra.0>:
 80a36d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a36d8:	468c      	mov	ip, r1
 80a36da:	4686      	mov	lr, r0
 80a36dc:	4e3a      	ldr	r6, [pc, #232]	; (80a37c8 <_strtoul_l.isra.0+0xf4>)
 80a36de:	4660      	mov	r0, ip
 80a36e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a36e4:	5da5      	ldrb	r5, [r4, r6]
 80a36e6:	f015 0508 	ands.w	r5, r5, #8
 80a36ea:	d1f8      	bne.n	80a36de <_strtoul_l.isra.0+0xa>
 80a36ec:	2c2d      	cmp	r4, #45	; 0x2d
 80a36ee:	d134      	bne.n	80a375a <_strtoul_l.isra.0+0x86>
 80a36f0:	f04f 0801 	mov.w	r8, #1
 80a36f4:	f89c 4000 	ldrb.w	r4, [ip]
 80a36f8:	f100 0c02 	add.w	ip, r0, #2
 80a36fc:	2b00      	cmp	r3, #0
 80a36fe:	d05e      	beq.n	80a37be <_strtoul_l.isra.0+0xea>
 80a3700:	2b10      	cmp	r3, #16
 80a3702:	d10c      	bne.n	80a371e <_strtoul_l.isra.0+0x4a>
 80a3704:	2c30      	cmp	r4, #48	; 0x30
 80a3706:	d10a      	bne.n	80a371e <_strtoul_l.isra.0+0x4a>
 80a3708:	f89c 0000 	ldrb.w	r0, [ip]
 80a370c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3710:	2858      	cmp	r0, #88	; 0x58
 80a3712:	d14f      	bne.n	80a37b4 <_strtoul_l.isra.0+0xe0>
 80a3714:	2310      	movs	r3, #16
 80a3716:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a371a:	f10c 0c02 	add.w	ip, ip, #2
 80a371e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a3722:	fbb7 f7f3 	udiv	r7, r7, r3
 80a3726:	2500      	movs	r5, #0
 80a3728:	fb03 f907 	mul.w	r9, r3, r7
 80a372c:	4628      	mov	r0, r5
 80a372e:	ea6f 0909 	mvn.w	r9, r9
 80a3732:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a3736:	2e09      	cmp	r6, #9
 80a3738:	d818      	bhi.n	80a376c <_strtoul_l.isra.0+0x98>
 80a373a:	4634      	mov	r4, r6
 80a373c:	42a3      	cmp	r3, r4
 80a373e:	dd24      	ble.n	80a378a <_strtoul_l.isra.0+0xb6>
 80a3740:	2d00      	cmp	r5, #0
 80a3742:	db1f      	blt.n	80a3784 <_strtoul_l.isra.0+0xb0>
 80a3744:	4287      	cmp	r7, r0
 80a3746:	d31d      	bcc.n	80a3784 <_strtoul_l.isra.0+0xb0>
 80a3748:	d101      	bne.n	80a374e <_strtoul_l.isra.0+0x7a>
 80a374a:	45a1      	cmp	r9, r4
 80a374c:	db1a      	blt.n	80a3784 <_strtoul_l.isra.0+0xb0>
 80a374e:	2501      	movs	r5, #1
 80a3750:	fb00 4003 	mla	r0, r0, r3, r4
 80a3754:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3758:	e7eb      	b.n	80a3732 <_strtoul_l.isra.0+0x5e>
 80a375a:	2c2b      	cmp	r4, #43	; 0x2b
 80a375c:	bf08      	it	eq
 80a375e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a3762:	46a8      	mov	r8, r5
 80a3764:	bf08      	it	eq
 80a3766:	f100 0c02 	addeq.w	ip, r0, #2
 80a376a:	e7c7      	b.n	80a36fc <_strtoul_l.isra.0+0x28>
 80a376c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a3770:	2e19      	cmp	r6, #25
 80a3772:	d801      	bhi.n	80a3778 <_strtoul_l.isra.0+0xa4>
 80a3774:	3c37      	subs	r4, #55	; 0x37
 80a3776:	e7e1      	b.n	80a373c <_strtoul_l.isra.0+0x68>
 80a3778:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a377c:	2e19      	cmp	r6, #25
 80a377e:	d804      	bhi.n	80a378a <_strtoul_l.isra.0+0xb6>
 80a3780:	3c57      	subs	r4, #87	; 0x57
 80a3782:	e7db      	b.n	80a373c <_strtoul_l.isra.0+0x68>
 80a3784:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a3788:	e7e4      	b.n	80a3754 <_strtoul_l.isra.0+0x80>
 80a378a:	2d00      	cmp	r5, #0
 80a378c:	da07      	bge.n	80a379e <_strtoul_l.isra.0+0xca>
 80a378e:	2322      	movs	r3, #34	; 0x22
 80a3790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3794:	f8ce 3000 	str.w	r3, [lr]
 80a3798:	b942      	cbnz	r2, 80a37ac <_strtoul_l.isra.0+0xd8>
 80a379a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a379e:	f1b8 0f00 	cmp.w	r8, #0
 80a37a2:	d000      	beq.n	80a37a6 <_strtoul_l.isra.0+0xd2>
 80a37a4:	4240      	negs	r0, r0
 80a37a6:	2a00      	cmp	r2, #0
 80a37a8:	d0f7      	beq.n	80a379a <_strtoul_l.isra.0+0xc6>
 80a37aa:	b10d      	cbz	r5, 80a37b0 <_strtoul_l.isra.0+0xdc>
 80a37ac:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a37b0:	6011      	str	r1, [r2, #0]
 80a37b2:	e7f2      	b.n	80a379a <_strtoul_l.isra.0+0xc6>
 80a37b4:	2430      	movs	r4, #48	; 0x30
 80a37b6:	2b00      	cmp	r3, #0
 80a37b8:	d1b1      	bne.n	80a371e <_strtoul_l.isra.0+0x4a>
 80a37ba:	2308      	movs	r3, #8
 80a37bc:	e7af      	b.n	80a371e <_strtoul_l.isra.0+0x4a>
 80a37be:	2c30      	cmp	r4, #48	; 0x30
 80a37c0:	d0a2      	beq.n	80a3708 <_strtoul_l.isra.0+0x34>
 80a37c2:	230a      	movs	r3, #10
 80a37c4:	e7ab      	b.n	80a371e <_strtoul_l.isra.0+0x4a>
 80a37c6:	bf00      	nop
 80a37c8:	080a4355 	.word	0x080a4355

080a37cc <strtoul>:
 80a37cc:	4613      	mov	r3, r2
 80a37ce:	460a      	mov	r2, r1
 80a37d0:	4601      	mov	r1, r0
 80a37d2:	4802      	ldr	r0, [pc, #8]	; (80a37dc <strtoul+0x10>)
 80a37d4:	6800      	ldr	r0, [r0, #0]
 80a37d6:	f7ff bf7d 	b.w	80a36d4 <_strtoul_l.isra.0>
 80a37da:	bf00      	nop
 80a37dc:	20000014 	.word	0x20000014

080a37e0 <__tzcalc_limits>:
 80a37e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a37e4:	4680      	mov	r8, r0
 80a37e6:	f000 fadb 	bl	80a3da0 <__gettzinfo>
 80a37ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a37ee:	4598      	cmp	r8, r3
 80a37f0:	f340 8097 	ble.w	80a3922 <__tzcalc_limits+0x142>
 80a37f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a37f8:	f240 126d 	movw	r2, #365	; 0x16d
 80a37fc:	4443      	add	r3, r8
 80a37fe:	109b      	asrs	r3, r3, #2
 80a3800:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a3804:	fb02 3505 	mla	r5, r2, r5, r3
 80a3808:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a380c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a3810:	fb93 f3f2 	sdiv	r3, r3, r2
 80a3814:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3818:	441d      	add	r5, r3
 80a381a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a381e:	4442      	add	r2, r8
 80a3820:	fbb2 f2f3 	udiv	r2, r2, r3
 80a3824:	fb98 f7f3 	sdiv	r7, r8, r3
 80a3828:	4415      	add	r5, r2
 80a382a:	2264      	movs	r2, #100	; 0x64
 80a382c:	fb03 8717 	mls	r7, r3, r7, r8
 80a3830:	fb98 f6f2 	sdiv	r6, r8, r2
 80a3834:	fab7 fc87 	clz	ip, r7
 80a3838:	4604      	mov	r4, r0
 80a383a:	f04f 0e07 	mov.w	lr, #7
 80a383e:	fb02 8616 	mls	r6, r2, r6, r8
 80a3842:	f008 0303 	and.w	r3, r8, #3
 80a3846:	f8c0 8004 	str.w	r8, [r0, #4]
 80a384a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a384e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a3852:	9300      	str	r3, [sp, #0]
 80a3854:	7a22      	ldrb	r2, [r4, #8]
 80a3856:	6963      	ldr	r3, [r4, #20]
 80a3858:	2a4a      	cmp	r2, #74	; 0x4a
 80a385a:	d128      	bne.n	80a38ae <__tzcalc_limits+0xce>
 80a385c:	9900      	ldr	r1, [sp, #0]
 80a385e:	18ea      	adds	r2, r5, r3
 80a3860:	b901      	cbnz	r1, 80a3864 <__tzcalc_limits+0x84>
 80a3862:	b906      	cbnz	r6, 80a3866 <__tzcalc_limits+0x86>
 80a3864:	bb0f      	cbnz	r7, 80a38aa <__tzcalc_limits+0xca>
 80a3866:	2b3b      	cmp	r3, #59	; 0x3b
 80a3868:	bfd4      	ite	le
 80a386a:	2300      	movle	r3, #0
 80a386c:	2301      	movgt	r3, #1
 80a386e:	4413      	add	r3, r2
 80a3870:	1e5a      	subs	r2, r3, #1
 80a3872:	69a3      	ldr	r3, [r4, #24]
 80a3874:	492c      	ldr	r1, [pc, #176]	; (80a3928 <__tzcalc_limits+0x148>)
 80a3876:	3428      	adds	r4, #40	; 0x28
 80a3878:	fb01 3202 	mla	r2, r1, r2, r3
 80a387c:	6823      	ldr	r3, [r4, #0]
 80a387e:	4413      	add	r3, r2
 80a3880:	461a      	mov	r2, r3
 80a3882:	17db      	asrs	r3, r3, #31
 80a3884:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a3888:	45a3      	cmp	fp, r4
 80a388a:	d1e3      	bne.n	80a3854 <__tzcalc_limits+0x74>
 80a388c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a3890:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a3894:	4294      	cmp	r4, r2
 80a3896:	eb75 0303 	sbcs.w	r3, r5, r3
 80a389a:	bfb4      	ite	lt
 80a389c:	2301      	movlt	r3, #1
 80a389e:	2300      	movge	r3, #0
 80a38a0:	6003      	str	r3, [r0, #0]
 80a38a2:	2001      	movs	r0, #1
 80a38a4:	b003      	add	sp, #12
 80a38a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a38aa:	2300      	movs	r3, #0
 80a38ac:	e7df      	b.n	80a386e <__tzcalc_limits+0x8e>
 80a38ae:	2a44      	cmp	r2, #68	; 0x44
 80a38b0:	d101      	bne.n	80a38b6 <__tzcalc_limits+0xd6>
 80a38b2:	18ea      	adds	r2, r5, r3
 80a38b4:	e7dd      	b.n	80a3872 <__tzcalc_limits+0x92>
 80a38b6:	9a00      	ldr	r2, [sp, #0]
 80a38b8:	bb6a      	cbnz	r2, 80a3916 <__tzcalc_limits+0x136>
 80a38ba:	2e00      	cmp	r6, #0
 80a38bc:	bf0c      	ite	eq
 80a38be:	46e0      	moveq	r8, ip
 80a38c0:	f04f 0801 	movne.w	r8, #1
 80a38c4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a38c8:	68e2      	ldr	r2, [r4, #12]
 80a38ca:	f04f 0900 	mov.w	r9, #0
 80a38ce:	9201      	str	r2, [sp, #4]
 80a38d0:	462a      	mov	r2, r5
 80a38d2:	4916      	ldr	r1, [pc, #88]	; (80a392c <__tzcalc_limits+0x14c>)
 80a38d4:	fb0a 1808 	mla	r8, sl, r8, r1
 80a38d8:	f1a8 0804 	sub.w	r8, r8, #4
 80a38dc:	9901      	ldr	r1, [sp, #4]
 80a38de:	f109 0901 	add.w	r9, r9, #1
 80a38e2:	4549      	cmp	r1, r9
 80a38e4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a38e8:	dc17      	bgt.n	80a391a <__tzcalc_limits+0x13a>
 80a38ea:	f102 0804 	add.w	r8, r2, #4
 80a38ee:	fb98 f9fe 	sdiv	r9, r8, lr
 80a38f2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a38f6:	eba8 0909 	sub.w	r9, r8, r9
 80a38fa:	ebb3 0909 	subs.w	r9, r3, r9
 80a38fe:	6923      	ldr	r3, [r4, #16]
 80a3900:	bf48      	it	mi
 80a3902:	f109 0907 	addmi.w	r9, r9, #7
 80a3906:	3b01      	subs	r3, #1
 80a3908:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a390c:	444b      	add	r3, r9
 80a390e:	4553      	cmp	r3, sl
 80a3910:	da05      	bge.n	80a391e <__tzcalc_limits+0x13e>
 80a3912:	441a      	add	r2, r3
 80a3914:	e7ad      	b.n	80a3872 <__tzcalc_limits+0x92>
 80a3916:	46e0      	mov	r8, ip
 80a3918:	e7d4      	b.n	80a38c4 <__tzcalc_limits+0xe4>
 80a391a:	4452      	add	r2, sl
 80a391c:	e7de      	b.n	80a38dc <__tzcalc_limits+0xfc>
 80a391e:	3b07      	subs	r3, #7
 80a3920:	e7f5      	b.n	80a390e <__tzcalc_limits+0x12e>
 80a3922:	2000      	movs	r0, #0
 80a3924:	e7be      	b.n	80a38a4 <__tzcalc_limits+0xc4>
 80a3926:	bf00      	nop
 80a3928:	00015180 	.word	0x00015180
 80a392c:	080a42b8 	.word	0x080a42b8

080a3930 <__tz_lock>:
 80a3930:	4801      	ldr	r0, [pc, #4]	; (80a3938 <__tz_lock+0x8>)
 80a3932:	f000 bae9 	b.w	80a3f08 <__retarget_lock_acquire>
 80a3936:	bf00      	nop
 80a3938:	20000d27 	.word	0x20000d27

080a393c <__tz_unlock>:
 80a393c:	4801      	ldr	r0, [pc, #4]	; (80a3944 <__tz_unlock+0x8>)
 80a393e:	f000 bae5 	b.w	80a3f0c <__retarget_lock_release>
 80a3942:	bf00      	nop
 80a3944:	20000d27 	.word	0x20000d27

080a3948 <_tzset_unlocked>:
 80a3948:	4b01      	ldr	r3, [pc, #4]	; (80a3950 <_tzset_unlocked+0x8>)
 80a394a:	6818      	ldr	r0, [r3, #0]
 80a394c:	f000 b802 	b.w	80a3954 <_tzset_unlocked_r>
 80a3950:	20000014 	.word	0x20000014

080a3954 <_tzset_unlocked_r>:
 80a3954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3958:	b08d      	sub	sp, #52	; 0x34
 80a395a:	4607      	mov	r7, r0
 80a395c:	f000 fa20 	bl	80a3da0 <__gettzinfo>
 80a3960:	49b0      	ldr	r1, [pc, #704]	; (80a3c24 <_tzset_unlocked_r+0x2d0>)
 80a3962:	4605      	mov	r5, r0
 80a3964:	4638      	mov	r0, r7
 80a3966:	f000 fa13 	bl	80a3d90 <_getenv_r>
 80a396a:	4eaf      	ldr	r6, [pc, #700]	; (80a3c28 <_tzset_unlocked_r+0x2d4>)
 80a396c:	4604      	mov	r4, r0
 80a396e:	b970      	cbnz	r0, 80a398e <_tzset_unlocked_r+0x3a>
 80a3970:	4bae      	ldr	r3, [pc, #696]	; (80a3c2c <_tzset_unlocked_r+0x2d8>)
 80a3972:	4aaf      	ldr	r2, [pc, #700]	; (80a3c30 <_tzset_unlocked_r+0x2dc>)
 80a3974:	6018      	str	r0, [r3, #0]
 80a3976:	4baf      	ldr	r3, [pc, #700]	; (80a3c34 <_tzset_unlocked_r+0x2e0>)
 80a3978:	6018      	str	r0, [r3, #0]
 80a397a:	4baf      	ldr	r3, [pc, #700]	; (80a3c38 <_tzset_unlocked_r+0x2e4>)
 80a397c:	6830      	ldr	r0, [r6, #0]
 80a397e:	e9c3 2200 	strd	r2, r2, [r3]
 80a3982:	f7fd fbd5 	bl	80a1130 <free>
 80a3986:	6034      	str	r4, [r6, #0]
 80a3988:	b00d      	add	sp, #52	; 0x34
 80a398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a398e:	6831      	ldr	r1, [r6, #0]
 80a3990:	2900      	cmp	r1, #0
 80a3992:	d15f      	bne.n	80a3a54 <_tzset_unlocked_r+0x100>
 80a3994:	6830      	ldr	r0, [r6, #0]
 80a3996:	f7fd fbcb 	bl	80a1130 <free>
 80a399a:	4620      	mov	r0, r4
 80a399c:	f7ff fe7f 	bl	80a369e <strlen>
 80a39a0:	1c41      	adds	r1, r0, #1
 80a39a2:	4638      	mov	r0, r7
 80a39a4:	f7fd fbec 	bl	80a1180 <_malloc_r>
 80a39a8:	6030      	str	r0, [r6, #0]
 80a39aa:	2800      	cmp	r0, #0
 80a39ac:	d157      	bne.n	80a3a5e <_tzset_unlocked_r+0x10a>
 80a39ae:	7823      	ldrb	r3, [r4, #0]
 80a39b0:	ae0a      	add	r6, sp, #40	; 0x28
 80a39b2:	2b3a      	cmp	r3, #58	; 0x3a
 80a39b4:	bf08      	it	eq
 80a39b6:	3401      	addeq	r4, #1
 80a39b8:	4633      	mov	r3, r6
 80a39ba:	4620      	mov	r0, r4
 80a39bc:	4a9f      	ldr	r2, [pc, #636]	; (80a3c3c <_tzset_unlocked_r+0x2e8>)
 80a39be:	49a0      	ldr	r1, [pc, #640]	; (80a3c40 <_tzset_unlocked_r+0x2ec>)
 80a39c0:	f7fd fbce 	bl	80a1160 <siscanf>
 80a39c4:	2800      	cmp	r0, #0
 80a39c6:	dddf      	ble.n	80a3988 <_tzset_unlocked_r+0x34>
 80a39c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a39ca:	18e7      	adds	r7, r4, r3
 80a39cc:	5ce3      	ldrb	r3, [r4, r3]
 80a39ce:	2b2d      	cmp	r3, #45	; 0x2d
 80a39d0:	d149      	bne.n	80a3a66 <_tzset_unlocked_r+0x112>
 80a39d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a39d6:	3701      	adds	r7, #1
 80a39d8:	f04f 0800 	mov.w	r8, #0
 80a39dc:	f10d 0a20 	add.w	sl, sp, #32
 80a39e0:	f10d 0b1e 	add.w	fp, sp, #30
 80a39e4:	4633      	mov	r3, r6
 80a39e6:	4638      	mov	r0, r7
 80a39e8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a39ec:	4995      	ldr	r1, [pc, #596]	; (80a3c44 <_tzset_unlocked_r+0x2f0>)
 80a39ee:	9603      	str	r6, [sp, #12]
 80a39f0:	f8cd b000 	str.w	fp, [sp]
 80a39f4:	aa07      	add	r2, sp, #28
 80a39f6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a39fa:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a39fe:	f7fd fbaf 	bl	80a1160 <siscanf>
 80a3a02:	4540      	cmp	r0, r8
 80a3a04:	ddc0      	ble.n	80a3988 <_tzset_unlocked_r+0x34>
 80a3a06:	213c      	movs	r1, #60	; 0x3c
 80a3a08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3a0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3a10:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a3c50 <_tzset_unlocked_r+0x2fc>
 80a3a14:	fb01 2203 	mla	r2, r1, r3, r2
 80a3a18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3a1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3a20:	fb01 2303 	mla	r3, r1, r3, r2
 80a3a24:	435c      	muls	r4, r3
 80a3a26:	4b85      	ldr	r3, [pc, #532]	; (80a3c3c <_tzset_unlocked_r+0x2e8>)
 80a3a28:	62ac      	str	r4, [r5, #40]	; 0x28
 80a3a2a:	4c83      	ldr	r4, [pc, #524]	; (80a3c38 <_tzset_unlocked_r+0x2e4>)
 80a3a2c:	464a      	mov	r2, r9
 80a3a2e:	6023      	str	r3, [r4, #0]
 80a3a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a32:	4983      	ldr	r1, [pc, #524]	; (80a3c40 <_tzset_unlocked_r+0x2ec>)
 80a3a34:	441f      	add	r7, r3
 80a3a36:	4638      	mov	r0, r7
 80a3a38:	4633      	mov	r3, r6
 80a3a3a:	f7fd fb91 	bl	80a1160 <siscanf>
 80a3a3e:	4540      	cmp	r0, r8
 80a3a40:	dc17      	bgt.n	80a3a72 <_tzset_unlocked_r+0x11e>
 80a3a42:	6823      	ldr	r3, [r4, #0]
 80a3a44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a3a46:	6063      	str	r3, [r4, #4]
 80a3a48:	4b78      	ldr	r3, [pc, #480]	; (80a3c2c <_tzset_unlocked_r+0x2d8>)
 80a3a4a:	601a      	str	r2, [r3, #0]
 80a3a4c:	4b79      	ldr	r3, [pc, #484]	; (80a3c34 <_tzset_unlocked_r+0x2e0>)
 80a3a4e:	f8c3 8000 	str.w	r8, [r3]
 80a3a52:	e799      	b.n	80a3988 <_tzset_unlocked_r+0x34>
 80a3a54:	f7ff fdf6 	bl	80a3644 <strcmp>
 80a3a58:	2800      	cmp	r0, #0
 80a3a5a:	d19b      	bne.n	80a3994 <_tzset_unlocked_r+0x40>
 80a3a5c:	e794      	b.n	80a3988 <_tzset_unlocked_r+0x34>
 80a3a5e:	4621      	mov	r1, r4
 80a3a60:	f7ff fdfa 	bl	80a3658 <strcpy>
 80a3a64:	e7a3      	b.n	80a39ae <_tzset_unlocked_r+0x5a>
 80a3a66:	2b2b      	cmp	r3, #43	; 0x2b
 80a3a68:	f04f 0401 	mov.w	r4, #1
 80a3a6c:	bf08      	it	eq
 80a3a6e:	3701      	addeq	r7, #1
 80a3a70:	e7b2      	b.n	80a39d8 <_tzset_unlocked_r+0x84>
 80a3a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a74:	f8c4 9004 	str.w	r9, [r4, #4]
 80a3a78:	18fc      	adds	r4, r7, r3
 80a3a7a:	5cfb      	ldrb	r3, [r7, r3]
 80a3a7c:	2b2d      	cmp	r3, #45	; 0x2d
 80a3a7e:	f040 808c 	bne.w	80a3b9a <_tzset_unlocked_r+0x246>
 80a3a82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a3a86:	3401      	adds	r4, #1
 80a3a88:	2300      	movs	r3, #0
 80a3a8a:	4620      	mov	r0, r4
 80a3a8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3a90:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3a94:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3a98:	930a      	str	r3, [sp, #40]	; 0x28
 80a3a9a:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a3a9e:	4633      	mov	r3, r6
 80a3aa0:	e9cd b600 	strd	fp, r6, [sp]
 80a3aa4:	4967      	ldr	r1, [pc, #412]	; (80a3c44 <_tzset_unlocked_r+0x2f0>)
 80a3aa6:	aa07      	add	r2, sp, #28
 80a3aa8:	f7fd fb5a 	bl	80a1160 <siscanf>
 80a3aac:	2800      	cmp	r0, #0
 80a3aae:	dc7a      	bgt.n	80a3ba6 <_tzset_unlocked_r+0x252>
 80a3ab0:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a3ab2:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a3ab6:	652f      	str	r7, [r5, #80]	; 0x50
 80a3ab8:	f04f 0900 	mov.w	r9, #0
 80a3abc:	462f      	mov	r7, r5
 80a3abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3ac0:	441c      	add	r4, r3
 80a3ac2:	7823      	ldrb	r3, [r4, #0]
 80a3ac4:	2b2c      	cmp	r3, #44	; 0x2c
 80a3ac6:	bf08      	it	eq
 80a3ac8:	3401      	addeq	r4, #1
 80a3aca:	f894 8000 	ldrb.w	r8, [r4]
 80a3ace:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3ad2:	d17a      	bne.n	80a3bca <_tzset_unlocked_r+0x276>
 80a3ad4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a3ad8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a3adc:	ab09      	add	r3, sp, #36	; 0x24
 80a3ade:	9300      	str	r3, [sp, #0]
 80a3ae0:	4620      	mov	r0, r4
 80a3ae2:	4633      	mov	r3, r6
 80a3ae4:	4958      	ldr	r1, [pc, #352]	; (80a3c48 <_tzset_unlocked_r+0x2f4>)
 80a3ae6:	9603      	str	r6, [sp, #12]
 80a3ae8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a3aec:	f7fd fb38 	bl	80a1160 <siscanf>
 80a3af0:	2803      	cmp	r0, #3
 80a3af2:	f47f af49 	bne.w	80a3988 <_tzset_unlocked_r+0x34>
 80a3af6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a3afa:	1e4b      	subs	r3, r1, #1
 80a3afc:	2b0b      	cmp	r3, #11
 80a3afe:	f63f af43 	bhi.w	80a3988 <_tzset_unlocked_r+0x34>
 80a3b02:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3b06:	1e53      	subs	r3, r2, #1
 80a3b08:	2b04      	cmp	r3, #4
 80a3b0a:	f63f af3d 	bhi.w	80a3988 <_tzset_unlocked_r+0x34>
 80a3b0e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a3b12:	2b06      	cmp	r3, #6
 80a3b14:	f63f af38 	bhi.w	80a3988 <_tzset_unlocked_r+0x34>
 80a3b18:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a3b1c:	f887 8008 	strb.w	r8, [r7, #8]
 80a3b20:	617b      	str	r3, [r7, #20]
 80a3b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3b24:	eb04 0803 	add.w	r8, r4, r3
 80a3b28:	2302      	movs	r3, #2
 80a3b2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3b2e:	2300      	movs	r3, #0
 80a3b30:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3b34:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3b38:	930a      	str	r3, [sp, #40]	; 0x28
 80a3b3a:	f898 3000 	ldrb.w	r3, [r8]
 80a3b3e:	2b2f      	cmp	r3, #47	; 0x2f
 80a3b40:	d109      	bne.n	80a3b56 <_tzset_unlocked_r+0x202>
 80a3b42:	4633      	mov	r3, r6
 80a3b44:	4640      	mov	r0, r8
 80a3b46:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a3b4a:	e9cd b600 	strd	fp, r6, [sp]
 80a3b4e:	493f      	ldr	r1, [pc, #252]	; (80a3c4c <_tzset_unlocked_r+0x2f8>)
 80a3b50:	aa07      	add	r2, sp, #28
 80a3b52:	f7fd fb05 	bl	80a1160 <siscanf>
 80a3b56:	213c      	movs	r1, #60	; 0x3c
 80a3b58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3b5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3b60:	3728      	adds	r7, #40	; 0x28
 80a3b62:	fb01 2203 	mla	r2, r1, r3, r2
 80a3b66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3b6a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3b6e:	fb01 2303 	mla	r3, r1, r3, r2
 80a3b72:	f847 3c10 	str.w	r3, [r7, #-16]
 80a3b76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3b78:	4444      	add	r4, r8
 80a3b7a:	f1b9 0f00 	cmp.w	r9, #0
 80a3b7e:	d021      	beq.n	80a3bc4 <_tzset_unlocked_r+0x270>
 80a3b80:	6868      	ldr	r0, [r5, #4]
 80a3b82:	f7ff fe2d 	bl	80a37e0 <__tzcalc_limits>
 80a3b86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a3b88:	4b28      	ldr	r3, [pc, #160]	; (80a3c2c <_tzset_unlocked_r+0x2d8>)
 80a3b8a:	601a      	str	r2, [r3, #0]
 80a3b8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a3b8e:	1a9b      	subs	r3, r3, r2
 80a3b90:	bf18      	it	ne
 80a3b92:	2301      	movne	r3, #1
 80a3b94:	4a27      	ldr	r2, [pc, #156]	; (80a3c34 <_tzset_unlocked_r+0x2e0>)
 80a3b96:	6013      	str	r3, [r2, #0]
 80a3b98:	e6f6      	b.n	80a3988 <_tzset_unlocked_r+0x34>
 80a3b9a:	2b2b      	cmp	r3, #43	; 0x2b
 80a3b9c:	f04f 0701 	mov.w	r7, #1
 80a3ba0:	bf08      	it	eq
 80a3ba2:	3401      	addeq	r4, #1
 80a3ba4:	e770      	b.n	80a3a88 <_tzset_unlocked_r+0x134>
 80a3ba6:	213c      	movs	r1, #60	; 0x3c
 80a3ba8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3bac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3bb0:	fb01 2203 	mla	r2, r1, r3, r2
 80a3bb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3bb8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3bbc:	fb01 2303 	mla	r3, r1, r3, r2
 80a3bc0:	435f      	muls	r7, r3
 80a3bc2:	e778      	b.n	80a3ab6 <_tzset_unlocked_r+0x162>
 80a3bc4:	f04f 0901 	mov.w	r9, #1
 80a3bc8:	e77b      	b.n	80a3ac2 <_tzset_unlocked_r+0x16e>
 80a3bca:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a3bce:	bf0a      	itet	eq
 80a3bd0:	4643      	moveq	r3, r8
 80a3bd2:	2344      	movne	r3, #68	; 0x44
 80a3bd4:	3401      	addeq	r4, #1
 80a3bd6:	220a      	movs	r2, #10
 80a3bd8:	4620      	mov	r0, r4
 80a3bda:	a90b      	add	r1, sp, #44	; 0x2c
 80a3bdc:	9305      	str	r3, [sp, #20]
 80a3bde:	f7ff fdf5 	bl	80a37cc <strtoul>
 80a3be2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a3be6:	9b05      	ldr	r3, [sp, #20]
 80a3be8:	45a0      	cmp	r8, r4
 80a3bea:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a3bee:	d114      	bne.n	80a3c1a <_tzset_unlocked_r+0x2c6>
 80a3bf0:	234d      	movs	r3, #77	; 0x4d
 80a3bf2:	f1b9 0f00 	cmp.w	r9, #0
 80a3bf6:	d107      	bne.n	80a3c08 <_tzset_unlocked_r+0x2b4>
 80a3bf8:	2103      	movs	r1, #3
 80a3bfa:	722b      	strb	r3, [r5, #8]
 80a3bfc:	2302      	movs	r3, #2
 80a3bfe:	f8c5 9014 	str.w	r9, [r5, #20]
 80a3c02:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a3c06:	e78f      	b.n	80a3b28 <_tzset_unlocked_r+0x1d4>
 80a3c08:	220b      	movs	r2, #11
 80a3c0a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a3c0e:	2301      	movs	r3, #1
 80a3c10:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a3c14:	2300      	movs	r3, #0
 80a3c16:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a3c18:	e786      	b.n	80a3b28 <_tzset_unlocked_r+0x1d4>
 80a3c1a:	b280      	uxth	r0, r0
 80a3c1c:	723b      	strb	r3, [r7, #8]
 80a3c1e:	6178      	str	r0, [r7, #20]
 80a3c20:	e782      	b.n	80a3b28 <_tzset_unlocked_r+0x1d4>
 80a3c22:	bf00      	nop
 80a3c24:	080a4318 	.word	0x080a4318
 80a3c28:	20000c80 	.word	0x20000c80
 80a3c2c:	20000c88 	.word	0x20000c88
 80a3c30:	080a431b 	.word	0x080a431b
 80a3c34:	20000c84 	.word	0x20000c84
 80a3c38:	20000078 	.word	0x20000078
 80a3c3c:	20000c73 	.word	0x20000c73
 80a3c40:	080a431f 	.word	0x080a431f
 80a3c44:	080a4342 	.word	0x080a4342
 80a3c48:	080a432e 	.word	0x080a432e
 80a3c4c:	080a4341 	.word	0x080a4341
 80a3c50:	20000c68 	.word	0x20000c68

080a3c54 <__register_exitproc>:
 80a3c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3c58:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a3d18 <__register_exitproc+0xc4>
 80a3c5c:	4606      	mov	r6, r0
 80a3c5e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3c62:	461f      	mov	r7, r3
 80a3c64:	460d      	mov	r5, r1
 80a3c66:	4691      	mov	r9, r2
 80a3c68:	f000 f94f 	bl	80a3f0a <__retarget_lock_acquire_recursive>
 80a3c6c:	4b26      	ldr	r3, [pc, #152]	; (80a3d08 <__register_exitproc+0xb4>)
 80a3c6e:	681c      	ldr	r4, [r3, #0]
 80a3c70:	b934      	cbnz	r4, 80a3c80 <__register_exitproc+0x2c>
 80a3c72:	4c26      	ldr	r4, [pc, #152]	; (80a3d0c <__register_exitproc+0xb8>)
 80a3c74:	601c      	str	r4, [r3, #0]
 80a3c76:	4b26      	ldr	r3, [pc, #152]	; (80a3d10 <__register_exitproc+0xbc>)
 80a3c78:	b113      	cbz	r3, 80a3c80 <__register_exitproc+0x2c>
 80a3c7a:	681b      	ldr	r3, [r3, #0]
 80a3c7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3c80:	6863      	ldr	r3, [r4, #4]
 80a3c82:	2b1f      	cmp	r3, #31
 80a3c84:	dd07      	ble.n	80a3c96 <__register_exitproc+0x42>
 80a3c86:	f8d8 0000 	ldr.w	r0, [r8]
 80a3c8a:	f000 f940 	bl	80a3f0e <__retarget_lock_release_recursive>
 80a3c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3c96:	b35e      	cbz	r6, 80a3cf0 <__register_exitproc+0x9c>
 80a3c98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3c9c:	b988      	cbnz	r0, 80a3cc2 <__register_exitproc+0x6e>
 80a3c9e:	4b1d      	ldr	r3, [pc, #116]	; (80a3d14 <__register_exitproc+0xc0>)
 80a3ca0:	b923      	cbnz	r3, 80a3cac <__register_exitproc+0x58>
 80a3ca2:	f8d8 0000 	ldr.w	r0, [r8]
 80a3ca6:	f000 f931 	bl	80a3f0c <__retarget_lock_release>
 80a3caa:	e7f0      	b.n	80a3c8e <__register_exitproc+0x3a>
 80a3cac:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3cb0:	f7fd fa36 	bl	80a1120 <malloc>
 80a3cb4:	2800      	cmp	r0, #0
 80a3cb6:	d0f4      	beq.n	80a3ca2 <__register_exitproc+0x4e>
 80a3cb8:	2300      	movs	r3, #0
 80a3cba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3cbe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3cc2:	2201      	movs	r2, #1
 80a3cc4:	6863      	ldr	r3, [r4, #4]
 80a3cc6:	2e02      	cmp	r6, #2
 80a3cc8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3ccc:	fa02 f203 	lsl.w	r2, r2, r3
 80a3cd0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3cd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3cd8:	ea43 0302 	orr.w	r3, r3, r2
 80a3cdc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3ce0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3ce4:	bf02      	ittt	eq
 80a3ce6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a3cea:	431a      	orreq	r2, r3
 80a3cec:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a3cf0:	6863      	ldr	r3, [r4, #4]
 80a3cf2:	f8d8 0000 	ldr.w	r0, [r8]
 80a3cf6:	1c5a      	adds	r2, r3, #1
 80a3cf8:	3302      	adds	r3, #2
 80a3cfa:	6062      	str	r2, [r4, #4]
 80a3cfc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a3d00:	f000 f905 	bl	80a3f0e <__retarget_lock_release_recursive>
 80a3d04:	2000      	movs	r0, #0
 80a3d06:	e7c4      	b.n	80a3c92 <__register_exitproc+0x3e>
 80a3d08:	20000d18 	.word	0x20000d18
 80a3d0c:	20000c8c 	.word	0x20000c8c
 80a3d10:	00000000 	.word	0x00000000
 80a3d14:	080a1121 	.word	0x080a1121
 80a3d18:	20000080 	.word	0x20000080

080a3d1c <_findenv_r>:
 80a3d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d20:	4607      	mov	r7, r0
 80a3d22:	4689      	mov	r9, r1
 80a3d24:	4616      	mov	r6, r2
 80a3d26:	f000 f8f3 	bl	80a3f10 <__env_lock>
 80a3d2a:	4b18      	ldr	r3, [pc, #96]	; (80a3d8c <_findenv_r+0x70>)
 80a3d2c:	681c      	ldr	r4, [r3, #0]
 80a3d2e:	469a      	mov	sl, r3
 80a3d30:	b134      	cbz	r4, 80a3d40 <_findenv_r+0x24>
 80a3d32:	464b      	mov	r3, r9
 80a3d34:	4698      	mov	r8, r3
 80a3d36:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a3d3a:	b139      	cbz	r1, 80a3d4c <_findenv_r+0x30>
 80a3d3c:	293d      	cmp	r1, #61	; 0x3d
 80a3d3e:	d1f9      	bne.n	80a3d34 <_findenv_r+0x18>
 80a3d40:	4638      	mov	r0, r7
 80a3d42:	f000 f8eb 	bl	80a3f1c <__env_unlock>
 80a3d46:	2000      	movs	r0, #0
 80a3d48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d4c:	eba8 0809 	sub.w	r8, r8, r9
 80a3d50:	46a3      	mov	fp, r4
 80a3d52:	f854 0b04 	ldr.w	r0, [r4], #4
 80a3d56:	2800      	cmp	r0, #0
 80a3d58:	d0f2      	beq.n	80a3d40 <_findenv_r+0x24>
 80a3d5a:	4642      	mov	r2, r8
 80a3d5c:	4649      	mov	r1, r9
 80a3d5e:	f7ff fca6 	bl	80a36ae <strncmp>
 80a3d62:	2800      	cmp	r0, #0
 80a3d64:	d1f4      	bne.n	80a3d50 <_findenv_r+0x34>
 80a3d66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a3d6a:	eb03 0508 	add.w	r5, r3, r8
 80a3d6e:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a3d72:	2b3d      	cmp	r3, #61	; 0x3d
 80a3d74:	d1ec      	bne.n	80a3d50 <_findenv_r+0x34>
 80a3d76:	f8da 3000 	ldr.w	r3, [sl]
 80a3d7a:	4638      	mov	r0, r7
 80a3d7c:	ebab 0303 	sub.w	r3, fp, r3
 80a3d80:	109b      	asrs	r3, r3, #2
 80a3d82:	6033      	str	r3, [r6, #0]
 80a3d84:	f000 f8ca 	bl	80a3f1c <__env_unlock>
 80a3d88:	1c68      	adds	r0, r5, #1
 80a3d8a:	e7dd      	b.n	80a3d48 <_findenv_r+0x2c>
 80a3d8c:	200000e0 	.word	0x200000e0

080a3d90 <_getenv_r>:
 80a3d90:	b507      	push	{r0, r1, r2, lr}
 80a3d92:	aa01      	add	r2, sp, #4
 80a3d94:	f7ff ffc2 	bl	80a3d1c <_findenv_r>
 80a3d98:	b003      	add	sp, #12
 80a3d9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3da0 <__gettzinfo>:
 80a3da0:	4800      	ldr	r0, [pc, #0]	; (80a3da4 <__gettzinfo+0x4>)
 80a3da2:	4770      	bx	lr
 80a3da4:	20000088 	.word	0x20000088

080a3da8 <gmtime_r>:
 80a3da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3dac:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a3db0:	460c      	mov	r4, r1
 80a3db2:	2300      	movs	r3, #0
 80a3db4:	4630      	mov	r0, r6
 80a3db6:	4639      	mov	r1, r7
 80a3db8:	4a4f      	ldr	r2, [pc, #316]	; (80a3ef8 <gmtime_r+0x150>)
 80a3dba:	f000 f8b5 	bl	80a3f28 <__aeabi_ldivmod>
 80a3dbe:	4639      	mov	r1, r7
 80a3dc0:	4605      	mov	r5, r0
 80a3dc2:	2300      	movs	r3, #0
 80a3dc4:	4630      	mov	r0, r6
 80a3dc6:	4a4c      	ldr	r2, [pc, #304]	; (80a3ef8 <gmtime_r+0x150>)
 80a3dc8:	f000 f8ae 	bl	80a3f28 <__aeabi_ldivmod>
 80a3dcc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3dd0:	2a00      	cmp	r2, #0
 80a3dd2:	bfbc      	itt	lt
 80a3dd4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a3dd8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a3ddc:	fbb2 f3f1 	udiv	r3, r2, r1
 80a3de0:	fb01 2213 	mls	r2, r1, r3, r2
 80a3de4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a3de8:	60a3      	str	r3, [r4, #8]
 80a3dea:	fbb2 f3f1 	udiv	r3, r2, r1
 80a3dee:	fb01 2213 	mls	r2, r1, r3, r2
 80a3df2:	6022      	str	r2, [r4, #0]
 80a3df4:	f04f 0207 	mov.w	r2, #7
 80a3df8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a3dfc:	bfac      	ite	ge
 80a3dfe:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a3e02:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a3e06:	6063      	str	r3, [r4, #4]
 80a3e08:	1cc3      	adds	r3, r0, #3
 80a3e0a:	fb93 f2f2 	sdiv	r2, r3, r2
 80a3e0e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a3e12:	1a9b      	subs	r3, r3, r2
 80a3e14:	bf48      	it	mi
 80a3e16:	3307      	addmi	r3, #7
 80a3e18:	2800      	cmp	r0, #0
 80a3e1a:	4938      	ldr	r1, [pc, #224]	; (80a3efc <gmtime_r+0x154>)
 80a3e1c:	61a3      	str	r3, [r4, #24]
 80a3e1e:	bfbd      	ittte	lt
 80a3e20:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a3e24:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a3e28:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a3e2c:	fb90 f1f1 	sdivge	r1, r0, r1
 80a3e30:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a3e34:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a3e38:	4b31      	ldr	r3, [pc, #196]	; (80a3f00 <gmtime_r+0x158>)
 80a3e3a:	f240 176d 	movw	r7, #365	; 0x16d
 80a3e3e:	fb03 0001 	mla	r0, r3, r1, r0
 80a3e42:	fbb0 f2f2 	udiv	r2, r0, r2
 80a3e46:	fbb0 f3fc 	udiv	r3, r0, ip
 80a3e4a:	4402      	add	r2, r0
 80a3e4c:	1ad2      	subs	r2, r2, r3
 80a3e4e:	4b2d      	ldr	r3, [pc, #180]	; (80a3f04 <gmtime_r+0x15c>)
 80a3e50:	2664      	movs	r6, #100	; 0x64
 80a3e52:	fbb0 f3f3 	udiv	r3, r0, r3
 80a3e56:	1ad3      	subs	r3, r2, r3
 80a3e58:	fbb3 f5f7 	udiv	r5, r3, r7
 80a3e5c:	fbb3 f3fc 	udiv	r3, r3, ip
 80a3e60:	fbb5 f2f6 	udiv	r2, r5, r6
 80a3e64:	1ad3      	subs	r3, r2, r3
 80a3e66:	4403      	add	r3, r0
 80a3e68:	2099      	movs	r0, #153	; 0x99
 80a3e6a:	fb07 3315 	mls	r3, r7, r5, r3
 80a3e6e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a3e72:	f10c 0c02 	add.w	ip, ip, #2
 80a3e76:	fbbc f7f0 	udiv	r7, ip, r0
 80a3e7a:	f04f 0805 	mov.w	r8, #5
 80a3e7e:	4378      	muls	r0, r7
 80a3e80:	3002      	adds	r0, #2
 80a3e82:	fbb0 f0f8 	udiv	r0, r0, r8
 80a3e86:	f103 0e01 	add.w	lr, r3, #1
 80a3e8a:	ebae 0000 	sub.w	r0, lr, r0
 80a3e8e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a3e92:	45f4      	cmp	ip, lr
 80a3e94:	bf94      	ite	ls
 80a3e96:	f04f 0c02 	movls.w	ip, #2
 80a3e9a:	f06f 0c09 	mvnhi.w	ip, #9
 80a3e9e:	4467      	add	r7, ip
 80a3ea0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a3ea4:	fb0c 5101 	mla	r1, ip, r1, r5
 80a3ea8:	2f01      	cmp	r7, #1
 80a3eaa:	bf98      	it	ls
 80a3eac:	3101      	addls	r1, #1
 80a3eae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a3eb2:	d30c      	bcc.n	80a3ece <gmtime_r+0x126>
 80a3eb4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a3eb8:	61e3      	str	r3, [r4, #28]
 80a3eba:	2300      	movs	r3, #0
 80a3ebc:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a3ec0:	60e0      	str	r0, [r4, #12]
 80a3ec2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a3ec6:	4620      	mov	r0, r4
 80a3ec8:	6223      	str	r3, [r4, #32]
 80a3eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3ece:	f015 0f03 	tst.w	r5, #3
 80a3ed2:	d102      	bne.n	80a3eda <gmtime_r+0x132>
 80a3ed4:	fb06 5212 	mls	r2, r6, r2, r5
 80a3ed8:	b95a      	cbnz	r2, 80a3ef2 <gmtime_r+0x14a>
 80a3eda:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a3ede:	fbb5 f2f6 	udiv	r2, r5, r6
 80a3ee2:	fb06 5212 	mls	r2, r6, r2, r5
 80a3ee6:	fab2 f282 	clz	r2, r2
 80a3eea:	0952      	lsrs	r2, r2, #5
 80a3eec:	333b      	adds	r3, #59	; 0x3b
 80a3eee:	4413      	add	r3, r2
 80a3ef0:	e7e2      	b.n	80a3eb8 <gmtime_r+0x110>
 80a3ef2:	2201      	movs	r2, #1
 80a3ef4:	e7fa      	b.n	80a3eec <gmtime_r+0x144>
 80a3ef6:	bf00      	nop
 80a3ef8:	00015180 	.word	0x00015180
 80a3efc:	00023ab1 	.word	0x00023ab1
 80a3f00:	fffdc54f 	.word	0xfffdc54f
 80a3f04:	00023ab0 	.word	0x00023ab0

080a3f08 <__retarget_lock_acquire>:
 80a3f08:	4770      	bx	lr

080a3f0a <__retarget_lock_acquire_recursive>:
 80a3f0a:	4770      	bx	lr

080a3f0c <__retarget_lock_release>:
 80a3f0c:	4770      	bx	lr

080a3f0e <__retarget_lock_release_recursive>:
 80a3f0e:	4770      	bx	lr

080a3f10 <__env_lock>:
 80a3f10:	4801      	ldr	r0, [pc, #4]	; (80a3f18 <__env_lock+0x8>)
 80a3f12:	f7ff bffa 	b.w	80a3f0a <__retarget_lock_acquire_recursive>
 80a3f16:	bf00      	nop
 80a3f18:	20000d26 	.word	0x20000d26

080a3f1c <__env_unlock>:
 80a3f1c:	4801      	ldr	r0, [pc, #4]	; (80a3f24 <__env_unlock+0x8>)
 80a3f1e:	f7ff bff6 	b.w	80a3f0e <__retarget_lock_release_recursive>
 80a3f22:	bf00      	nop
 80a3f24:	20000d26 	.word	0x20000d26

080a3f28 <__aeabi_ldivmod>:
 80a3f28:	b97b      	cbnz	r3, 80a3f4a <__aeabi_ldivmod+0x22>
 80a3f2a:	b972      	cbnz	r2, 80a3f4a <__aeabi_ldivmod+0x22>
 80a3f2c:	2900      	cmp	r1, #0
 80a3f2e:	bfbe      	ittt	lt
 80a3f30:	2000      	movlt	r0, #0
 80a3f32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a3f36:	e006      	blt.n	80a3f46 <__aeabi_ldivmod+0x1e>
 80a3f38:	bf08      	it	eq
 80a3f3a:	2800      	cmpeq	r0, #0
 80a3f3c:	bf1c      	itt	ne
 80a3f3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a3f42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a3f46:	f7ff ba0b 	b.w	80a3360 <__aeabi_idiv0>
 80a3f4a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3f4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3f52:	2900      	cmp	r1, #0
 80a3f54:	db09      	blt.n	80a3f6a <__aeabi_ldivmod+0x42>
 80a3f56:	2b00      	cmp	r3, #0
 80a3f58:	db1a      	blt.n	80a3f90 <__aeabi_ldivmod+0x68>
 80a3f5a:	f7ff f89f 	bl	80a309c <__udivmoddi4>
 80a3f5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3f66:	b004      	add	sp, #16
 80a3f68:	4770      	bx	lr
 80a3f6a:	4240      	negs	r0, r0
 80a3f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f70:	2b00      	cmp	r3, #0
 80a3f72:	db1b      	blt.n	80a3fac <__aeabi_ldivmod+0x84>
 80a3f74:	f7ff f892 	bl	80a309c <__udivmoddi4>
 80a3f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3f80:	b004      	add	sp, #16
 80a3f82:	4240      	negs	r0, r0
 80a3f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f88:	4252      	negs	r2, r2
 80a3f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3f8e:	4770      	bx	lr
 80a3f90:	4252      	negs	r2, r2
 80a3f92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3f96:	f7ff f881 	bl	80a309c <__udivmoddi4>
 80a3f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3fa2:	b004      	add	sp, #16
 80a3fa4:	4240      	negs	r0, r0
 80a3fa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3faa:	4770      	bx	lr
 80a3fac:	4252      	negs	r2, r2
 80a3fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3fb2:	f7ff f873 	bl	80a309c <__udivmoddi4>
 80a3fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3fbe:	b004      	add	sp, #16
 80a3fc0:	4252      	negs	r2, r2
 80a3fc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3fc6:	4770      	bx	lr

080a3fc8 <dynalib_user>:
 80a3fc8:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a3fd8:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a3fe8:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a3ff8:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a4008:	6f70 6577 2e72 2000 6f4e 6620 6e69 6567     power.. No finge
 80a4018:	3f72 2e00 2e2e 7b00 2220 6974 656d 3a22     r?.....{ "time":
 80a4028:	2220 2200 202c 6822 6165 7472 6152 6574      ".", "heartRate
 80a4038:	3a22 0020 202c 2200 7073 326f 3a22 0020     ": ., ."spo2": .
 80a4048:	007d 6164 6174 6e45 7274 0079               }.dataEntry.

080a4054 <_ZL14uch_spo2_table>:
 80a4054:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
 80a4064:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
 80a4074:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
 80a4084:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
 80a4094:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
 80a40a4:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
 80a40b4:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
 80a40c4:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
 80a40d4:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
 80a40e4:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
 80a40f4:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
 80a4104:	0709 0506 0203 0001                         ........

080a410c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4114:	11cf 080a 11d5 080a 1225 080a 11e3 080a     ........%.......
 80a4124:	11d1 080a                                   ....

080a4128 <_ZTV7TwoWire>:
	...
 80a4130:	1775 080a 17bf 080a 1797 080a 1777 080a     u...........w...
 80a4140:	179f 080a 17a7 080a 17af 080a 17b7 080a     ................

080a4150 <_ZTV9IPAddress>:
	...
 80a4158:	1889 080a 1879 080a 187b 080a 7061 0070     ....y...{...app.

080a4168 <_ZTVN5spark12NetworkClassE>:
	...
 80a4170:	1951 080a 195b 080a 1965 080a 196f 080a     Q...[...e...o...
 80a4180:	1979 080a 1985 080a 1991 080a 1999 080a     y...............
 80a4190:	19a1 080a 19ad 080a 19b5 080a 19bf 080a     ................
 80a41a0:	19c9 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a41b0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a41c0 <_ZTV11USARTSerial>:
	...
 80a41c8:	1e15 080a 1e7f 080a 1e5b 080a 1a2d 080a     ........[...-...
 80a41d8:	1e2b 080a 1e47 080a 1e39 080a 1e55 080a     +...G...9...U...
 80a41e8:	1e17 080a 1e1d 080a                         ........

080a41f0 <_ZTV9USBSerial>:
	...
 80a41f8:	1f07 080a 1f6d 080a 1f45 080a 1a2d 080a     ....m...E...-...
 80a4208:	1f37 080a 1f09 080a 1f19 080a 1f67 080a     7...........g...
 80a4218:	1f29 080a 1f01 080a                         ).......

080a4220 <_ZTVN5spark9WiFiClassE>:
	...
 80a4228:	2137 080a 212d 080a 2123 080a 2095 080a     7!..-!..#!... ..
 80a4238:	2117 080a 210b 080a 1991 080a 1999 080a     .!...!..........
 80a4248:	20ff 080a 20f7 080a 20ed 080a 20e3 080a     . ... ... ... ..
 80a4258:	209f 080a                                   . ..

080a425c <_ZSt7nothrow>:
 80a425c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a426c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a427d <day_name.4782>:
 80a427d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a428d:	6972 6153                                    riSat

080a4292 <mon_name.4783>:
 80a4292:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a42a2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a42b2:	4476 6365 0000                              vDec..

080a42b8 <__month_lengths>:
 80a42b8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a42c8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a42d8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a42e8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a42f8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4308:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4318:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a4328:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a4338:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a4348:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a4354 <_ctype_>:
 80a4354:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a4364:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a4374:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a4384:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a4394:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a43a4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a43b4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a43c4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a43d4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a4455 <link_const_variable_data_end>:
 80a4455:	00          	.byte	0x00
	...

080a4458 <link_constructors_location>:
 80a4458:	080a0411 	.word	0x080a0411
 80a445c:	080a1941 	.word	0x080a1941
 80a4460:	080a1a19 	.word	0x080a1a19
 80a4464:	080a1ae9 	.word	0x080a1ae9
 80a4468:	080a1cb9 	.word	0x080a1cb9
 80a446c:	080a1e01 	.word	0x080a1e01
 80a4470:	080a2141 	.word	0x080a2141
 80a4474:	080a24a1 	.word	0x080a24a1

080a4478 <link_constructors_end>:
	...
