
/Users/rileycowling/Documents/GitHub/cuddly-guacamole/firmware/target/2.2.0/photon/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000045a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a45c0  080a45c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a45c8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e4  20000000  080a45cc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c44  200000e8  200000e8  000400e8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a46b0  080a46b0  000346b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a46d8  080a46d8  000346d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00129a9c  00000000  00000000  000346dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000153d3  00000000  00000000  0015e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001bb13  00000000  00000000  0017354b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002148  00000000  00000000  0018f05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000050e8  00000000  00000000  001911a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000297c8  00000000  00000000  0019628e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002ff02  00000000  00000000  001bfa56  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b650d  00000000  00000000  001ef958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005acc  00000000  00000000  002a5e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fb3d 	bl	80a36ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fb45 	bl	80a36c8 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a45cc 	.word	0x080a45cc
 80a004c:	200000e4 	.word	0x200000e4
 80a0050:	200000e8 	.word	0x200000e8
 80a0054:	20000d29 	.word	0x20000d29
 80a0058:	20000d29 	.word	0x20000d29

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f9a9 	bl	80a23b4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a459c 	.word	0x080a459c
 80a0080:	080a45bc 	.word	0x080a45bc

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f863 	bl	80a0154 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b947 	b.w	80a2324 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 b8ad 	b.w	80a11f4 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 b8ab 	b.w	80a11f4 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 b8b1 	b.w	80a1204 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int fingerPresent;
bool rangeSetter = false;


void setup()
{
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
 80a00b6:	f001 fffd 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00be:	f001 ffdf 	bl	80a2080 <_ZN9USBSerial5beginEl>

  //setting up status LEDS
  pinMode(R_LED,OUTPUT);
 80a00c2:	4b1c      	ldr	r3, [pc, #112]	; (80a0134 <setup+0x80>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	8818      	ldrh	r0, [r3, #0]
 80a00c8:	f002 f9f0 	bl	80a24ac <pinMode>
  pinMode(G_LED,OUTPUT);
 80a00cc:	4b1a      	ldr	r3, [pc, #104]	; (80a0138 <setup+0x84>)
 80a00ce:	2101      	movs	r1, #1
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f002 f9eb 	bl	80a24ac <pinMode>
  pinMode(B_LED,OUTPUT);
 80a00d6:	4b19      	ldr	r3, [pc, #100]	; (80a013c <setup+0x88>)
 80a00d8:	2101      	movs	r1, #1
 80a00da:	8818      	ldrh	r0, [r3, #0]
 80a00dc:	f002 f9e6 	bl	80a24ac <pinMode>
  pinMode(W_LED,OUTPUT);
 80a00e0:	4b17      	ldr	r3, [pc, #92]	; (80a0140 <setup+0x8c>)
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	8818      	ldrh	r0, [r3, #0]
 80a00e6:	f002 f9e1 	bl	80a24ac <pinMode>

  // Initialize sensor, if something is wrong go into the following infinite loop
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a00ea:	f002 fa23 	bl	80a2534 <_Z19__fetch_global_Wirev>
 80a00ee:	2357      	movs	r3, #87	; 0x57
 80a00f0:	4601      	mov	r1, r0
 80a00f2:	4a14      	ldr	r2, [pc, #80]	; (80a0144 <setup+0x90>)
 80a00f4:	4814      	ldr	r0, [pc, #80]	; (80a0148 <setup+0x94>)
 80a00f6:	f000 fb1b 	bl	80a0730 <_ZN8MAX301055beginER7TwoWiremh>
 80a00fa:	b928      	cbnz	r0, 80a0108 <setup+0x54>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
 80a00fc:	f001 ffda 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0100:	4912      	ldr	r1, [pc, #72]	; (80a014c <setup+0x98>)
 80a0102:	f001 fd40 	bl	80a1b86 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
 80a0106:	e7fe      	b.n	80a0106 <setup+0x52>
  }

  //Print the OK Message to continue
  Serial.println(F("Attach sensor to finger with rubber band to Begin!"));
 80a0108:	f001 ffd4 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a010c:	4910      	ldr	r1, [pc, #64]	; (80a0150 <setup+0x9c>)
 80a010e:	f001 fd3a 	bl	80a1b86 <_ZN5Print7printlnEPK19__FlashStringHelper>
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  //Configure sensor with these settings
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); 
 80a0112:	f240 139b 	movw	r3, #411	; 0x19b
 80a0116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a011a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a011e:	2364      	movs	r3, #100	; 0x64
 80a0120:	2204      	movs	r2, #4
 80a0122:	9300      	str	r3, [sp, #0]
 80a0124:	213c      	movs	r1, #60	; 0x3c
 80a0126:	2302      	movs	r3, #2
 80a0128:	4807      	ldr	r0, [pc, #28]	; (80a0148 <setup+0x94>)
 80a012a:	f000 fbc0 	bl	80a08ae <_ZN8MAX301055setupEhhhiii>
}
 80a012e:	b005      	add	sp, #20
 80a0130:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0134:	20000008 	.word	0x20000008
 80a0138:	20000004 	.word	0x20000004
 80a013c:	20000000 	.word	0x20000000
 80a0140:	2000000c 	.word	0x2000000c
 80a0144:	00061a80 	.word	0x00061a80
 80a0148:	20000288 	.word	0x20000288
 80a014c:	080a40b8 	.word	0x080a40b8
 80a0150:	080a40eb 	.word	0x080a40eb

080a0154 <loop>:

void loop(){ 
 80a0154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** Finger detection before getting started **/
  if (particleSensor.getIR() < 50000){
 80a0158:	4857      	ldr	r0, [pc, #348]	; (80a02b8 <loop+0x164>)
void loop(){ 
 80a015a:	b099      	sub	sp, #100	; 0x64
  if (particleSensor.getIR() < 50000){
 80a015c:	f000 fad0 	bl	80a0700 <_ZN8MAX301055getIREv>
 80a0160:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a0164:	4298      	cmp	r0, r3
 80a0166:	4f55      	ldr	r7, [pc, #340]	; (80a02bc <loop+0x168>)
 80a0168:	4e55      	ldr	r6, [pc, #340]	; (80a02c0 <loop+0x16c>)
 80a016a:	d838      	bhi.n	80a01de <loop+0x8a>
    //Setting finger status to zero for not present
    fingerPresent=0;
 80a016c:	2500      	movs	r5, #0
 80a016e:	4c55      	ldr	r4, [pc, #340]	; (80a02c4 <loop+0x170>)

    //No finger turn turn off B/G LEDs
    digitalWrite(G_LED,LOW);
 80a0170:	4629      	mov	r1, r5
 80a0172:	8838      	ldrh	r0, [r7, #0]
    fingerPresent=0;
 80a0174:	6025      	str	r5, [r4, #0]
    digitalWrite(G_LED,LOW);
 80a0176:	f002 f9aa 	bl	80a24ce <digitalWrite>
    digitalWrite(B_LED, LOW);
 80a017a:	4b53      	ldr	r3, [pc, #332]	; (80a02c8 <loop+0x174>)
 80a017c:	4629      	mov	r1, r5
 80a017e:	8818      	ldrh	r0, [r3, #0]
 80a0180:	f002 f9a5 	bl	80a24ce <digitalWrite>
    Serial.println(" No finger?");
 80a0184:	f001 ff96 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0188:	4950      	ldr	r1, [pc, #320]	; (80a02cc <loop+0x178>)
 80a018a:	f001 fcf2 	bl	80a1b72 <_ZN5Print7printlnEPKc>
    
    //we dont want to take unnecessary data
    //while there is no finger flash red LED
    while(fingerPresent==0){ 
      digitalWrite(R_LED,HIGH);
 80a018e:	f04f 0901 	mov.w	r9, #1
      delay(200);
      digitalWrite(R_LED,LOW);
      delay(200);
      if(!(particleSensor.getIR() < 50000)){
 80a0192:	f8df a124 	ldr.w	sl, [pc, #292]	; 80a02b8 <loop+0x164>
        fingerPresent=1; //Set finger status to 1 for present
        Serial.println("Finger Detected -- Initializing");
 80a0196:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80a02f8 <loop+0x1a4>
    while(fingerPresent==0){ 
 80a019a:	6825      	ldr	r5, [r4, #0]
 80a019c:	b9e5      	cbnz	r5, 80a01d8 <loop+0x84>
      digitalWrite(R_LED,HIGH);
 80a019e:	2101      	movs	r1, #1
 80a01a0:	8830      	ldrh	r0, [r6, #0]
 80a01a2:	f002 f994 	bl	80a24ce <digitalWrite>
      delay(200);
 80a01a6:	20c8      	movs	r0, #200	; 0xc8
 80a01a8:	f001 f864 	bl	80a1274 <delay>
      digitalWrite(R_LED,LOW);
 80a01ac:	4629      	mov	r1, r5
 80a01ae:	8830      	ldrh	r0, [r6, #0]
 80a01b0:	f002 f98d 	bl	80a24ce <digitalWrite>
      delay(200);
 80a01b4:	20c8      	movs	r0, #200	; 0xc8
 80a01b6:	f001 f85d 	bl	80a1274 <delay>
      if(!(particleSensor.getIR() < 50000)){
 80a01ba:	4650      	mov	r0, sl
 80a01bc:	f000 faa0 	bl	80a0700 <_ZN8MAX301055getIREv>
 80a01c0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a01c4:	4298      	cmp	r0, r3
 80a01c6:	d9e8      	bls.n	80a019a <loop+0x46>
        fingerPresent=1; //Set finger status to 1 for present
 80a01c8:	f8c4 9000 	str.w	r9, [r4]
        Serial.println("Finger Detected -- Initializing");
 80a01cc:	f001 ff72 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a01d0:	4641      	mov	r1, r8
 80a01d2:	f001 fcce 	bl	80a1b72 <_ZN5Print7printlnEPKc>
 80a01d6:	e7e0      	b.n	80a019a <loop+0x46>
      }
    }
    rangeSetter=false; // this recalculates the range if the finger has been removed 
 80a01d8:	2200      	movs	r2, #0
 80a01da:	4b3d      	ldr	r3, [pc, #244]	; (80a02d0 <loop+0x17c>)
 80a01dc:	701a      	strb	r2, [r3, #0]
  }

  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a01de:	2364      	movs	r3, #100	; 0x64
 80a01e0:	4c3c      	ldr	r4, [pc, #240]	; (80a02d4 <loop+0x180>)
  
  //Finger present turn off Red LED and turn on Green LED
  digitalWrite(G_LED,HIGH);
 80a01e2:	2101      	movs	r1, #1
 80a01e4:	8838      	ldrh	r0, [r7, #0]
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a01e6:	6023      	str	r3, [r4, #0]
  digitalWrite(G_LED,HIGH);
 80a01e8:	f002 f971 	bl	80a24ce <digitalWrite>
  digitalWrite(R_LED,LOW);
 80a01ec:	2100      	movs	r1, #0
 80a01ee:	8830      	ldrh	r0, [r6, #0]
 80a01f0:	f002 f96d 	bl	80a24ce <digitalWrite>

  if(!rangeSetter){
 80a01f4:	4b36      	ldr	r3, [pc, #216]	; (80a02d0 <loop+0x17c>)
 80a01f6:	781d      	ldrb	r5, [r3, #0]
 80a01f8:	4698      	mov	r8, r3
 80a01fa:	2d00      	cmp	r5, #0
 80a01fc:	d13d      	bne.n	80a027a <loop+0x126>
    //read the first 100 samples, and determine the signal range
    digitalWrite(W_LED,HIGH);
 80a01fe:	4f36      	ldr	r7, [pc, #216]	; (80a02d8 <loop+0x184>)
 80a0200:	2101      	movs	r1, #1
 80a0202:	8838      	ldrh	r0, [r7, #0]
 80a0204:	f002 f963 	bl	80a24ce <digitalWrite>
    Serial.println("...");
 80a0208:	f001 ff54 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a020c:	4933      	ldr	r1, [pc, #204]	; (80a02dc <loop+0x188>)
 80a020e:	f001 fcb0 	bl	80a1b72 <_ZN5Print7printlnEPKc>
    for (byte i = 0 ; i < bufferLength ; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
 80a0212:	4e29      	ldr	r6, [pc, #164]	; (80a02b8 <loop+0x164>)
        particleSensor.check(); //Check the sensor for new data

      redBuffer[i] = particleSensor.getRed();
 80a0214:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a02e4 <loop+0x190>
      irBuffer[i] = particleSensor.getIR();
 80a0218:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80a02ec <loop+0x198>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a021c:	6823      	ldr	r3, [r4, #0]
 80a021e:	fa5f f985 	uxtb.w	r9, r5
 80a0222:	4599      	cmp	r9, r3
 80a0224:	da16      	bge.n	80a0254 <loop+0x100>
      while (particleSensor.available() == false) //do we have new data?
 80a0226:	4630      	mov	r0, r6
 80a0228:	f000 f967 	bl	80a04fa <_ZN8MAX301059availableEv>
 80a022c:	b918      	cbnz	r0, 80a0236 <loop+0xe2>
        particleSensor.check(); //Check the sensor for new data
 80a022e:	4630      	mov	r0, r6
 80a0230:	f000 f9a5 	bl	80a057e <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
 80a0234:	e7f7      	b.n	80a0226 <loop+0xd2>
      redBuffer[i] = particleSensor.getRed();
 80a0236:	4630      	mov	r0, r6
 80a0238:	f000 fa56 	bl	80a06e8 <_ZN8MAX301056getRedEv>
 80a023c:	f84b 0029 	str.w	r0, [fp, r9, lsl #2]
      irBuffer[i] = particleSensor.getIR();
 80a0240:	4630      	mov	r0, r6
 80a0242:	f000 fa5d 	bl	80a0700 <_ZN8MAX301055getIREv>
 80a0246:	f84a 0029 	str.w	r0, [sl, r9, lsl #2]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a024a:	4630      	mov	r0, r6
 80a024c:	f000 f962 	bl	80a0514 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0250:	3501      	adds	r5, #1
 80a0252:	e7e3      	b.n	80a021c <loop+0xc8>

    }
    rangeSetter=true; 
 80a0254:	2301      	movs	r3, #1
    digitalWrite(W_LED,LOW);
 80a0256:	2100      	movs	r1, #0
 80a0258:	8838      	ldrh	r0, [r7, #0]
    rangeSetter=true; 
 80a025a:	f888 3000 	strb.w	r3, [r8]
    digitalWrite(W_LED,LOW);
 80a025e:	f002 f936 	bl	80a24ce <digitalWrite>
    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate); 
 80a0262:	4b1f      	ldr	r3, [pc, #124]	; (80a02e0 <loop+0x18c>)
 80a0264:	4a1f      	ldr	r2, [pc, #124]	; (80a02e4 <loop+0x190>)
 80a0266:	9302      	str	r3, [sp, #8]
 80a0268:	4b1f      	ldr	r3, [pc, #124]	; (80a02e8 <loop+0x194>)
 80a026a:	4820      	ldr	r0, [pc, #128]	; (80a02ec <loop+0x198>)
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	4b20      	ldr	r3, [pc, #128]	; (80a02f0 <loop+0x19c>)
 80a0270:	9300      	str	r3, [sp, #0]
 80a0272:	6821      	ldr	r1, [r4, #0]
 80a0274:	4b1f      	ldr	r3, [pc, #124]	; (80a02f4 <loop+0x1a0>)
 80a0276:	f000 fc7f 	bl	80a0b78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  }
  
  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  
  digitalWrite(B_LED,HIGH); //Status
 80a027a:	4b13      	ldr	r3, [pc, #76]	; (80a02c8 <loop+0x174>)
 80a027c:	2101      	movs	r1, #1
 80a027e:	8818      	ldrh	r0, [r3, #0]
 80a0280:	f002 f925 	bl	80a24ce <digitalWrite>

  //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
  for (byte i = 25; i < 100; i++)
 80a0284:	4917      	ldr	r1, [pc, #92]	; (80a02e4 <loop+0x190>)
 80a0286:	4a19      	ldr	r2, [pc, #100]	; (80a02ec <loop+0x198>)
  digitalWrite(B_LED,HIGH); //Status
 80a0288:	234b      	movs	r3, #75	; 0x4b
 80a028a:	4688      	mov	r8, r1
 80a028c:	4617      	mov	r7, r2
  {
    redBuffer[i - 25] = redBuffer[i];
 80a028e:	6e48      	ldr	r0, [r1, #100]	; 0x64
 80a0290:	3b01      	subs	r3, #1
 80a0292:	f841 0b04 	str.w	r0, [r1], #4
    irBuffer[i - 25] = irBuffer[i];
 80a0296:	6e50      	ldr	r0, [r2, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a0298:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    irBuffer[i - 25] = irBuffer[i];
 80a029c:	f842 0b04 	str.w	r0, [r2], #4
  for (byte i = 25; i < 100; i++)
 80a02a0:	d1f5      	bne.n	80a028e <loop+0x13a>
 80a02a2:	254b      	movs	r5, #75	; 0x4b
  
  //take 25 sets of samples before calculating the heart rate.
  for (byte i = 75; i < 100; i++)
  {

    while (particleSensor.available() == false) //do we have new data?
 80a02a4:	4e04      	ldr	r6, [pc, #16]	; (80a02b8 <loop+0x164>)
 80a02a6:	4630      	mov	r0, r6
 80a02a8:	f000 f927 	bl	80a04fa <_ZN8MAX301059availableEv>
 80a02ac:	bb30      	cbnz	r0, 80a02fc <loop+0x1a8>
      particleSensor.check(); //Check the sensor for new data
 80a02ae:	4630      	mov	r0, r6
 80a02b0:	f000 f965 	bl	80a057e <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
 80a02b4:	e7f7      	b.n	80a02a6 <loop+0x152>
 80a02b6:	bf00      	nop
 80a02b8:	20000288 	.word	0x20000288
 80a02bc:	20000004 	.word	0x20000004
 80a02c0:	20000008 	.word	0x20000008
 80a02c4:	200000f0 	.word	0x200000f0
 80a02c8:	20000000 	.word	0x20000000
 80a02cc:	080a411e 	.word	0x080a411e
 80a02d0:	200002c4 	.word	0x200002c4
 80a02d4:	200000ec 	.word	0x200000ec
 80a02d8:	2000000c 	.word	0x2000000c
 80a02dc:	080a414a 	.word	0x080a414a
 80a02e0:	2000045c 	.word	0x2000045c
 80a02e4:	200002c8 	.word	0x200002c8
 80a02e8:	200000f4 	.word	0x200000f4
 80a02ec:	200000f8 	.word	0x200000f8
 80a02f0:	2000045d 	.word	0x2000045d
 80a02f4:	20000458 	.word	0x20000458
 80a02f8:	080a412a 	.word	0x080a412a

    redBuffer[i] = particleSensor.getRed();
 80a02fc:	4630      	mov	r0, r6
 80a02fe:	f000 f9f3 	bl	80a06e8 <_ZN8MAX301056getRedEv>
 80a0302:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    irBuffer[i] = particleSensor.getIR();
 80a0306:	4630      	mov	r0, r6
 80a0308:	f000 f9fa 	bl	80a0700 <_ZN8MAX301055getIREv>
 80a030c:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a0310:	4630      	mov	r0, r6
 80a0312:	3501      	adds	r5, #1
 80a0314:	f000 f8fe 	bl	80a0514 <_ZN8MAX3010510nextSampleEv>
  for (byte i = 75; i < 100; i++)
 80a0318:	2d64      	cmp	r5, #100	; 0x64
 80a031a:	d1c4      	bne.n	80a02a6 <loop+0x152>
  }
  
  //After gathering 25 new samples recalculate HR and SP02
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a031c:	4b5e      	ldr	r3, [pc, #376]	; (80a0498 <loop+0x344>)
 80a031e:	4f5f      	ldr	r7, [pc, #380]	; (80a049c <loop+0x348>)
 80a0320:	9302      	str	r3, [sp, #8]
 80a0322:	4b5f      	ldr	r3, [pc, #380]	; (80a04a0 <loop+0x34c>)
 80a0324:	9701      	str	r7, [sp, #4]
 80a0326:	9300      	str	r3, [sp, #0]
 80a0328:	4a5e      	ldr	r2, [pc, #376]	; (80a04a4 <loop+0x350>)
 80a032a:	4b5f      	ldr	r3, [pc, #380]	; (80a04a8 <loop+0x354>)
 80a032c:	6821      	ldr	r1, [r4, #0]
 80a032e:	485f      	ldr	r0, [pc, #380]	; (80a04ac <loop+0x358>)
 80a0330:	f000 fc22 	bl	80a0b78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  
  //** DATA PRINTING **//
  //Heart Rate Values
  Serial.print(F("HR= "));
 80a0334:	f001 febe 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0338:	495d      	ldr	r1, [pc, #372]	; (80a04b0 <loop+0x35c>)
 80a033a:	f001 fc0a 	bl	80a1b52 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(heartRate, DEC);
 80a033e:	f001 feb9 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0342:	683c      	ldr	r4, [r7, #0]
 80a0344:	4605      	mov	r5, r0
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0346:	2c00      	cmp	r4, #0
 80a0348:	f280 80a2 	bge.w	80a0490 <loop+0x33c>
            t = print('-');
 80a034c:	212d      	movs	r1, #45	; 0x2d
 80a034e:	f001 fbfd 	bl	80a1b4c <_ZN5Print5printEc>
            val = -n;
 80a0352:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0354:	220a      	movs	r2, #10
 80a0356:	4628      	mov	r0, r5
 80a0358:	f001 fc17 	bl	80a1b8a <_ZN5Print11printNumberEmh>
  Serial.print(F(" BPM"));
 80a035c:	f001 feaa 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0360:	4954      	ldr	r1, [pc, #336]	; (80a04b4 <loop+0x360>)
 80a0362:	f001 fbf6 	bl	80a1b52 <_ZN5Print5printEPK19__FlashStringHelper>
  //Blood Oxygen Values 
  Serial.print(F(", SPO2= "));
 80a0366:	f001 fea5 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a036a:	4953      	ldr	r1, [pc, #332]	; (80a04b8 <loop+0x364>)
 80a036c:	f001 fbf1 	bl	80a1b52 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(spo2, DEC);
 80a0370:	f001 fea0 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0374:	4d4c      	ldr	r5, [pc, #304]	; (80a04a8 <loop+0x354>)
 80a0376:	4606      	mov	r6, r0
 80a0378:	682c      	ldr	r4, [r5, #0]
        if (n < 0 && base == 10) {
 80a037a:	2c00      	cmp	r4, #0
 80a037c:	f280 808a 	bge.w	80a0494 <loop+0x340>
            t = print('-');
 80a0380:	212d      	movs	r1, #45	; 0x2d
 80a0382:	f001 fbe3 	bl	80a1b4c <_ZN5Print5printEc>
            val = -n;
 80a0386:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a0388:	220a      	movs	r2, #10
 80a038a:	4630      	mov	r0, r6
 80a038c:	f001 fbfd 	bl	80a1b8a <_ZN5Print11printNumberEmh>
  Serial.print(F("%"));
  Serial.println();

  digitalWrite(W_LED,HIGH);
 80a0390:	4e4a      	ldr	r6, [pc, #296]	; (80a04bc <loop+0x368>)
  Serial.print(F("%"));
 80a0392:	f001 fe8f 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a0396:	494a      	ldr	r1, [pc, #296]	; (80a04c0 <loop+0x36c>)
 80a0398:	f001 fbdb 	bl	80a1b52 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println();
 80a039c:	f001 fe8a 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a03a0:	f001 fbdb 	bl	80a1b5a <_ZN5Print7printlnEv>
  digitalWrite(W_LED,HIGH);
 80a03a4:	2101      	movs	r1, #1
 80a03a6:	8830      	ldrh	r0, [r6, #0]
 80a03a8:	f002 f891 	bl	80a24ce <digitalWrite>
  delay(200);
 80a03ac:	20c8      	movs	r0, #200	; 0xc8
 80a03ae:	f000 ff61 	bl	80a1274 <delay>
  digitalWrite(W_LED,LOW);
 80a03b2:	2100      	movs	r1, #0
 80a03b4:	8830      	ldrh	r0, [r6, #0]
 80a03b6:	f002 f88a 	bl	80a24ce <digitalWrite>

  Time.zone(-7);
 80a03ba:	4842      	ldr	r0, [pc, #264]	; (80a04c4 <loop+0x370>)
 80a03bc:	f001 fd0a 	bl	80a1dd4 <_ZN9TimeClass4zoneEf>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a03c0:	f001 fd7b 	bl	80a1eba <_ZN9TimeClass3nowEv>
 80a03c4:	17c3      	asrs	r3, r0, #31
 80a03c6:	4602      	mov	r2, r0
 80a03c8:	a804      	add	r0, sp, #16
 80a03ca:	f001 fd21 	bl	80a1e10 <_ZN9TimeClass7timeStrEx>
  String time = Time.timeStr();

  //Webhook for sending data to the server
  String data1 = String(heartRate);
 80a03ce:	220a      	movs	r2, #10
 80a03d0:	6839      	ldr	r1, [r7, #0]
 80a03d2:	a808      	add	r0, sp, #32
 80a03d4:	f001 fc93 	bl	80a1cfe <_ZN6StringC1Elh>
  String data2 = String(spo2);
 80a03d8:	220a      	movs	r2, #10
 80a03da:	6829      	ldr	r1, [r5, #0]
 80a03dc:	a80c      	add	r0, sp, #48	; 0x30
 80a03de:	f001 fc8e 	bl	80a1cfe <_ZN6StringC1Elh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03e2:	4939      	ldr	r1, [pc, #228]	; (80a04c8 <loop+0x374>)
 80a03e4:	a814      	add	r0, sp, #80	; 0x50
 80a03e6:	f001 fc4c 	bl	80a1c82 <_ZN6StringC1EPKc>
  String data = "{ \"time\": " + time + ", \"heartRate\": " + data1 + ", " + "\"spo2\": " + data2 + "}";
 80a03ea:	a904      	add	r1, sp, #16
 80a03ec:	a814      	add	r0, sp, #80	; 0x50
 80a03ee:	f001 fcb0 	bl	80a1d52 <_ZplRK15StringSumHelperRK6String>
 80a03f2:	4936      	ldr	r1, [pc, #216]	; (80a04cc <loop+0x378>)
 80a03f4:	f001 fcb9 	bl	80a1d6a <_ZplRK15StringSumHelperPKc>
 80a03f8:	a908      	add	r1, sp, #32
 80a03fa:	f001 fcaa 	bl	80a1d52 <_ZplRK15StringSumHelperRK6String>
 80a03fe:	4934      	ldr	r1, [pc, #208]	; (80a04d0 <loop+0x37c>)
 80a0400:	f001 fcb3 	bl	80a1d6a <_ZplRK15StringSumHelperPKc>
 80a0404:	4933      	ldr	r1, [pc, #204]	; (80a04d4 <loop+0x380>)
 80a0406:	f001 fcb0 	bl	80a1d6a <_ZplRK15StringSumHelperPKc>
 80a040a:	a90c      	add	r1, sp, #48	; 0x30
 80a040c:	f001 fca1 	bl	80a1d52 <_ZplRK15StringSumHelperRK6String>
 80a0410:	4931      	ldr	r1, [pc, #196]	; (80a04d8 <loop+0x384>)
 80a0412:	f001 fcaa 	bl	80a1d6a <_ZplRK15StringSumHelperPKc>
 80a0416:	4601      	mov	r1, r0
 80a0418:	a810      	add	r0, sp, #64	; 0x40
 80a041a:	f001 fc54 	bl	80a1cc6 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a041e:	a814      	add	r0, sp, #80	; 0x50
 80a0420:	f001 fbe5 	bl	80a1bee <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0424:	4b2d      	ldr	r3, [pc, #180]	; (80a04dc <loop+0x388>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0426:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a0428:	781b      	ldrb	r3, [r3, #0]
 80a042a:	492d      	ldr	r1, [pc, #180]	; (80a04e0 <loop+0x38c>)
 80a042c:	f88d 3000 	strb.w	r3, [sp]
 80a0430:	a814      	add	r0, sp, #80	; 0x50
 80a0432:	233c      	movs	r3, #60	; 0x3c
 80a0434:	f001 f892 	bl	80a155c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0438:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80a043a:	b17c      	cbz	r4, 80a045c <loop+0x308>
      if (--_M_use_count == 0)
 80a043c:	6863      	ldr	r3, [r4, #4]
 80a043e:	3b01      	subs	r3, #1
 80a0440:	6063      	str	r3, [r4, #4]
 80a0442:	b95b      	cbnz	r3, 80a045c <loop+0x308>
          _M_dispose();
 80a0444:	6823      	ldr	r3, [r4, #0]
 80a0446:	4620      	mov	r0, r4
 80a0448:	689b      	ldr	r3, [r3, #8]
 80a044a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a044c:	68a3      	ldr	r3, [r4, #8]
 80a044e:	3b01      	subs	r3, #1
 80a0450:	60a3      	str	r3, [r4, #8]
 80a0452:	b91b      	cbnz	r3, 80a045c <loop+0x308>
            _M_destroy();
 80a0454:	6823      	ldr	r3, [r4, #0]
 80a0456:	4620      	mov	r0, r4
 80a0458:	68db      	ldr	r3, [r3, #12]
 80a045a:	4798      	blx	r3
  Particle.publish("dataEntry", data, PRIVATE);
  //LED to let you know the data was sent
  digitalWrite(W_LED,HIGH);
 80a045c:	2101      	movs	r1, #1
 80a045e:	8830      	ldrh	r0, [r6, #0]
 80a0460:	f002 f835 	bl	80a24ce <digitalWrite>
  delay(200);
 80a0464:	20c8      	movs	r0, #200	; 0xc8
 80a0466:	f000 ff05 	bl	80a1274 <delay>
  digitalWrite(W_LED,LOW);
 80a046a:	2100      	movs	r1, #0
 80a046c:	8830      	ldrh	r0, [r6, #0]
 80a046e:	f002 f82e 	bl	80a24ce <digitalWrite>
  String data = "{ \"time\": " + time + ", \"heartRate\": " + data1 + ", " + "\"spo2\": " + data2 + "}";
 80a0472:	a810      	add	r0, sp, #64	; 0x40
 80a0474:	f001 fbbb 	bl	80a1bee <_ZN6StringD1Ev>
  String data2 = String(spo2);
 80a0478:	a80c      	add	r0, sp, #48	; 0x30
 80a047a:	f001 fbb8 	bl	80a1bee <_ZN6StringD1Ev>
  String data1 = String(heartRate);
 80a047e:	a808      	add	r0, sp, #32
 80a0480:	f001 fbb5 	bl	80a1bee <_ZN6StringD1Ev>
  String time = Time.timeStr();
 80a0484:	a804      	add	r0, sp, #16
 80a0486:	f001 fbb2 	bl	80a1bee <_ZN6StringD1Ev>

}
 80a048a:	b019      	add	sp, #100	; 0x64
 80a048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            val = n;
 80a0490:	4621      	mov	r1, r4
 80a0492:	e75f      	b.n	80a0354 <loop+0x200>
 80a0494:	4621      	mov	r1, r4
 80a0496:	e777      	b.n	80a0388 <loop+0x234>
 80a0498:	2000045c 	.word	0x2000045c
 80a049c:	200000f4 	.word	0x200000f4
 80a04a0:	2000045d 	.word	0x2000045d
 80a04a4:	200002c8 	.word	0x200002c8
 80a04a8:	20000458 	.word	0x20000458
 80a04ac:	200000f8 	.word	0x200000f8
 80a04b0:	080a414e 	.word	0x080a414e
 80a04b4:	080a4153 	.word	0x080a4153
 80a04b8:	080a4158 	.word	0x080a4158
 80a04bc:	2000000c 	.word	0x2000000c
 80a04c0:	080a4161 	.word	0x080a4161
 80a04c4:	c0e00000 	.word	0xc0e00000
 80a04c8:	080a4163 	.word	0x080a4163
 80a04cc:	080a416e 	.word	0x080a416e
 80a04d0:	080a417e 	.word	0x080a417e
 80a04d4:	080a4181 	.word	0x080a4181
 80a04d8:	080a418a 	.word	0x080a418a
 80a04dc:	200000e8 	.word	0x200000e8
 80a04e0:	080a418c 	.word	0x080a418c

080a04e4 <_GLOBAL__sub_I_particleSensor>:
        val_(val) {
 80a04e4:	2201      	movs	r2, #1
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <_GLOBAL__sub_I_particleSensor+0xc>)
MAX30105 particleSensor;
 80a04e8:	4802      	ldr	r0, [pc, #8]	; (80a04f4 <_GLOBAL__sub_I_particleSensor+0x10>)
 80a04ea:	701a      	strb	r2, [r3, #0]
 80a04ec:	f000 b804 	b.w	80a04f8 <_ZN8MAX30105C1Ev>
 80a04f0:	200000e8 	.word	0x200000e8
 80a04f4:	20000288 	.word	0x20000288

080a04f8 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a04f8:	4770      	bx	lr

080a04fa <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
 80a04fa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a04fe:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80a0502:	1a18      	subs	r0, r3, r0
 80a0504:	b2c3      	uxtb	r3, r0
 80a0506:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 80a0508:	2800      	cmp	r0, #0
 80a050a:	bfbc      	itt	lt
 80a050c:	1d18      	addlt	r0, r3, #4
 80a050e:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
 80a0510:	b2c0      	uxtb	r0, r0
 80a0512:	4770      	bx	lr

080a0514 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
 80a0518:	f7ff ffef 	bl	80a04fa <_ZN8MAX301059availableEv>
 80a051c:	b130      	cbz	r0, 80a052c <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
 80a051e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80a0522:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
 80a0524:	f003 0303 	and.w	r3, r3, #3
 80a0528:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
 80a052c:	bd08      	pop	{r3, pc}

080a052e <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a052e:	b570      	push	{r4, r5, r6, lr}
 80a0530:	4604      	mov	r4, r0
 80a0532:	4616      	mov	r6, r2
 80a0534:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a0536:	6800      	ldr	r0, [r0, #0]
 80a0538:	f001 f9fa 	bl	80a1930 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a053c:	6820      	ldr	r0, [r4, #0]
 80a053e:	4631      	mov	r1, r6
 80a0540:	6803      	ldr	r3, [r0, #0]
 80a0542:	689b      	ldr	r3, [r3, #8]
 80a0544:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a0546:	2100      	movs	r1, #0
 80a0548:	6820      	ldr	r0, [r4, #0]
 80a054a:	f001 f9f8 	bl	80a193e <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a054e:	2201      	movs	r2, #1
 80a0550:	4629      	mov	r1, r5
 80a0552:	6820      	ldr	r0, [r4, #0]
 80a0554:	f001 f9e9 	bl	80a192a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a0558:	6820      	ldr	r0, [r4, #0]
 80a055a:	6803      	ldr	r3, [r0, #0]
 80a055c:	691b      	ldr	r3, [r3, #16]
 80a055e:	4798      	blx	r3
 80a0560:	b120      	cbz	r0, 80a056c <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a0562:	6820      	ldr	r0, [r4, #0]
 80a0564:	6803      	ldr	r3, [r0, #0]
 80a0566:	695b      	ldr	r3, [r3, #20]
 80a0568:	4798      	blx	r3
 80a056a:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a056c:	bd70      	pop	{r4, r5, r6, pc}

080a056e <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a056e:	2204      	movs	r2, #4
 80a0570:	7901      	ldrb	r1, [r0, #4]
 80a0572:	f7ff bfdc 	b.w	80a052e <_ZN8MAX3010513readRegister8Ehh>

080a0576 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a0576:	2206      	movs	r2, #6
 80a0578:	7901      	ldrb	r1, [r0, #4]
 80a057a:	f7ff bfd8 	b.w	80a052e <_ZN8MAX3010513readRegister8Ehh>

080a057e <_ZN8MAX301055checkEv>:
{
 80a057e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0582:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
 80a0584:	f7ff fff7 	bl	80a0576 <_ZN8MAX3010514getReadPointerEv>
 80a0588:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
 80a058a:	4620      	mov	r0, r4
 80a058c:	f7ff ffef 	bl	80a056e <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
 80a0590:	4286      	cmp	r6, r0
 80a0592:	f000 808e 	beq.w	80a06b2 <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a0596:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0598:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a059c:	6820      	ldr	r0, [r4, #0]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a059e:	bf48      	it	mi
 80a05a0:	3620      	addmi	r6, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a05a2:	7967      	ldrb	r7, [r4, #5]
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a05a4:	f001 f9c8 	bl	80a1938 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a05a8:	6820      	ldr	r0, [r4, #0]
 80a05aa:	2107      	movs	r1, #7
 80a05ac:	6803      	ldr	r3, [r0, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a05ae:	f04f 0820 	mov.w	r8, #32
    _i2cPort->write(MAX30105_FIFODATA);
 80a05b2:	689b      	ldr	r3, [r3, #8]
 80a05b4:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a05b6:	6820      	ldr	r0, [r4, #0]
 80a05b8:	f001 f9c5 	bl	80a1946 <_ZN7TwoWire15endTransmissionEv>
        temp[3] = 0;
 80a05bc:	f04f 0900 	mov.w	r9, #0
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a05c0:	4377      	muls	r7, r6
 80a05c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
 80a05c6:	2f00      	cmp	r7, #0
 80a05c8:	dd74      	ble.n	80a06b4 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
 80a05ca:	2f20      	cmp	r7, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a05cc:	bfc9      	itett	gt
 80a05ce:	7965      	ldrbgt	r5, [r4, #5]
 80a05d0:	463d      	movle	r5, r7
 80a05d2:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a05d6:	fbb8 f2f5 	udivgt	r2, r8, r5
 80a05da:	bfc8      	it	gt
 80a05dc:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a05de:	2157      	movs	r1, #87	; 0x57
 80a05e0:	462a      	mov	r2, r5
 80a05e2:	6820      	ldr	r0, [r4, #0]
      bytesLeftToRead -= toGet;
 80a05e4:	1b7f      	subs	r7, r7, r5
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a05e6:	f001 f9a0 	bl	80a192a <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
 80a05ea:	2d00      	cmp	r5, #0
 80a05ec:	ddeb      	ble.n	80a05c6 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
 80a05ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a05f2:	6820      	ldr	r0, [r4, #0]
        sense.head++; //Advance the head of the storage struct
 80a05f4:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a05f6:	f003 0303 	and.w	r3, r3, #3
 80a05fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a05fe:	6803      	ldr	r3, [r0, #0]
        temp[3] = 0;
 80a0600:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a0604:	695b      	ldr	r3, [r3, #20]
 80a0606:	4798      	blx	r3
 80a0608:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a060c:	6820      	ldr	r0, [r4, #0]
 80a060e:	6803      	ldr	r3, [r0, #0]
 80a0610:	695b      	ldr	r3, [r3, #20]
 80a0612:	4798      	blx	r3
 80a0614:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a0618:	6820      	ldr	r0, [r4, #0]
 80a061a:	6803      	ldr	r3, [r0, #0]
 80a061c:	695b      	ldr	r3, [r3, #20]
 80a061e:	4798      	blx	r3
 80a0620:	f88d 0004 	strb.w	r0, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0624:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0628:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a062a:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a062c:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0630:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
 80a0634:	7963      	ldrb	r3, [r4, #5]
 80a0636:	2b01      	cmp	r3, #1
 80a0638:	d919      	bls.n	80a066e <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
 80a063a:	6820      	ldr	r0, [r4, #0]
 80a063c:	6803      	ldr	r3, [r0, #0]
 80a063e:	695b      	ldr	r3, [r3, #20]
 80a0640:	4798      	blx	r3
 80a0642:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0646:	6820      	ldr	r0, [r4, #0]
 80a0648:	6803      	ldr	r3, [r0, #0]
 80a064a:	695b      	ldr	r3, [r3, #20]
 80a064c:	4798      	blx	r3
 80a064e:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0652:	6820      	ldr	r0, [r4, #0]
 80a0654:	6803      	ldr	r3, [r0, #0]
 80a0656:	695b      	ldr	r3, [r3, #20]
 80a0658:	4798      	blx	r3
 80a065a:	f88d 0004 	strb.w	r0, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a065e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0662:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0664:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0666:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
 80a066a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
 80a066e:	7963      	ldrb	r3, [r4, #5]
 80a0670:	2b02      	cmp	r3, #2
 80a0672:	d919      	bls.n	80a06a8 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
 80a0674:	6820      	ldr	r0, [r4, #0]
 80a0676:	6803      	ldr	r3, [r0, #0]
 80a0678:	695b      	ldr	r3, [r3, #20]
 80a067a:	4798      	blx	r3
 80a067c:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0680:	6820      	ldr	r0, [r4, #0]
 80a0682:	6803      	ldr	r3, [r0, #0]
 80a0684:	695b      	ldr	r3, [r3, #20]
 80a0686:	4798      	blx	r3
 80a0688:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a068c:	6820      	ldr	r0, [r4, #0]
 80a068e:	6803      	ldr	r3, [r0, #0]
 80a0690:	695b      	ldr	r3, [r3, #20]
 80a0692:	4798      	blx	r3
 80a0694:	f88d 0004 	strb.w	r0, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a0698:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a069c:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a069e:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a06a0:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
 80a06a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
 80a06a8:	7963      	ldrb	r3, [r4, #5]
 80a06aa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a06ae:	441d      	add	r5, r3
      while (toGet > 0)
 80a06b0:	e79b      	b.n	80a05ea <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
 80a06b2:	2600      	movs	r6, #0
}
 80a06b4:	b2b0      	uxth	r0, r6
 80a06b6:	b003      	add	sp, #12
 80a06b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a06bc <_ZN8MAX301059safeCheckEh>:
{
 80a06bc:	b570      	push	{r4, r5, r6, lr}
 80a06be:	4605      	mov	r5, r0
 80a06c0:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06c2:	f000 fba7 	bl	80a0e14 <HAL_Timer_Get_Milli_Seconds>
 80a06c6:	4604      	mov	r4, r0
 80a06c8:	f000 fba4 	bl	80a0e14 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a06cc:	1b00      	subs	r0, r0, r4
 80a06ce:	42b0      	cmp	r0, r6
 80a06d0:	d808      	bhi.n	80a06e4 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
 80a06d2:	4628      	mov	r0, r5
 80a06d4:	f7ff ff53 	bl	80a057e <_ZN8MAX301055checkEv>
 80a06d8:	2801      	cmp	r0, #1
 80a06da:	d004      	beq.n	80a06e6 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
 80a06dc:	2001      	movs	r0, #1
 80a06de:	f000 fdc9 	bl	80a1274 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a06e2:	e7f1      	b.n	80a06c8 <_ZN8MAX301059safeCheckEh+0xc>
 80a06e4:	2000      	movs	r0, #0
}
 80a06e6:	bd70      	pop	{r4, r5, r6, pc}

080a06e8 <_ZN8MAX301056getRedEv>:
{
 80a06e8:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a06ea:	21fa      	movs	r1, #250	; 0xfa
{
 80a06ec:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a06ee:	f7ff ffe5 	bl	80a06bc <_ZN8MAX301059safeCheckEh>
 80a06f2:	b120      	cbz	r0, 80a06fe <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
 80a06f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a06f8:	3302      	adds	r3, #2
 80a06fa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a06fe:	bd10      	pop	{r4, pc}

080a0700 <_ZN8MAX301055getIREv>:
{
 80a0700:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a0702:	21fa      	movs	r1, #250	; 0xfa
{
 80a0704:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a0706:	f7ff ffd9 	bl	80a06bc <_ZN8MAX301059safeCheckEh>
 80a070a:	b120      	cbz	r0, 80a0716 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a070c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0710:	3306      	adds	r3, #6
 80a0712:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a0716:	bd10      	pop	{r4, pc}

080a0718 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a0718:	22ff      	movs	r2, #255	; 0xff
 80a071a:	7901      	ldrb	r1, [r0, #4]
 80a071c:	f7ff bf07 	b.w	80a052e <_ZN8MAX3010513readRegister8Ehh>

080a0720 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
 80a0720:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a0722:	22fe      	movs	r2, #254	; 0xfe
 80a0724:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
 80a0726:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a0728:	f7ff ff01 	bl	80a052e <_ZN8MAX3010513readRegister8Ehh>
 80a072c:	71a0      	strb	r0, [r4, #6]
}
 80a072e:	bd10      	pop	{r4, pc}

080a0730 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a0730:	b570      	push	{r4, r5, r6, lr}
 80a0732:	4604      	mov	r4, r0
 80a0734:	4616      	mov	r6, r2
 80a0736:	461d      	mov	r5, r3
 80a0738:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a073a:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
 80a073c:	f001 f8c6 	bl	80a18cc <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0740:	4631      	mov	r1, r6
 80a0742:	6820      	ldr	r0, [r4, #0]
 80a0744:	f001 f8be 	bl	80a18c4 <_ZN7TwoWire8setSpeedEm>
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a0748:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
 80a074a:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a074c:	f7ff ffe4 	bl	80a0718 <_ZN8MAX3010510readPartIDEv>
 80a0750:	2815      	cmp	r0, #21
 80a0752:	d104      	bne.n	80a075e <_ZN8MAX301055beginER7TwoWiremh+0x2e>
  readRevisionID();
 80a0754:	4620      	mov	r0, r4
 80a0756:	f7ff ffe3 	bl	80a0720 <_ZN8MAX3010514readRevisionIDEv>
  return true;
 80a075a:	2001      	movs	r0, #1
}
 80a075c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a075e:	2000      	movs	r0, #0
 80a0760:	e7fc      	b.n	80a075c <_ZN8MAX301055beginER7TwoWiremh+0x2c>

080a0762 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a0762:	b570      	push	{r4, r5, r6, lr}
 80a0764:	4604      	mov	r4, r0
 80a0766:	4616      	mov	r6, r2
 80a0768:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a076a:	6800      	ldr	r0, [r0, #0]
 80a076c:	f001 f8e0 	bl	80a1930 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0770:	6820      	ldr	r0, [r4, #0]
 80a0772:	4631      	mov	r1, r6
 80a0774:	6803      	ldr	r3, [r0, #0]
 80a0776:	689b      	ldr	r3, [r3, #8]
 80a0778:	4798      	blx	r3
  _i2cPort->write(value);
 80a077a:	6820      	ldr	r0, [r4, #0]
 80a077c:	4629      	mov	r1, r5
 80a077e:	6803      	ldr	r3, [r0, #0]
 80a0780:	689b      	ldr	r3, [r3, #8]
 80a0782:	4798      	blx	r3
  _i2cPort->endTransmission();
 80a0784:	6820      	ldr	r0, [r4, #0]
}
 80a0786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
 80a078a:	f001 b8dc 	b.w	80a1946 <_ZN7TwoWire15endTransmissionEv>

080a078e <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
 80a078e:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a0790:	220c      	movs	r2, #12
 80a0792:	7901      	ldrb	r1, [r0, #4]
 80a0794:	f7ff bfe5 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a0798 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
 80a0798:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a079a:	220d      	movs	r2, #13
 80a079c:	7901      	ldrb	r1, [r0, #4]
 80a079e:	f7ff bfe0 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a07a2 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
 80a07a2:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a07a4:	220e      	movs	r2, #14
 80a07a6:	7901      	ldrb	r1, [r0, #4]
 80a07a8:	f7ff bfdb 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a07ac <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
 80a07ac:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a07ae:	2210      	movs	r2, #16
 80a07b0:	7901      	ldrb	r1, [r0, #4]
 80a07b2:	f7ff bfd6 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a07b6 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
 80a07b6:	b510      	push	{r4, lr}
 80a07b8:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a07ba:	7901      	ldrb	r1, [r0, #4]
 80a07bc:	2300      	movs	r3, #0
 80a07be:	2204      	movs	r2, #4
 80a07c0:	f7ff ffcf 	bl	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a07c4:	4620      	mov	r0, r4
 80a07c6:	7921      	ldrb	r1, [r4, #4]
 80a07c8:	2300      	movs	r3, #0
 80a07ca:	2205      	movs	r2, #5
 80a07cc:	f7ff ffc9 	bl	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a07d0:	4620      	mov	r0, r4
 80a07d2:	7921      	ldrb	r1, [r4, #4]
 80a07d4:	2300      	movs	r3, #0
}
 80a07d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a07da:	2206      	movs	r2, #6
 80a07dc:	f7ff bfc1 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a07e0 <_ZN8MAX301057bitMaskEhhh>:
{
 80a07e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a07e4:	460d      	mov	r5, r1
 80a07e6:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a07e8:	460a      	mov	r2, r1
 80a07ea:	7901      	ldrb	r1, [r0, #4]
{
 80a07ec:	4604      	mov	r4, r0
 80a07ee:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a07f0:	f7ff fe9d 	bl	80a052e <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
 80a07f4:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a07f8:	462a      	mov	r2, r5
 80a07fa:	4620      	mov	r0, r4
 80a07fc:	7921      	ldrb	r1, [r4, #4]
 80a07fe:	4333      	orrs	r3, r6
}
 80a0800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0804:	f7ff bfad 	b.w	80a0762 <_ZN8MAX3010514writeRegister8Ehhh>

080a0808 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
 80a0808:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a080a:	22bf      	movs	r2, #191	; 0xbf
 80a080c:	2340      	movs	r3, #64	; 0x40
 80a080e:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
 80a0810:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a0812:	f7ff ffe5 	bl	80a07e0 <_ZN8MAX301057bitMaskEhhh>
 80a0816:	f000 fafd 	bl	80a0e14 <HAL_Timer_Get_Milli_Seconds>
 80a081a:	4605      	mov	r5, r0
 80a081c:	f000 fafa 	bl	80a0e14 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
 80a0820:	1b40      	subs	r0, r0, r5
 80a0822:	2863      	cmp	r0, #99	; 0x63
 80a0824:	d80a      	bhi.n	80a083c <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a0826:	2209      	movs	r2, #9
 80a0828:	4620      	mov	r0, r4
 80a082a:	7921      	ldrb	r1, [r4, #4]
 80a082c:	f7ff fe7f 	bl	80a052e <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a0830:	0643      	lsls	r3, r0, #25
 80a0832:	d503      	bpl.n	80a083c <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a0834:	2001      	movs	r0, #1
 80a0836:	f000 fd1d 	bl	80a1274 <delay>
  while (millis() - startTime < 100)
 80a083a:	e7ef      	b.n	80a081c <_ZN8MAX301059softResetEv+0x14>
}
 80a083c:	bd38      	pop	{r3, r4, r5, pc}

080a083e <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
 80a083e:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a0840:	22f8      	movs	r2, #248	; 0xf8
 80a0842:	2109      	movs	r1, #9
 80a0844:	f7ff bfcc 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a0848 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
 80a0848:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a084a:	229f      	movs	r2, #159	; 0x9f
 80a084c:	210a      	movs	r1, #10
 80a084e:	f7ff bfc7 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a0852 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
 80a0852:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0854:	22e3      	movs	r2, #227	; 0xe3
 80a0856:	210a      	movs	r1, #10
 80a0858:	f7ff bfc2 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a085c <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
 80a085c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a085e:	22fc      	movs	r2, #252	; 0xfc
 80a0860:	210a      	movs	r1, #10
 80a0862:	f7ff bfbd 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a0866 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
 80a0866:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a0868:	221f      	movs	r2, #31
 80a086a:	2108      	movs	r1, #8
 80a086c:	f7ff bfb8 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a0870 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a0870:	2310      	movs	r3, #16
 80a0872:	22ef      	movs	r2, #239	; 0xef
 80a0874:	2108      	movs	r1, #8
 80a0876:	f7ff bfb3 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>

080a087a <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
 80a087a:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a087c:	4613      	mov	r3, r2
 80a087e:	2903      	cmp	r1, #3
 80a0880:	d814      	bhi.n	80a08ac <_ZN8MAX3010510enableSlotEhh+0x32>
 80a0882:	e8df f001 	tbb	[pc, r1]
 80a0886:	0602      	.short	0x0602
 80a0888:	0e0b      	.short	0x0e0b
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a088a:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a088c:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a088e:	f7ff bfa7 	b.w	80a07e0 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0892:	011b      	lsls	r3, r3, #4
 80a0894:	228f      	movs	r2, #143	; 0x8f
 80a0896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a089a:	e7f7      	b.n	80a088c <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a089c:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a089e:	2112      	movs	r1, #18
 80a08a0:	e7f5      	b.n	80a088e <_ZN8MAX3010510enableSlotEhh+0x14>
 80a08a2:	011b      	lsls	r3, r3, #4
 80a08a4:	228f      	movs	r2, #143	; 0x8f
 80a08a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a08aa:	e7f8      	b.n	80a089e <_ZN8MAX3010510enableSlotEhh+0x24>
}
 80a08ac:	4770      	bx	lr

080a08ae <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a08ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a08b2:	4615      	mov	r5, r2
 80a08b4:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
 80a08b8:	4604      	mov	r4, r0
 80a08ba:	4688      	mov	r8, r1
 80a08bc:	461e      	mov	r6, r3
 80a08be:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a08c2:	f7ff ffa1 	bl	80a0808 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a08c6:	2d01      	cmp	r5, #1
 80a08c8:	d14a      	bne.n	80a0960 <_ZN8MAX301055setupEhhhiii+0xb2>
 80a08ca:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	f7ff ffca 	bl	80a0866 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a08d2:	4620      	mov	r0, r4
 80a08d4:	f7ff ffcc 	bl	80a0870 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a08d8:	2e03      	cmp	r6, #3
 80a08da:	d155      	bne.n	80a0988 <_ZN8MAX301055setupEhhhiii+0xda>
 80a08dc:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a08de:	4620      	mov	r0, r4
 80a08e0:	f7ff ffad 	bl	80a083e <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a08e4:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a08e8:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a08ea:	da52      	bge.n	80a0992 <_ZN8MAX301055setupEhhhiii+0xe4>
 80a08ec:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a08ee:	4620      	mov	r0, r4
 80a08f0:	f7ff ffaa 	bl	80a0848 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a08f4:	2f63      	cmp	r7, #99	; 0x63
 80a08f6:	dc59      	bgt.n	80a09ac <_ZN8MAX301055setupEhhhiii+0xfe>
 80a08f8:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	f7ff ffa9 	bl	80a0852 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a0900:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a0904:	dc72      	bgt.n	80a09ec <_ZN8MAX301055setupEhhhiii+0x13e>
 80a0906:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a0908:	4620      	mov	r0, r4
 80a090a:	f7ff ffa7 	bl	80a085c <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
 80a090e:	4641      	mov	r1, r8
 80a0910:	4620      	mov	r0, r4
 80a0912:	f7ff ff3c 	bl	80a078e <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a0916:	4641      	mov	r1, r8
 80a0918:	4620      	mov	r0, r4
 80a091a:	f7ff ff3d 	bl	80a0798 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a091e:	4641      	mov	r1, r8
 80a0920:	4620      	mov	r0, r4
 80a0922:	f7ff ff3e 	bl	80a07a2 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a0926:	4641      	mov	r1, r8
 80a0928:	4620      	mov	r0, r4
 80a092a:	f7ff ff3f 	bl	80a07ac <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
 80a092e:	2201      	movs	r2, #1
 80a0930:	4620      	mov	r0, r4
 80a0932:	4611      	mov	r1, r2
 80a0934:	f7ff ffa1 	bl	80a087a <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a0938:	2e01      	cmp	r6, #1
 80a093a:	d90c      	bls.n	80a0956 <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a093c:	2320      	movs	r3, #32
 80a093e:	228f      	movs	r2, #143	; 0x8f
 80a0940:	2111      	movs	r1, #17
 80a0942:	4620      	mov	r0, r4
 80a0944:	f7ff ff4c 	bl	80a07e0 <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a0948:	2e02      	cmp	r6, #2
 80a094a:	d004      	beq.n	80a0956 <_ZN8MAX301055setupEhhhiii+0xa8>
 80a094c:	2203      	movs	r2, #3
 80a094e:	4620      	mov	r0, r4
 80a0950:	4611      	mov	r1, r2
 80a0952:	f7ff ff92 	bl	80a087a <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0956:	4620      	mov	r0, r4
}
 80a0958:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a095c:	f7ff bf2b 	b.w	80a07b6 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a0960:	2d02      	cmp	r5, #2
 80a0962:	d101      	bne.n	80a0968 <_ZN8MAX301055setupEhhhiii+0xba>
 80a0964:	2120      	movs	r1, #32
 80a0966:	e7b1      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a0968:	2d04      	cmp	r5, #4
 80a096a:	d101      	bne.n	80a0970 <_ZN8MAX301055setupEhhhiii+0xc2>
 80a096c:	2140      	movs	r1, #64	; 0x40
 80a096e:	e7ad      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a0970:	2d08      	cmp	r5, #8
 80a0972:	d101      	bne.n	80a0978 <_ZN8MAX301055setupEhhhiii+0xca>
 80a0974:	2160      	movs	r1, #96	; 0x60
 80a0976:	e7a9      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a0978:	2d10      	cmp	r5, #16
 80a097a:	d101      	bne.n	80a0980 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a097c:	2180      	movs	r1, #128	; 0x80
 80a097e:	e7a5      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a0980:	2d20      	cmp	r5, #32
 80a0982:	d1f3      	bne.n	80a096c <_ZN8MAX301055setupEhhhiii+0xbe>
 80a0984:	21a0      	movs	r1, #160	; 0xa0
 80a0986:	e7a1      	b.n	80a08cc <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a0988:	2e02      	cmp	r6, #2
 80a098a:	bf0c      	ite	eq
 80a098c:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a098e:	2102      	movne	r1, #2
 80a0990:	e7a5      	b.n	80a08de <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a0992:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a0996:	da01      	bge.n	80a099c <_ZN8MAX301055setupEhhhiii+0xee>
 80a0998:	2120      	movs	r1, #32
 80a099a:	e7a8      	b.n	80a08ee <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a099c:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a09a0:	da01      	bge.n	80a09a6 <_ZN8MAX301055setupEhhhiii+0xf8>
 80a09a2:	2140      	movs	r1, #64	; 0x40
 80a09a4:	e7a3      	b.n	80a08ee <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a09a6:	d1a1      	bne.n	80a08ec <_ZN8MAX301055setupEhhhiii+0x3e>
 80a09a8:	2160      	movs	r1, #96	; 0x60
 80a09aa:	e7a0      	b.n	80a08ee <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a09ac:	2fc7      	cmp	r7, #199	; 0xc7
 80a09ae:	dc01      	bgt.n	80a09b4 <_ZN8MAX301055setupEhhhiii+0x106>
 80a09b0:	2104      	movs	r1, #4
 80a09b2:	e7a2      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a09b4:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
 80a09b8:	da01      	bge.n	80a09be <_ZN8MAX301055setupEhhhiii+0x110>
 80a09ba:	2108      	movs	r1, #8
 80a09bc:	e79d      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a09be:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 80a09c2:	da01      	bge.n	80a09c8 <_ZN8MAX301055setupEhhhiii+0x11a>
 80a09c4:	210c      	movs	r1, #12
 80a09c6:	e798      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a09c8:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 80a09cc:	da01      	bge.n	80a09d2 <_ZN8MAX301055setupEhhhiii+0x124>
 80a09ce:	2110      	movs	r1, #16
 80a09d0:	e793      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a09d2:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 80a09d6:	da01      	bge.n	80a09dc <_ZN8MAX301055setupEhhhiii+0x12e>
 80a09d8:	2114      	movs	r1, #20
 80a09da:	e78e      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a09dc:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 80a09e0:	da01      	bge.n	80a09e6 <_ZN8MAX301055setupEhhhiii+0x138>
 80a09e2:	2118      	movs	r1, #24
 80a09e4:	e789      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a09e6:	d187      	bne.n	80a08f8 <_ZN8MAX301055setupEhhhiii+0x4a>
 80a09e8:	211c      	movs	r1, #28
 80a09ea:	e786      	b.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a09ec:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a09f0:	dc01      	bgt.n	80a09f6 <_ZN8MAX301055setupEhhhiii+0x148>
 80a09f2:	2101      	movs	r1, #1
 80a09f4:	e788      	b.n	80a0908 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a09f6:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a09fa:	dc01      	bgt.n	80a0a00 <_ZN8MAX301055setupEhhhiii+0x152>
 80a09fc:	2102      	movs	r1, #2
 80a09fe:	e783      	b.n	80a0908 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a0a00:	f240 139b 	movw	r3, #411	; 0x19b
 80a0a04:	4599      	cmp	r9, r3
 80a0a06:	f47f af7e 	bne.w	80a0906 <_ZN8MAX301055setupEhhhiii+0x58>
 80a0a0a:	2103      	movs	r1, #3
 80a0a0c:	e77c      	b.n	80a0908 <_ZN8MAX301055setupEhhhiii+0x5a>

080a0a0e <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80a0a0e:	4684      	mov	ip, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
 80a0a10:	2000      	movs	r0, #0
{
 80a0a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
 80a0a16:	2401      	movs	r4, #1
  *n_npks = 0;
 80a0a18:	6008      	str	r0, [r1, #0]
  
  while (i < n_size-1){
 80a0a1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a0a1e:	45a0      	cmp	r8, r4
 80a0a20:	dd26      	ble.n	80a0a70 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 80a0a22:	9d06      	ldr	r5, [sp, #24]
 80a0a24:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80a0a28:	00a6      	lsls	r6, r4, #2
 80a0a2a:	42a8      	cmp	r0, r5
 80a0a2c:	f104 0501 	add.w	r5, r4, #1
 80a0a30:	dd1c      	ble.n	80a0a6c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0a32:	4416      	add	r6, r2
 80a0a34:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80a0a38:	42b0      	cmp	r0, r6
 80a0a3a:	dd17      	ble.n	80a0a6c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0a3c:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80a0a3e:	429e      	cmp	r6, r3
 80a0a40:	4635      	mov	r5, r6
 80a0a42:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80a0a46:	eba6 0e04 	sub.w	lr, r6, r4
 80a0a4a:	d003      	beq.n	80a0a54 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
 80a0a4c:	42b8      	cmp	r0, r7
 80a0a4e:	f106 0601 	add.w	r6, r6, #1
 80a0a52:	d0f4      	beq.n	80a0a3e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80a0a54:	42b8      	cmp	r0, r7
 80a0a56:	dd09      	ble.n	80a0a6c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0a58:	6808      	ldr	r0, [r1, #0]
 80a0a5a:	280e      	cmp	r0, #14
 80a0a5c:	dc06      	bgt.n	80a0a6c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
 80a0a5e:	1c45      	adds	r5, r0, #1
 80a0a60:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 80a0a62:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
 80a0a66:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
        i += n_width+1;
 80a0a6a:	4425      	add	r5, r4
{
 80a0a6c:	462c      	mov	r4, r5
 80a0a6e:	e7d6      	b.n	80a0a1e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
        i += n_width;
    }
    else
      i++;
  }
}
 80a0a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a74 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80a0a74:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a0a76:	2301      	movs	r3, #1
 80a0a78:	4604      	mov	r4, r0
 80a0a7a:	428b      	cmp	r3, r1
 80a0a7c:	da0f      	bge.n	80a0a9e <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
 80a0a7e:	f854 6f04 	ldr.w	r6, [r4, #4]!
 80a0a82:	461a      	mov	r2, r3
 80a0a84:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a0a86:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80a0a8a:	42b7      	cmp	r7, r6
 80a0a8c:	dd03      	ble.n	80a0a96 <_Z17maxim_sort_ascendPll+0x22>
 80a0a8e:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
 80a0a90:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a0a94:	d1f7      	bne.n	80a0a86 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
 80a0a96:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a0a9a:	3301      	adds	r3, #1
 80a0a9c:	e7ed      	b.n	80a0a7a <_Z17maxim_sort_ascendPll+0x6>
  }
}
 80a0a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0aa0 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80a0aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a0aa4:	2301      	movs	r3, #1
{
 80a0aa6:	4690      	mov	r8, r2
 80a0aa8:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
 80a0aaa:	4543      	cmp	r3, r8
 80a0aac:	da16      	bge.n	80a0adc <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
 80a0aae:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a0ab2:	461c      	mov	r4, r3
 80a0ab4:	46ac      	mov	ip, r5
 80a0ab6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 80a0aba:	f8d9 2000 	ldr.w	r2, [r9]
 80a0abe:	f85c 7c04 	ldr.w	r7, [ip, #-4]
 80a0ac2:	4696      	mov	lr, r2
 80a0ac4:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80a0ac8:	4596      	cmp	lr, r2
 80a0aca:	dd03      	ble.n	80a0ad4 <_Z26maxim_sort_indices_descendPlS_l+0x34>
 80a0acc:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
 80a0ace:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a0ad2:	d1f2      	bne.n	80a0aba <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
 80a0ad4:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a0ad8:	3301      	adds	r3, #1
 80a0ada:	e7e6      	b.n	80a0aaa <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
 80a0adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0ae0 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
 80a0ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0ae4:	4604      	mov	r4, r0
 80a0ae6:	461e      	mov	r6, r3
 80a0ae8:	4610      	mov	r0, r2
 80a0aea:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80a0aec:	680a      	ldr	r2, [r1, #0]
 80a0aee:	4621      	mov	r1, r4
 80a0af0:	f7ff ffd6 	bl	80a0aa0 <_Z26maxim_sort_indices_descendPlS_l>
 80a0af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0af8:	1f27      	subs	r7, r4, #4
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0afa:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
 80a0afe:	6829      	ldr	r1, [r5, #0]
 80a0b00:	4694      	mov	ip, r2
 80a0b02:	4291      	cmp	r1, r2
 80a0b04:	dd1f      	ble.n	80a0b46 <_Z24maxim_remove_close_peaksPlS_S_l+0x66>
    *pn_npks = i+1;
 80a0b06:	3201      	adds	r2, #1
 80a0b08:	4610      	mov	r0, r2
 80a0b0a:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0b0c:	4281      	cmp	r1, r0
 80a0b0e:	d101      	bne.n	80a0b14 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
 80a0b10:	3704      	adds	r7, #4
 80a0b12:	e7f4      	b.n	80a0afe <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80a0b14:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80a0b18:	bf0c      	ite	eq
 80a0b1a:	46e6      	moveq	lr, ip
 80a0b1c:	f8d7 e000 	ldrne.w	lr, [r7]
 80a0b20:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0b24:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0b28:	42b3      	cmp	r3, r6
 80a0b2a:	dc01      	bgt.n	80a0b30 <_Z24maxim_remove_close_peaksPlS_S_l+0x50>
 80a0b2c:	4598      	cmp	r8, r3
 80a0b2e:	dd08      	ble.n	80a0b42 <_Z24maxim_remove_close_peaksPlS_S_l+0x62>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 80a0b30:	f8d5 e000 	ldr.w	lr, [r5]
 80a0b34:	f10e 0301 	add.w	r3, lr, #1
 80a0b38:	602b      	str	r3, [r5, #0]
 80a0b3a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0b3e:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0b42:	3001      	adds	r0, #1
 80a0b44:	e7e2      	b.n	80a0b0c <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0b46:	4620      	mov	r0, r4
}
 80a0b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0b4c:	f7ff bf92 	b.w	80a0a74 <_Z17maxim_sort_ascendPll>

080a0b50 <_Z16maxim_find_peaksPlS_S_llll>:
{
 80a0b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0b52:	4605      	mov	r5, r0
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0b54:	9f08      	ldr	r7, [sp, #32]
{
 80a0b56:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0b58:	9700      	str	r7, [sp, #0]
 80a0b5a:	f7ff ff58 	bl	80a0a0e <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 80a0b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b60:	4628      	mov	r0, r5
 80a0b62:	f7ff ffbd 	bl	80a0ae0 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
 80a0b66:	6822      	ldr	r2, [r4, #0]
 80a0b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0b6a:	429a      	cmp	r2, r3
 80a0b6c:	bfd4      	ite	le
 80a0b6e:	6022      	strle	r2, [r4, #0]
 80a0b70:	6023      	strgt	r3, [r4, #0]
}
 80a0b72:	b003      	add	sp, #12
 80a0b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0b78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
 80a0b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b7c:	4617      	mov	r7, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0b7e:	2200      	movs	r2, #0
{
 80a0b80:	469b      	mov	fp, r3
 80a0b82:	4605      	mov	r5, r0
 80a0b84:	460c      	mov	r4, r1
  un_ir_mean =0; 
 80a0b86:	4613      	mov	r3, r2
{
 80a0b88:	b09f      	sub	sp, #124	; 0x7c
 80a0b8a:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0b8e:	42a2      	cmp	r2, r4
 80a0b90:	da04      	bge.n	80a0b9c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
 80a0b92:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0b96:	3201      	adds	r2, #1
 80a0b98:	440b      	add	r3, r1
 80a0b9a:	e7f8      	b.n	80a0b8e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80a0b9c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80a0dd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
 80a0ba0:	fbb3 f3f4 	udiv	r3, r3, r4
 80a0ba4:	4640      	mov	r0, r8
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0ba6:	2200      	movs	r2, #0
 80a0ba8:	42a2      	cmp	r2, r4
 80a0baa:	da06      	bge.n	80a0bba <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0bac:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0bb0:	3201      	adds	r2, #1
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0bb2:	1a59      	subs	r1, r3, r1
 80a0bb4:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0bb8:	e7f6      	b.n	80a0ba8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0bba:	2100      	movs	r1, #0
 80a0bbc:	4a85      	ldr	r2, [pc, #532]	; (80a0dd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0bbe:	6813      	ldr	r3, [r2, #0]
 80a0bc0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a0bc4:	3101      	adds	r1, #1
 80a0bc6:	4403      	add	r3, r0
 80a0bc8:	6850      	ldr	r0, [r2, #4]
 80a0bca:	4403      	add	r3, r0
 80a0bcc:	6890      	ldr	r0, [r2, #8]
 80a0bce:	181b      	adds	r3, r3, r0
 80a0bd0:	bf48      	it	mi
 80a0bd2:	3303      	addmi	r3, #3
 80a0bd4:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0bd6:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0bd8:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0bdc:	d1ef      	bne.n	80a0bbe <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x46>
  n_th1=0; 
 80a0bde:	2300      	movs	r3, #0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0be0:	461a      	mov	r2, r3
 80a0be2:	497c      	ldr	r1, [pc, #496]	; (80a0dd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    n_th1 +=  an_x[k];
 80a0be4:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0be8:	3201      	adds	r2, #1
 80a0bea:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
 80a0bec:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0bee:	d1f9      	bne.n	80a0be4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6c>
  if( n_th1<30) n_th1=30; // min allowed
 80a0bf0:	f640 31b7 	movw	r1, #2999	; 0xbb7
 80a0bf4:	428b      	cmp	r3, r1
 80a0bf6:	dd4b      	ble.n	80a0c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80a0bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0bfc:	2b3c      	cmp	r3, #60	; 0x3c
 80a0bfe:	bfa8      	it	ge
 80a0c00:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0c02:	2200      	movs	r2, #0
 80a0c04:	ae0f      	add	r6, sp, #60	; 0x3c
  if( n_th1<30) n_th1=30; // min allowed
 80a0c06:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0c08:	4692      	mov	sl, r2
 80a0c0a:	3201      	adds	r2, #1
 80a0c0c:	2a0f      	cmp	r2, #15
 80a0c0e:	f841 ab04 	str.w	sl, [r1], #4
 80a0c12:	d1fa      	bne.n	80a0c0a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x92>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 80a0c14:	9202      	str	r2, [sp, #8]
 80a0c16:	2204      	movs	r2, #4
 80a0c18:	4630      	mov	r0, r6
 80a0c1a:	e9cd 3200 	strd	r3, r2, [sp]
 80a0c1e:	a909      	add	r1, sp, #36	; 0x24
 80a0c20:	2364      	movs	r3, #100	; 0x64
 80a0c22:	4a6c      	ldr	r2, [pc, #432]	; (80a0dd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
 80a0c24:	f7ff ff94 	bl	80a0b50 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
 80a0c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0c2a:	2b01      	cmp	r3, #1
 80a0c2c:	dd32      	ble.n	80a0c94 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x11c>
 80a0c2e:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
 80a0c30:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0c32:	2001      	movs	r0, #1
 80a0c34:	4671      	mov	r1, lr
 80a0c36:	f8de c004 	ldr.w	ip, [lr, #4]
 80a0c3a:	6809      	ldr	r1, [r1, #0]
 80a0c3c:	3001      	adds	r0, #1
 80a0c3e:	ebac 0c01 	sub.w	ip, ip, r1
 80a0c42:	4283      	cmp	r3, r0
 80a0c44:	f10e 0e04 	add.w	lr, lr, #4
 80a0c48:	4462      	add	r2, ip
 80a0c4a:	d1f3      	bne.n	80a0c34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xbc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80a0c4c:	1e59      	subs	r1, r3, #1
 80a0c4e:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80a0c52:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0c56:	fb91 f2f2 	sdiv	r2, r1, r2
 80a0c5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0c5c:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
 80a0c5e:	2201      	movs	r2, #1
 80a0c60:	f889 2000 	strb.w	r2, [r9]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0c64:	2200      	movs	r2, #0
 80a0c66:	485c      	ldr	r0, [pc, #368]	; (80a0dd8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0c68:	42a2      	cmp	r2, r4
 80a0c6a:	db19      	blt.n	80a0ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
  for(k=0; k< 5; k++) an_ratio[k]=0;
 80a0c6c:	2200      	movs	r2, #0
 80a0c6e:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 80a0c72:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80a0c76:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0c78:	a90f      	add	r1, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0c7a:	4293      	cmp	r3, r2
 80a0c7c:	dd1c      	ble.n	80a0cb8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x140>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0c7e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80a0c82:	2864      	cmp	r0, #100	; 0x64
 80a0c84:	dd16      	ble.n	80a0cb4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13c>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80a0c86:	4b55      	ldr	r3, [pc, #340]	; (80a0ddc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0c88:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
 80a0c8c:	2300      	movs	r3, #0
 80a0c8e:	e097      	b.n	80a0dc0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
 80a0c90:	231e      	movs	r3, #30
 80a0c92:	e7b6      	b.n	80a0c02 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8a>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 80a0c94:	4a51      	ldr	r2, [pc, #324]	; (80a0ddc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0c96:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0c98:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
 80a0c9a:	f889 a000 	strb.w	sl, [r9]
 80a0c9e:	e7e1      	b.n	80a0c64 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
      an_x[k] =  pun_ir_buffer[k] ; 
 80a0ca0:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0ca4:	f848 1b04 	str.w	r1, [r8], #4
      an_y[k] =  pun_red_buffer[k] ; 
 80a0ca8:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0cac:	3201      	adds	r2, #1
      an_y[k] =  pun_red_buffer[k] ; 
 80a0cae:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0cb2:	e7d9      	b.n	80a0c68 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0cb4:	3201      	adds	r2, #1
 80a0cb6:	e7e0      	b.n	80a0c7a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x102>
  int32_t n_x_dc_max_idx = 0; 
 80a0cb8:	2000      	movs	r0, #0
  int32_t n_y_dc_max_idx = 0;
 80a0cba:	4607      	mov	r7, r0
  n_i_ratio_count = 0; 
 80a0cbc:	4601      	mov	r1, r0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0cbe:	3b01      	subs	r3, #1
 80a0cc0:	f8df c110 	ldr.w	ip, [pc, #272]	; 80a0dd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0cc4:	f8df e110 	ldr.w	lr, [pc, #272]	; 80a0dd8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0cc8:	9005      	str	r0, [sp, #20]
 80a0cca:	9307      	str	r3, [sp, #28]
 80a0ccc:	9b07      	ldr	r3, [sp, #28]
 80a0cce:	9a05      	ldr	r2, [sp, #20]
 80a0cd0:	4293      	cmp	r3, r2
 80a0cd2:	dd59      	ble.n	80a0d88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 80a0cd4:	4613      	mov	r3, r2
 80a0cd6:	3301      	adds	r3, #1
 80a0cd8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a0cdc:	9305      	str	r3, [sp, #20]
 80a0cde:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0ce2:	eba8 0903 	sub.w	r9, r8, r3
 80a0ce6:	f1b9 0f03 	cmp.w	r9, #3
 80a0cea:	ddef      	ble.n	80a0ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
    n_x_dc_max= -16777216; 
 80a0cec:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0cf0:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
 80a0cf2:	9206      	str	r2, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0cf4:	45a8      	cmp	r8, r5
 80a0cf6:	dd10      	ble.n	80a0d1a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a2>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0cf8:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0cfc:	9c06      	ldr	r4, [sp, #24]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0cfe:	4592      	cmp	sl, r2
 80a0d00:	bfc8      	it	gt
 80a0d02:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0d04:	f85e a025 	ldr.w	sl, [lr, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0d08:	bfc8      	it	gt
 80a0d0a:	4628      	movgt	r0, r5
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0d0c:	45a2      	cmp	sl, r4
 80a0d0e:	bfc4      	itt	gt
 80a0d10:	462f      	movgt	r7, r5
 80a0d12:	f8cd a018 	strgt.w	sl, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0d16:	3501      	adds	r5, #1
 80a0d18:	e7ec      	b.n	80a0cf4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x17c>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80a0d1a:	f85c 4028 	ldr.w	r4, [ip, r8, lsl #2]
 80a0d1e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80a0d22:	eba4 0a05 	sub.w	sl, r4, r5
 80a0d26:	1ac5      	subs	r5, r0, r3
 80a0d28:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0d2c:	fb95 faf9 	sdiv	sl, r5, r9
 80a0d30:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0d34:	9c06      	ldr	r4, [sp, #24]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0d36:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80a0d38:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 80a0d3c:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0d40:	fb04 f40a 	mul.w	r4, r4, sl
 80a0d44:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0d46:	2c00      	cmp	r4, #0
 80a0d48:	ddc0      	ble.n	80a0ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
 80a0d4a:	2904      	cmp	r1, #4
 80a0d4c:	dcbe      	bgt.n	80a0ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80a0d4e:	f85e 5023 	ldr.w	r5, [lr, r3, lsl #2]
 80a0d52:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80a0d56:	1afb      	subs	r3, r7, r3
 80a0d58:	eba8 0805 	sub.w	r8, r8, r5
 80a0d5c:	fb03 f308 	mul.w	r3, r3, r8
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 80a0d60:	fb93 f3f9 	sdiv	r3, r3, r9
 80a0d64:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80a0d66:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 80a0d6a:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80a0d6c:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0d6e:	11d2      	asrs	r2, r2, #7
 80a0d70:	d0ac      	beq.n	80a0ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0d72:	ab1e      	add	r3, sp, #120	; 0x78
 80a0d74:	eb03 0881 	add.w	r8, r3, r1, lsl #2
 80a0d78:	2364      	movs	r3, #100	; 0x64
 80a0d7a:	435a      	muls	r2, r3
 80a0d7c:	fb92 f4f4 	sdiv	r4, r2, r4
        n_i_ratio_count++;
 80a0d80:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0d82:	f848 4c50 	str.w	r4, [r8, #-80]
        n_i_ratio_count++;
 80a0d86:	e7a1      	b.n	80a0ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80a0d88:	a80a      	add	r0, sp, #40	; 0x28
 80a0d8a:	f7ff fe73 	bl	80a0a74 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
 80a0d8e:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
 80a0d90:	2903      	cmp	r1, #3
 80a0d92:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80a0d96:	dd18      	ble.n	80a0dca <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80a0d98:	a91e      	add	r1, sp, #120	; 0x78
 80a0d9a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a0d9e:	f851 3c54 	ldr.w	r3, [r1, #-84]
 80a0da2:	f851 2c50 	ldr.w	r2, [r1, #-80]
 80a0da6:	4413      	add	r3, r2
 80a0da8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a0dac:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
 80a0dae:	1eda      	subs	r2, r3, #3
 80a0db0:	2ab4      	cmp	r2, #180	; 0xb4
 80a0db2:	f63f af68 	bhi.w	80a0c86 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10e>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80a0db6:	4a0a      	ldr	r2, [pc, #40]	; (80a0de0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
 80a0db8:	5cd3      	ldrb	r3, [r2, r3]
 80a0dba:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80a0dbe:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
 80a0dc0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80a0dc2:	7013      	strb	r3, [r2, #0]
}
 80a0dc4:	b01f      	add	sp, #124	; 0x7c
 80a0dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
 80a0dca:	aa1e      	add	r2, sp, #120	; 0x78
 80a0dcc:	4413      	add	r3, r2
 80a0dce:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80a0dd2:	e7ec      	b.n	80a0dae <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
 80a0dd4:	20000460 	.word	0x20000460
 80a0dd8:	200005f0 	.word	0x200005f0
 80a0ddc:	fffffc19 	.word	0xfffffc19
 80a0de0:	080a4196 	.word	0x080a4196

080a0de4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <os_mutex_recursive_create+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601d0 	.word	0x080601d0

080a0df4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <os_mutex_recursive_destroy+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601d0 	.word	0x080601d0

080a0e04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <HAL_RNG_GetRandomNumber+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	685b      	ldr	r3, [r3, #4]
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	0806019c 	.word	0x0806019c

080a0e14 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	695b      	ldr	r3, [r3, #20]
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	0806019c 	.word	0x0806019c

080a0e24 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <hal_rtc_time_is_valid+0xc>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0e2c:	9301      	str	r3, [sp, #4]
 80a0e2e:	bd08      	pop	{r3, pc}
 80a0e30:	0806019c 	.word	0x0806019c

080a0e34 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a0e34:	b508      	push	{r3, lr}
 80a0e36:	4b02      	ldr	r3, [pc, #8]	; (80a0e40 <hal_rtc_get_time+0xc>)
 80a0e38:	681b      	ldr	r3, [r3, #0]
 80a0e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0e3c:	9301      	str	r3, [sp, #4]
 80a0e3e:	bd08      	pop	{r3, pc}
 80a0e40:	0806019c 	.word	0x0806019c

080a0e44 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0e44:	b508      	push	{r3, lr}
 80a0e46:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <HAL_Pin_Mode+0xc>)
 80a0e48:	681b      	ldr	r3, [r3, #0]
 80a0e4a:	689b      	ldr	r3, [r3, #8]
 80a0e4c:	9301      	str	r3, [sp, #4]
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	080601b0 	.word	0x080601b0

080a0e54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b02      	ldr	r3, [pc, #8]	; (80a0e60 <HAL_Get_Pin_Mode+0xc>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	68db      	ldr	r3, [r3, #12]
 80a0e5c:	9301      	str	r3, [sp, #4]
 80a0e5e:	bd08      	pop	{r3, pc}
 80a0e60:	080601b0 	.word	0x080601b0

080a0e64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0e64:	b508      	push	{r3, lr}
 80a0e66:	4b02      	ldr	r3, [pc, #8]	; (80a0e70 <HAL_GPIO_Write+0xc>)
 80a0e68:	681b      	ldr	r3, [r3, #0]
 80a0e6a:	691b      	ldr	r3, [r3, #16]
 80a0e6c:	9301      	str	r3, [sp, #4]
 80a0e6e:	bd08      	pop	{r3, pc}
 80a0e70:	080601b0 	.word	0x080601b0

080a0e74 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a0e74:	b508      	push	{r3, lr}
 80a0e76:	4b02      	ldr	r3, [pc, #8]	; (80a0e80 <hal_i2c_set_speed+0xc>)
 80a0e78:	681b      	ldr	r3, [r3, #0]
 80a0e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e7c:	9301      	str	r3, [sp, #4]
 80a0e7e:	bd08      	pop	{r3, pc}
 80a0e80:	080601ac 	.word	0x080601ac

080a0e84 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0e84:	b508      	push	{r3, lr}
 80a0e86:	4b02      	ldr	r3, [pc, #8]	; (80a0e90 <hal_i2c_begin+0xc>)
 80a0e88:	681b      	ldr	r3, [r3, #0]
 80a0e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e8c:	9301      	str	r3, [sp, #4]
 80a0e8e:	bd08      	pop	{r3, pc}
 80a0e90:	080601ac 	.word	0x080601ac

080a0e94 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0e94:	b508      	push	{r3, lr}
 80a0e96:	4b02      	ldr	r3, [pc, #8]	; (80a0ea0 <hal_i2c_begin_transmission+0xc>)
 80a0e98:	681b      	ldr	r3, [r3, #0]
 80a0e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0e9c:	9301      	str	r3, [sp, #4]
 80a0e9e:	bd08      	pop	{r3, pc}
 80a0ea0:	080601ac 	.word	0x080601ac

080a0ea4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0ea4:	b508      	push	{r3, lr}
 80a0ea6:	4b02      	ldr	r3, [pc, #8]	; (80a0eb0 <hal_i2c_end_transmission+0xc>)
 80a0ea8:	681b      	ldr	r3, [r3, #0]
 80a0eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0eac:	9301      	str	r3, [sp, #4]
 80a0eae:	bd08      	pop	{r3, pc}
 80a0eb0:	080601ac 	.word	0x080601ac

080a0eb4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0eb4:	b508      	push	{r3, lr}
 80a0eb6:	4b02      	ldr	r3, [pc, #8]	; (80a0ec0 <hal_i2c_write+0xc>)
 80a0eb8:	681b      	ldr	r3, [r3, #0]
 80a0eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	bd08      	pop	{r3, pc}
 80a0ec0:	080601ac 	.word	0x080601ac

080a0ec4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0ec4:	b508      	push	{r3, lr}
 80a0ec6:	4b02      	ldr	r3, [pc, #8]	; (80a0ed0 <hal_i2c_available+0xc>)
 80a0ec8:	681b      	ldr	r3, [r3, #0]
 80a0eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ecc:	9301      	str	r3, [sp, #4]
 80a0ece:	bd08      	pop	{r3, pc}
 80a0ed0:	080601ac 	.word	0x080601ac

080a0ed4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0ed4:	b508      	push	{r3, lr}
 80a0ed6:	4b02      	ldr	r3, [pc, #8]	; (80a0ee0 <hal_i2c_read+0xc>)
 80a0ed8:	681b      	ldr	r3, [r3, #0]
 80a0eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0edc:	9301      	str	r3, [sp, #4]
 80a0ede:	bd08      	pop	{r3, pc}
 80a0ee0:	080601ac 	.word	0x080601ac

080a0ee4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	4b02      	ldr	r3, [pc, #8]	; (80a0ef0 <hal_i2c_peek+0xc>)
 80a0ee8:	681b      	ldr	r3, [r3, #0]
 80a0eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0eec:	9301      	str	r3, [sp, #4]
 80a0eee:	bd08      	pop	{r3, pc}
 80a0ef0:	080601ac 	.word	0x080601ac

080a0ef4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b02      	ldr	r3, [pc, #8]	; (80a0f00 <hal_i2c_flush+0xc>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0efc:	9301      	str	r3, [sp, #4]
 80a0efe:	bd08      	pop	{r3, pc}
 80a0f00:	080601ac 	.word	0x080601ac

080a0f04 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b02      	ldr	r3, [pc, #8]	; (80a0f10 <hal_i2c_is_enabled+0xc>)
 80a0f08:	681b      	ldr	r3, [r3, #0]
 80a0f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0f0c:	9301      	str	r3, [sp, #4]
 80a0f0e:	bd08      	pop	{r3, pc}
 80a0f10:	080601ac 	.word	0x080601ac

080a0f14 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0f14:	b508      	push	{r3, lr}
 80a0f16:	4b03      	ldr	r3, [pc, #12]	; (80a0f24 <hal_i2c_init+0x10>)
 80a0f18:	681b      	ldr	r3, [r3, #0]
 80a0f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0f1e:	9301      	str	r3, [sp, #4]
 80a0f20:	bd08      	pop	{r3, pc}
 80a0f22:	0000      	.short	0x0000
 80a0f24:	080601ac 	.word	0x080601ac

080a0f28 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b03      	ldr	r3, [pc, #12]	; (80a0f38 <hal_i2c_request_ex+0x10>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f32:	9301      	str	r3, [sp, #4]
 80a0f34:	bd08      	pop	{r3, pc}
 80a0f36:	0000      	.short	0x0000
 80a0f38:	080601ac 	.word	0x080601ac

080a0f3c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0f3c:	b508      	push	{r3, lr}
 80a0f3e:	4b02      	ldr	r3, [pc, #8]	; (80a0f48 <hal_spi_init+0xc>)
 80a0f40:	681b      	ldr	r3, [r3, #0]
 80a0f42:	69db      	ldr	r3, [r3, #28]
 80a0f44:	9301      	str	r3, [sp, #4]
 80a0f46:	bd08      	pop	{r3, pc}
 80a0f48:	080601b4 	.word	0x080601b4

080a0f4c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0f4c:	b508      	push	{r3, lr}
 80a0f4e:	4b02      	ldr	r3, [pc, #8]	; (80a0f58 <hal_spi_is_enabled+0xc>)
 80a0f50:	681b      	ldr	r3, [r3, #0]
 80a0f52:	6a1b      	ldr	r3, [r3, #32]
 80a0f54:	9301      	str	r3, [sp, #4]
 80a0f56:	bd08      	pop	{r3, pc}
 80a0f58:	080601b4 	.word	0x080601b4

080a0f5c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0f5c:	b508      	push	{r3, lr}
 80a0f5e:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <hal_usart_init+0xc>)
 80a0f60:	681b      	ldr	r3, [r3, #0]
 80a0f62:	699b      	ldr	r3, [r3, #24]
 80a0f64:	9301      	str	r3, [sp, #4]
 80a0f66:	bd08      	pop	{r3, pc}
 80a0f68:	080601c4 	.word	0x080601c4

080a0f6c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0f6c:	b508      	push	{r3, lr}
 80a0f6e:	4b02      	ldr	r3, [pc, #8]	; (80a0f78 <hal_usart_write+0xc>)
 80a0f70:	681b      	ldr	r3, [r3, #0]
 80a0f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f74:	9301      	str	r3, [sp, #4]
 80a0f76:	bd08      	pop	{r3, pc}
 80a0f78:	080601c4 	.word	0x080601c4

080a0f7c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0f7c:	b508      	push	{r3, lr}
 80a0f7e:	4b02      	ldr	r3, [pc, #8]	; (80a0f88 <hal_usart_available+0xc>)
 80a0f80:	681b      	ldr	r3, [r3, #0]
 80a0f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0f84:	9301      	str	r3, [sp, #4]
 80a0f86:	bd08      	pop	{r3, pc}
 80a0f88:	080601c4 	.word	0x080601c4

080a0f8c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0f8c:	b508      	push	{r3, lr}
 80a0f8e:	4b02      	ldr	r3, [pc, #8]	; (80a0f98 <hal_usart_read+0xc>)
 80a0f90:	681b      	ldr	r3, [r3, #0]
 80a0f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0f94:	9301      	str	r3, [sp, #4]
 80a0f96:	bd08      	pop	{r3, pc}
 80a0f98:	080601c4 	.word	0x080601c4

080a0f9c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0f9c:	b508      	push	{r3, lr}
 80a0f9e:	4b02      	ldr	r3, [pc, #8]	; (80a0fa8 <hal_usart_peek+0xc>)
 80a0fa0:	681b      	ldr	r3, [r3, #0]
 80a0fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fa4:	9301      	str	r3, [sp, #4]
 80a0fa6:	bd08      	pop	{r3, pc}
 80a0fa8:	080601c4 	.word	0x080601c4

080a0fac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0fac:	b508      	push	{r3, lr}
 80a0fae:	4b02      	ldr	r3, [pc, #8]	; (80a0fb8 <hal_usart_flush+0xc>)
 80a0fb0:	681b      	ldr	r3, [r3, #0]
 80a0fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fb4:	9301      	str	r3, [sp, #4]
 80a0fb6:	bd08      	pop	{r3, pc}
 80a0fb8:	080601c4 	.word	0x080601c4

080a0fbc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0fbc:	b508      	push	{r3, lr}
 80a0fbe:	4b02      	ldr	r3, [pc, #8]	; (80a0fc8 <hal_usart_is_enabled+0xc>)
 80a0fc0:	681b      	ldr	r3, [r3, #0]
 80a0fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0fc4:	9301      	str	r3, [sp, #4]
 80a0fc6:	bd08      	pop	{r3, pc}
 80a0fc8:	080601c4 	.word	0x080601c4

080a0fcc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0fcc:	b508      	push	{r3, lr}
 80a0fce:	4b02      	ldr	r3, [pc, #8]	; (80a0fd8 <hal_usart_available_data_for_write+0xc>)
 80a0fd0:	681b      	ldr	r3, [r3, #0]
 80a0fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0fd4:	9301      	str	r3, [sp, #4]
 80a0fd6:	bd08      	pop	{r3, pc}
 80a0fd8:	080601c4 	.word	0x080601c4

080a0fdc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0fdc:	b508      	push	{r3, lr}
 80a0fde:	4b02      	ldr	r3, [pc, #8]	; (80a0fe8 <HAL_USB_USART_Init+0xc>)
 80a0fe0:	681b      	ldr	r3, [r3, #0]
 80a0fe2:	681b      	ldr	r3, [r3, #0]
 80a0fe4:	9301      	str	r3, [sp, #4]
 80a0fe6:	bd08      	pop	{r3, pc}
 80a0fe8:	080601d8 	.word	0x080601d8

080a0fec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0fec:	b508      	push	{r3, lr}
 80a0fee:	4b02      	ldr	r3, [pc, #8]	; (80a0ff8 <HAL_USB_USART_Begin+0xc>)
 80a0ff0:	681b      	ldr	r3, [r3, #0]
 80a0ff2:	685b      	ldr	r3, [r3, #4]
 80a0ff4:	9301      	str	r3, [sp, #4]
 80a0ff6:	bd08      	pop	{r3, pc}
 80a0ff8:	080601d8 	.word	0x080601d8

080a0ffc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ffc:	b508      	push	{r3, lr}
 80a0ffe:	4b02      	ldr	r3, [pc, #8]	; (80a1008 <HAL_USB_USART_Available_Data+0xc>)
 80a1000:	681b      	ldr	r3, [r3, #0]
 80a1002:	691b      	ldr	r3, [r3, #16]
 80a1004:	9301      	str	r3, [sp, #4]
 80a1006:	bd08      	pop	{r3, pc}
 80a1008:	080601d8 	.word	0x080601d8

080a100c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a100c:	b508      	push	{r3, lr}
 80a100e:	4b02      	ldr	r3, [pc, #8]	; (80a1018 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1010:	681b      	ldr	r3, [r3, #0]
 80a1012:	695b      	ldr	r3, [r3, #20]
 80a1014:	9301      	str	r3, [sp, #4]
 80a1016:	bd08      	pop	{r3, pc}
 80a1018:	080601d8 	.word	0x080601d8

080a101c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a101c:	b508      	push	{r3, lr}
 80a101e:	4b02      	ldr	r3, [pc, #8]	; (80a1028 <HAL_USB_USART_Receive_Data+0xc>)
 80a1020:	681b      	ldr	r3, [r3, #0]
 80a1022:	699b      	ldr	r3, [r3, #24]
 80a1024:	9301      	str	r3, [sp, #4]
 80a1026:	bd08      	pop	{r3, pc}
 80a1028:	080601d8 	.word	0x080601d8

080a102c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a102c:	b508      	push	{r3, lr}
 80a102e:	4b02      	ldr	r3, [pc, #8]	; (80a1038 <HAL_USB_USART_Send_Data+0xc>)
 80a1030:	681b      	ldr	r3, [r3, #0]
 80a1032:	69db      	ldr	r3, [r3, #28]
 80a1034:	9301      	str	r3, [sp, #4]
 80a1036:	bd08      	pop	{r3, pc}
 80a1038:	080601d8 	.word	0x080601d8

080a103c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <HAL_USB_USART_Flush_Data+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	6a1b      	ldr	r3, [r3, #32]
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601d8 	.word	0x080601d8

080a104c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <inet_gethostbyname+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	080601c0 	.word	0x080601c0

080a105c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <system_mode+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	681b      	ldr	r3, [r3, #0]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	080601a4 	.word	0x080601a4

080a106c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <set_system_mode+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	685b      	ldr	r3, [r3, #4]
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	080601a4 	.word	0x080601a4

080a107c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <system_delay_ms+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	695b      	ldr	r3, [r3, #20]
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	080601a4 	.word	0x080601a4

080a108c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a108c:	b508      	push	{r3, lr}
 80a108e:	4b02      	ldr	r3, [pc, #8]	; (80a1098 <application_thread_current+0xc>)
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1094:	9301      	str	r3, [sp, #4]
 80a1096:	bd08      	pop	{r3, pc}
 80a1098:	080601a4 	.word	0x080601a4

080a109c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a109c:	b508      	push	{r3, lr}
 80a109e:	4b02      	ldr	r3, [pc, #8]	; (80a10a8 <application_thread_invoke+0xc>)
 80a10a0:	681b      	ldr	r3, [r3, #0]
 80a10a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a10a4:	9301      	str	r3, [sp, #4]
 80a10a6:	bd08      	pop	{r3, pc}
 80a10a8:	080601a4 	.word	0x080601a4

080a10ac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a10ac:	b508      	push	{r3, lr}
 80a10ae:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <system_thread_get_state+0xc>)
 80a10b0:	681b      	ldr	r3, [r3, #0]
 80a10b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a10b4:	9301      	str	r3, [sp, #4]
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	080601a4 	.word	0x080601a4

080a10bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a10bc:	b508      	push	{r3, lr}
 80a10be:	4b03      	ldr	r3, [pc, #12]	; (80a10cc <system_ctrl_set_app_request_handler+0x10>)
 80a10c0:	681b      	ldr	r3, [r3, #0]
 80a10c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a10c6:	9301      	str	r3, [sp, #4]
 80a10c8:	bd08      	pop	{r3, pc}
 80a10ca:	0000      	.short	0x0000
 80a10cc:	080601a4 	.word	0x080601a4

080a10d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b03      	ldr	r3, [pc, #12]	; (80a10e0 <system_ctrl_set_result+0x10>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a10da:	9301      	str	r3, [sp, #4]
 80a10dc:	bd08      	pop	{r3, pc}
 80a10de:	0000      	.short	0x0000
 80a10e0:	080601a4 	.word	0x080601a4

080a10e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a10e4:	b508      	push	{r3, lr}
 80a10e6:	4b02      	ldr	r3, [pc, #8]	; (80a10f0 <spark_process+0xc>)
 80a10e8:	681b      	ldr	r3, [r3, #0]
 80a10ea:	689b      	ldr	r3, [r3, #8]
 80a10ec:	9301      	str	r3, [sp, #4]
 80a10ee:	bd08      	pop	{r3, pc}
 80a10f0:	080601cc 	.word	0x080601cc

080a10f4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a10f4:	b508      	push	{r3, lr}
 80a10f6:	4b02      	ldr	r3, [pc, #8]	; (80a1100 <spark_cloud_flag_connected+0xc>)
 80a10f8:	681b      	ldr	r3, [r3, #0]
 80a10fa:	695b      	ldr	r3, [r3, #20]
 80a10fc:	9301      	str	r3, [sp, #4]
 80a10fe:	bd08      	pop	{r3, pc}
 80a1100:	080601cc 	.word	0x080601cc

080a1104 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1104:	b508      	push	{r3, lr}
 80a1106:	4b02      	ldr	r3, [pc, #8]	; (80a1110 <spark_send_event+0xc>)
 80a1108:	681b      	ldr	r3, [r3, #0]
 80a110a:	6a1b      	ldr	r3, [r3, #32]
 80a110c:	9301      	str	r3, [sp, #4]
 80a110e:	bd08      	pop	{r3, pc}
 80a1110:	080601cc 	.word	0x080601cc

080a1114 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1114:	b508      	push	{r3, lr}
 80a1116:	4b02      	ldr	r3, [pc, #8]	; (80a1120 <spark_sync_time_pending+0xc>)
 80a1118:	681b      	ldr	r3, [r3, #0]
 80a111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a111c:	9301      	str	r3, [sp, #4]
 80a111e:	bd08      	pop	{r3, pc}
 80a1120:	080601cc 	.word	0x080601cc

080a1124 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1124:	b508      	push	{r3, lr}
 80a1126:	4b02      	ldr	r3, [pc, #8]	; (80a1130 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1128:	681b      	ldr	r3, [r3, #0]
 80a112a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a112c:	9301      	str	r3, [sp, #4]
 80a112e:	bd08      	pop	{r3, pc}
 80a1130:	080601cc 	.word	0x080601cc

080a1134 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1134:	b508      	push	{r3, lr}
 80a1136:	4b02      	ldr	r3, [pc, #8]	; (80a1140 <network_connect+0xc>)
 80a1138:	681b      	ldr	r3, [r3, #0]
 80a113a:	685b      	ldr	r3, [r3, #4]
 80a113c:	9301      	str	r3, [sp, #4]
 80a113e:	bd08      	pop	{r3, pc}
 80a1140:	080601c8 	.word	0x080601c8

080a1144 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1144:	b508      	push	{r3, lr}
 80a1146:	4b02      	ldr	r3, [pc, #8]	; (80a1150 <network_connecting+0xc>)
 80a1148:	681b      	ldr	r3, [r3, #0]
 80a114a:	689b      	ldr	r3, [r3, #8]
 80a114c:	9301      	str	r3, [sp, #4]
 80a114e:	bd08      	pop	{r3, pc}
 80a1150:	080601c8 	.word	0x080601c8

080a1154 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1154:	b508      	push	{r3, lr}
 80a1156:	4b02      	ldr	r3, [pc, #8]	; (80a1160 <network_disconnect+0xc>)
 80a1158:	681b      	ldr	r3, [r3, #0]
 80a115a:	68db      	ldr	r3, [r3, #12]
 80a115c:	9301      	str	r3, [sp, #4]
 80a115e:	bd08      	pop	{r3, pc}
 80a1160:	080601c8 	.word	0x080601c8

080a1164 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1164:	b508      	push	{r3, lr}
 80a1166:	4b02      	ldr	r3, [pc, #8]	; (80a1170 <network_ready+0xc>)
 80a1168:	681b      	ldr	r3, [r3, #0]
 80a116a:	691b      	ldr	r3, [r3, #16]
 80a116c:	9301      	str	r3, [sp, #4]
 80a116e:	bd08      	pop	{r3, pc}
 80a1170:	080601c8 	.word	0x080601c8

080a1174 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1174:	b508      	push	{r3, lr}
 80a1176:	4b02      	ldr	r3, [pc, #8]	; (80a1180 <network_on+0xc>)
 80a1178:	681b      	ldr	r3, [r3, #0]
 80a117a:	695b      	ldr	r3, [r3, #20]
 80a117c:	9301      	str	r3, [sp, #4]
 80a117e:	bd08      	pop	{r3, pc}
 80a1180:	080601c8 	.word	0x080601c8

080a1184 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1184:	b508      	push	{r3, lr}
 80a1186:	4b02      	ldr	r3, [pc, #8]	; (80a1190 <network_off+0xc>)
 80a1188:	681b      	ldr	r3, [r3, #0]
 80a118a:	699b      	ldr	r3, [r3, #24]
 80a118c:	9301      	str	r3, [sp, #4]
 80a118e:	bd08      	pop	{r3, pc}
 80a1190:	080601c8 	.word	0x080601c8

080a1194 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1194:	b508      	push	{r3, lr}
 80a1196:	4b02      	ldr	r3, [pc, #8]	; (80a11a0 <network_listen+0xc>)
 80a1198:	681b      	ldr	r3, [r3, #0]
 80a119a:	69db      	ldr	r3, [r3, #28]
 80a119c:	9301      	str	r3, [sp, #4]
 80a119e:	bd08      	pop	{r3, pc}
 80a11a0:	080601c8 	.word	0x080601c8

080a11a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a11a4:	b508      	push	{r3, lr}
 80a11a6:	4b02      	ldr	r3, [pc, #8]	; (80a11b0 <network_listening+0xc>)
 80a11a8:	681b      	ldr	r3, [r3, #0]
 80a11aa:	6a1b      	ldr	r3, [r3, #32]
 80a11ac:	9301      	str	r3, [sp, #4]
 80a11ae:	bd08      	pop	{r3, pc}
 80a11b0:	080601c8 	.word	0x080601c8

080a11b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b02      	ldr	r3, [pc, #8]	; (80a11c0 <network_set_listen_timeout+0xc>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11bc:	9301      	str	r3, [sp, #4]
 80a11be:	bd08      	pop	{r3, pc}
 80a11c0:	080601c8 	.word	0x080601c8

080a11c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a11c4:	b508      	push	{r3, lr}
 80a11c6:	4b02      	ldr	r3, [pc, #8]	; (80a11d0 <network_get_listen_timeout+0xc>)
 80a11c8:	681b      	ldr	r3, [r3, #0]
 80a11ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a11cc:	9301      	str	r3, [sp, #4]
 80a11ce:	bd08      	pop	{r3, pc}
 80a11d0:	080601c8 	.word	0x080601c8

080a11d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a11d4:	b508      	push	{r3, lr}
 80a11d6:	4b02      	ldr	r3, [pc, #8]	; (80a11e0 <network_is_on+0xc>)
 80a11d8:	681b      	ldr	r3, [r3, #0]
 80a11da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a11dc:	9301      	str	r3, [sp, #4]
 80a11de:	bd08      	pop	{r3, pc}
 80a11e0:	080601c8 	.word	0x080601c8

080a11e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a11e4:	b508      	push	{r3, lr}
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <network_is_off+0xc>)
 80a11e8:	681b      	ldr	r3, [r3, #0]
 80a11ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11ec:	9301      	str	r3, [sp, #4]
 80a11ee:	bd08      	pop	{r3, pc}
 80a11f0:	080601c8 	.word	0x080601c8

080a11f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a11f4:	b508      	push	{r3, lr}
 80a11f6:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <malloc+0xc>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	681b      	ldr	r3, [r3, #0]
 80a11fc:	9301      	str	r3, [sp, #4]
 80a11fe:	bd08      	pop	{r3, pc}
 80a1200:	080601a0 	.word	0x080601a0

080a1204 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1204:	b508      	push	{r3, lr}
 80a1206:	4b02      	ldr	r3, [pc, #8]	; (80a1210 <free+0xc>)
 80a1208:	681b      	ldr	r3, [r3, #0]
 80a120a:	685b      	ldr	r3, [r3, #4]
 80a120c:	9301      	str	r3, [sp, #4]
 80a120e:	bd08      	pop	{r3, pc}
 80a1210:	080601a0 	.word	0x080601a0

080a1214 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1214:	b508      	push	{r3, lr}
 80a1216:	4b02      	ldr	r3, [pc, #8]	; (80a1220 <realloc+0xc>)
 80a1218:	681b      	ldr	r3, [r3, #0]
 80a121a:	689b      	ldr	r3, [r3, #8]
 80a121c:	9301      	str	r3, [sp, #4]
 80a121e:	bd08      	pop	{r3, pc}
 80a1220:	080601a0 	.word	0x080601a0

080a1224 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1224:	b508      	push	{r3, lr}
 80a1226:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <siprintf+0xc>)
 80a1228:	681b      	ldr	r3, [r3, #0]
 80a122a:	691b      	ldr	r3, [r3, #16]
 80a122c:	9301      	str	r3, [sp, #4]
 80a122e:	bd08      	pop	{r3, pc}
 80a1230:	080601a0 	.word	0x080601a0

080a1234 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <siscanf+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	699b      	ldr	r3, [r3, #24]
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601a0 	.word	0x080601a0

080a1244 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <abort+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	080601a0 	.word	0x080601a0

080a1254 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <_malloc_r+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	080601a0 	.word	0x080601a0

080a1264 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <newlib_impure_ptr_callback+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601a0 	.word	0x080601a0

080a1274 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1274:	2100      	movs	r1, #0
 80a1276:	f7ff bf01 	b.w	80a107c <system_delay_ms>

080a127a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a127a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a127c:	6883      	ldr	r3, [r0, #8]
 80a127e:	4604      	mov	r4, r0
 80a1280:	b90b      	cbnz	r3, 80a1286 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1282:	f001 f98d 	bl	80a25a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1286:	68c3      	ldr	r3, [r0, #12]
 80a1288:	4798      	blx	r3
      if (_M_manager)
 80a128a:	68a3      	ldr	r3, [r4, #8]
 80a128c:	b11b      	cbz	r3, 80a1296 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a128e:	2203      	movs	r2, #3
 80a1290:	4621      	mov	r1, r4
 80a1292:	4620      	mov	r0, r4
 80a1294:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1296:	4620      	mov	r0, r4
}
 80a1298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a129c:	2110      	movs	r1, #16
 80a129e:	f001 b97b 	b.w	80a2598 <_ZdlPvj>

080a12a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a12a2:	4770      	bx	lr

080a12a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a12a4:	2000      	movs	r0, #0
 80a12a6:	4770      	bx	lr

080a12a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a12a8:	b510      	push	{r4, lr}
 80a12aa:	4604      	mov	r4, r0
 80a12ac:	2110      	movs	r1, #16
 80a12ae:	f001 f973 	bl	80a2598 <_ZdlPvj>
 80a12b2:	4620      	mov	r0, r4
 80a12b4:	bd10      	pop	{r4, pc}

080a12b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a12b6:	b508      	push	{r3, lr}
      { delete this; }
 80a12b8:	f7ff fff6 	bl	80a12a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a12bc:	bd08      	pop	{r3, pc}

080a12be <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a12be:	b510      	push	{r4, lr}
      if (_M_manager)
 80a12c0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a12c2:	4604      	mov	r4, r0
      if (_M_manager)
 80a12c4:	b113      	cbz	r3, 80a12cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a12c6:	2203      	movs	r2, #3
 80a12c8:	4601      	mov	r1, r0
 80a12ca:	4798      	blx	r3
    }
 80a12cc:	4620      	mov	r0, r4
 80a12ce:	bd10      	pop	{r4, pc}

080a12d0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a12d0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a12d2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a12d4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a12d8:	6002      	str	r2, [r0, #0]
 80a12da:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a12dc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a12de:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a12e0:	680c      	ldr	r4, [r1, #0]
 80a12e2:	8085      	strh	r5, [r0, #4]
 80a12e4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a12e6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a12e8:	bd30      	pop	{r4, r5, pc}

080a12ea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a12ea:	b510      	push	{r4, lr}
 80a12ec:	4604      	mov	r4, r0
    free((void*)msg_);
 80a12ee:	6800      	ldr	r0, [r0, #0]
 80a12f0:	f7ff ff88 	bl	80a1204 <free>
}
 80a12f4:	4620      	mov	r0, r4
 80a12f6:	bd10      	pop	{r4, pc}

080a12f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a12f8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a12fa:	68c4      	ldr	r4, [r0, #12]
 80a12fc:	b1f4      	cbz	r4, 80a133c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a12fe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1300:	2b02      	cmp	r3, #2
 80a1302:	d103      	bne.n	80a130c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1304:	f104 000c 	add.w	r0, r4, #12
 80a1308:	f7ff ffef 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a130c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a130e:	b135      	cbz	r5, 80a131e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1310:	4628      	mov	r0, r5
 80a1312:	f7ff ffd4 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
 80a1316:	2110      	movs	r1, #16
 80a1318:	4628      	mov	r0, r5
 80a131a:	f001 f93d 	bl	80a2598 <_ZdlPvj>
 80a131e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1320:	b135      	cbz	r5, 80a1330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1322:	4628      	mov	r0, r5
 80a1324:	f7ff ffcb 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
 80a1328:	2110      	movs	r1, #16
 80a132a:	4628      	mov	r0, r5
 80a132c:	f001 f934 	bl	80a2598 <_ZdlPvj>
 80a1330:	4620      	mov	r0, r4
 80a1332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1336:	2114      	movs	r1, #20
 80a1338:	f001 b92e 	b.w	80a2598 <_ZdlPvj>
 80a133c:	bd38      	pop	{r3, r4, r5, pc}

080a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a133e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a1340:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1342:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1344:	b17c      	cbz	r4, 80a1366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1346:	6863      	ldr	r3, [r4, #4]
 80a1348:	3b01      	subs	r3, #1
 80a134a:	6063      	str	r3, [r4, #4]
 80a134c:	b95b      	cbnz	r3, 80a1366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a134e:	6823      	ldr	r3, [r4, #0]
 80a1350:	4620      	mov	r0, r4
 80a1352:	689b      	ldr	r3, [r3, #8]
 80a1354:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1356:	68a3      	ldr	r3, [r4, #8]
 80a1358:	3b01      	subs	r3, #1
 80a135a:	60a3      	str	r3, [r4, #8]
 80a135c:	b91b      	cbnz	r3, 80a1366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a135e:	6823      	ldr	r3, [r4, #0]
 80a1360:	4620      	mov	r0, r4
 80a1362:	68db      	ldr	r3, [r3, #12]
 80a1364:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a1366:	4628      	mov	r0, r5
 80a1368:	bd38      	pop	{r3, r4, r5, pc}

080a136a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a136a:	680b      	ldr	r3, [r1, #0]
 80a136c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a136e:	b113      	cbz	r3, 80a1376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1370:	685a      	ldr	r2, [r3, #4]
 80a1372:	3201      	adds	r2, #1
 80a1374:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a1376:	4770      	bx	lr

080a1378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1378:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a137a:	460e      	mov	r6, r1
 80a137c:	4604      	mov	r4, r0
 80a137e:	f856 3b04 	ldr.w	r3, [r6], #4
 80a1382:	460d      	mov	r5, r1
 80a1384:	a801      	add	r0, sp, #4
 80a1386:	4631      	mov	r1, r6
 80a1388:	9300      	str	r3, [sp, #0]
 80a138a:	f7ff ffee 	bl	80a136a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a138e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1390:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1392:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a1394:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1396:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1398:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a139a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a139c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a139e:	f7ff ffce 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a13a2:	4630      	mov	r0, r6
 80a13a4:	f7ff ffcb 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a13a8:	4628      	mov	r0, r5
 80a13aa:	2108      	movs	r1, #8
 80a13ac:	f001 f8f4 	bl	80a2598 <_ZdlPvj>
        return p;
    }
 80a13b0:	4620      	mov	r0, r4
 80a13b2:	b002      	add	sp, #8
 80a13b4:	bd70      	pop	{r4, r5, r6, pc}

080a13b6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a13b6:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a13b8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a13ba:	460b      	mov	r3, r1
 80a13bc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a13be:	c803      	ldmia	r0, {r0, r1}
 80a13c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a13c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a13c8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a13cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a13d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a13d4:	b002      	add	sp, #8
 80a13d6:	bd10      	pop	{r4, pc}

080a13d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a13d8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a13da:	b510      	push	{r4, lr}
      if (_M_empty())
 80a13dc:	b90a      	cbnz	r2, 80a13e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a13de:	f001 f8df 	bl	80a25a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13e2:	68c3      	ldr	r3, [r0, #12]
    }
 80a13e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13e8:	4718      	bx	r3

080a13ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a13ea:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a13ec:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a13ee:	f100 0110 	add.w	r1, r0, #16
 80a13f2:	f7ff fff1 	bl	80a13d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a13f6:	bd08      	pop	{r3, pc}

080a13f8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a13f8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a13fa:	b510      	push	{r4, lr}
      if (_M_empty())
 80a13fc:	b90a      	cbnz	r2, 80a1402 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a13fe:	f001 f8cf 	bl	80a25a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1402:	68c3      	ldr	r3, [r0, #12]
    }
 80a1404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1408:	4718      	bx	r3

080a140a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a140a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a140c:	6800      	ldr	r0, [r0, #0]
 80a140e:	f100 0110 	add.w	r1, r0, #16
 80a1412:	f7ff fff1 	bl	80a13f8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1416:	bd08      	pop	{r3, pc}

080a1418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1418:	b538      	push	{r3, r4, r5, lr}
 80a141a:	2300      	movs	r3, #0
 80a141c:	4604      	mov	r4, r0
 80a141e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1420:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1422:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1424:	f7fe fe37 	bl	80a0096 <_Znwj>
 80a1428:	b128      	cbz	r0, 80a1436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a142a:	2301      	movs	r3, #1
 80a142c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1430:	4b02      	ldr	r3, [pc, #8]	; (80a143c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1432:	60c5      	str	r5, [r0, #12]
 80a1434:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1436:	6020      	str	r0, [r4, #0]
	}
 80a1438:	4620      	mov	r0, r4
 80a143a:	bd38      	pop	{r3, r4, r5, pc}
 80a143c:	080a4258 	.word	0x080a4258

080a1440 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1440:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1442:	2300      	movs	r3, #0
 80a1444:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1446:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1448:	4604      	mov	r4, r0
 80a144a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a144c:	b12b      	cbz	r3, 80a145a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a144e:	2202      	movs	r2, #2
 80a1450:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1452:	68eb      	ldr	r3, [r5, #12]
 80a1454:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1456:	68ab      	ldr	r3, [r5, #8]
 80a1458:	60a3      	str	r3, [r4, #8]
    }
 80a145a:	4620      	mov	r0, r4
 80a145c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1460 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1460:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1462:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1464:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1466:	4668      	mov	r0, sp
 80a1468:	f7ff ff32 	bl	80a12d0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a146c:	f04f 0302 	mov.w	r3, #2
 80a1470:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1474:	2a00      	cmp	r2, #0
 80a1476:	d103      	bne.n	80a1480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1478:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a147c:	2900      	cmp	r1, #0
 80a147e:	d1f7      	bne.n	80a1470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1480:	d125      	bne.n	80a14ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1482:	f104 050c 	add.w	r5, r4, #12
 80a1486:	4669      	mov	r1, sp
 80a1488:	4628      	mov	r0, r5
 80a148a:	f7ff ff21 	bl	80a12d0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a148e:	2301      	movs	r3, #1
 80a1490:	f3bf 8f5b 	dmb	ish
 80a1494:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1496:	2000      	movs	r0, #0
 80a1498:	f3bf 8f5b 	dmb	ish
 80a149c:	f104 0308 	add.w	r3, r4, #8
 80a14a0:	e853 6f00 	ldrex	r6, [r3]
 80a14a4:	e843 0200 	strex	r2, r0, [r3]
 80a14a8:	2a00      	cmp	r2, #0
 80a14aa:	d1f9      	bne.n	80a14a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a14ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a14b0:	b16e      	cbz	r6, 80a14ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a14b2:	f7ff fdeb 	bl	80a108c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a14b6:	b178      	cbz	r0, 80a14d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a14b8:	4629      	mov	r1, r5
 80a14ba:	4630      	mov	r0, r6
 80a14bc:	f7ff ff8c 	bl	80a13d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a14c0:	4630      	mov	r0, r6
 80a14c2:	f7ff fefc 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a14c6:	2110      	movs	r1, #16
 80a14c8:	4630      	mov	r0, r6
 80a14ca:	f001 f865 	bl	80a2598 <_ZdlPvj>
        p_->setError(std::move(error));
 80a14ce:	4668      	mov	r0, sp
 80a14d0:	f7ff ff0b 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
    }
 80a14d4:	b009      	add	sp, #36	; 0x24
 80a14d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a14d8:	4631      	mov	r1, r6
 80a14da:	a802      	add	r0, sp, #8
 80a14dc:	f7ff ffb0 	bl	80a1440 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a14e0:	68e0      	ldr	r0, [r4, #12]
 80a14e2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a14e6:	b108      	cbz	r0, 80a14ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a14e8:	f002 f92c 	bl	80a3744 <strdup>
        type_(type) {
 80a14ec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a14ee:	2010      	movs	r0, #16
 80a14f0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a14f4:	f7fe fdcf 	bl	80a0096 <_Znwj>
 80a14f8:	4605      	mov	r5, r0
 80a14fa:	b1e8      	cbz	r0, 80a1538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a14fc:	2700      	movs	r7, #0
 80a14fe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1500:	2018      	movs	r0, #24
 80a1502:	f7fe fdc8 	bl	80a0096 <_Znwj>
 80a1506:	4604      	mov	r4, r0
 80a1508:	b188      	cbz	r0, 80a152e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a150a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a150c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a150e:	a802      	add	r0, sp, #8
 80a1510:	f7ff ff51 	bl	80a13b6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1514:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1516:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1518:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a151a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a151c:	9204      	str	r2, [sp, #16]
 80a151e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1520:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1522:	60e3      	str	r3, [r4, #12]
 80a1524:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1528:	9205      	str	r2, [sp, #20]
 80a152a:	f7ff fed1 	bl	80a12d0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a152e:	4b08      	ldr	r3, [pc, #32]	; (80a1550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1530:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1532:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1534:	4b07      	ldr	r3, [pc, #28]	; (80a1554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1536:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1538:	a806      	add	r0, sp, #24
 80a153a:	f7ff fed6 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a153e:	a802      	add	r0, sp, #8
 80a1540:	f7ff febd 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1544:	2200      	movs	r2, #0
 80a1546:	4629      	mov	r1, r5
 80a1548:	4803      	ldr	r0, [pc, #12]	; (80a1558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a154a:	f7ff fda7 	bl	80a109c <application_thread_invoke>
 80a154e:	e7b7      	b.n	80a14c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1550:	080a13eb 	.word	0x080a13eb
 80a1554:	080a1681 	.word	0x080a1681
 80a1558:	080a127b 	.word	0x080a127b

080a155c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1560:	b08a      	sub	sp, #40	; 0x28
 80a1562:	4605      	mov	r5, r0
 80a1564:	460c      	mov	r4, r1
 80a1566:	4617      	mov	r7, r2
 80a1568:	4698      	mov	r8, r3
 80a156a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a156e:	f7ff fdc1 	bl	80a10f4 <spark_cloud_flag_connected>
 80a1572:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1574:	4682      	mov	sl, r0
 80a1576:	bb38      	cbnz	r0, 80a15c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1578:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a157c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a157e:	a905      	add	r1, sp, #20
 80a1580:	4630      	mov	r0, r6
 80a1582:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1586:	f7ff fea3 	bl	80a12d0 <_ZN8particle5ErrorC1EOS0_>
 80a158a:	2014      	movs	r0, #20
 80a158c:	f7fe fd83 	bl	80a0096 <_Znwj>
 80a1590:	4604      	mov	r4, r0
 80a1592:	b148      	cbz	r0, 80a15a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1594:	2302      	movs	r3, #2
 80a1596:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1598:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a159a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a159e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a15a0:	4631      	mov	r1, r6
 80a15a2:	300c      	adds	r0, #12
 80a15a4:	f7ff fe94 	bl	80a12d0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15a8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a15aa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15ac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a15b0:	f7ff ff32 	bl	80a1418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a15b4:	4630      	mov	r0, r6
 80a15b6:	f7ff fe98 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a15ba:	a805      	add	r0, sp, #20
 80a15bc:	f7ff fe95 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a15c0:	4628      	mov	r0, r5
 80a15c2:	b00a      	add	sp, #40	; 0x28
 80a15c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a15c8:	230c      	movs	r3, #12
 80a15ca:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a15ce:	2014      	movs	r0, #20
 80a15d0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a15d4:	9307      	str	r3, [sp, #28]
 80a15d6:	f7fe fd5e 	bl	80a0096 <_Znwj>
 80a15da:	4601      	mov	r1, r0
 80a15dc:	b128      	cbz	r0, 80a15ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a15de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a15e2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a15e6:	f880 a001 	strb.w	sl, [r0, #1]
 80a15ea:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15ec:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a15ee:	f7ff ff13 	bl	80a1418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a15f2:	4b22      	ldr	r3, [pc, #136]	; (80a167c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a15f4:	2008      	movs	r0, #8
 80a15f6:	9308      	str	r3, [sp, #32]
 80a15f8:	f7fe fd4d 	bl	80a0096 <_Znwj>
 80a15fc:	4682      	mov	sl, r0
 80a15fe:	b128      	cbz	r0, 80a160c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1600:	9b03      	ldr	r3, [sp, #12]
 80a1602:	a904      	add	r1, sp, #16
 80a1604:	f840 3b04 	str.w	r3, [r0], #4
 80a1608:	f7ff feaf 	bl	80a136a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a160c:	4642      	mov	r2, r8
 80a160e:	4639      	mov	r1, r7
 80a1610:	4620      	mov	r0, r4
 80a1612:	9600      	str	r6, [sp, #0]
 80a1614:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1618:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a161c:	f7ff fd72 	bl	80a1104 <spark_send_event>
 80a1620:	b9b8      	cbnz	r0, 80a1652 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a1622:	9b03      	ldr	r3, [sp, #12]
 80a1624:	785b      	ldrb	r3, [r3, #1]
 80a1626:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a162a:	b993      	cbnz	r3, 80a1652 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a162c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1630:	a905      	add	r1, sp, #20
 80a1632:	a803      	add	r0, sp, #12
 80a1634:	9205      	str	r2, [sp, #20]
 80a1636:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a163a:	f7ff ff11 	bl	80a1460 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a163e:	a805      	add	r0, sp, #20
 80a1640:	f7ff fe53 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1644:	a805      	add	r0, sp, #20
 80a1646:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1648:	f7ff fe96 	bl	80a1378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a164c:	a806      	add	r0, sp, #24
 80a164e:	f7ff fe76 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1652:	9b03      	ldr	r3, [sp, #12]
 80a1654:	a904      	add	r1, sp, #16
 80a1656:	a806      	add	r0, sp, #24
 80a1658:	9305      	str	r3, [sp, #20]
 80a165a:	f7ff fe86 	bl	80a136a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a165e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1660:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1662:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1664:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1666:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1668:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a166a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a166c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a166e:	f7ff fe66 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1672:	a804      	add	r0, sp, #16
 80a1674:	f7ff fe63 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1678:	e7a2      	b.n	80a15c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a167a:	bf00      	nop
 80a167c:	080a1745 	.word	0x080a1745

080a1680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1680:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1684:	4605      	mov	r5, r0
	  switch (__op)
 80a1686:	d007      	beq.n	80a1698 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1688:	2a03      	cmp	r2, #3
 80a168a:	d018      	beq.n	80a16be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a168c:	2a01      	cmp	r2, #1
 80a168e:	d101      	bne.n	80a1694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1690:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1692:	6003      	str	r3, [r0, #0]
	}
 80a1694:	2000      	movs	r0, #0
 80a1696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1698:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a169a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a169c:	f7fe fcfb 	bl	80a0096 <_Znwj>
 80a16a0:	4604      	mov	r4, r0
 80a16a2:	b150      	cbz	r0, 80a16ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a16a4:	4631      	mov	r1, r6
 80a16a6:	f7ff fecb 	bl	80a1440 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a16aa:	6930      	ldr	r0, [r6, #16]
 80a16ac:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a16b0:	b108      	cbz	r0, 80a16b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a16b2:	f002 f847 	bl	80a3744 <strdup>
        type_(type) {
 80a16b6:	6120      	str	r0, [r4, #16]
 80a16b8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a16ba:	602c      	str	r4, [r5, #0]
	}
 80a16bc:	e7ea      	b.n	80a1694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a16be:	6804      	ldr	r4, [r0, #0]
 80a16c0:	2c00      	cmp	r4, #0
 80a16c2:	d0e7      	beq.n	80a1694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a16c4:	f104 0010 	add.w	r0, r4, #16
 80a16c8:	f7ff fe0f 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a16cc:	4620      	mov	r0, r4
 80a16ce:	f7ff fdf6 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a16d2:	2118      	movs	r1, #24
 80a16d4:	4620      	mov	r0, r4
 80a16d6:	f000 ff5f 	bl	80a2598 <_ZdlPvj>
 80a16da:	e7db      	b.n	80a1694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a16dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a16dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a16de:	2300      	movs	r3, #0
 80a16e0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a16e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a16e4:	4604      	mov	r4, r0
 80a16e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a16e8:	b12b      	cbz	r3, 80a16f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a16ea:	2202      	movs	r2, #2
 80a16ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a16ee:	68eb      	ldr	r3, [r5, #12]
 80a16f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a16f2:	68ab      	ldr	r3, [r5, #8]
 80a16f4:	60a3      	str	r3, [r4, #8]
    }
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	bd38      	pop	{r3, r4, r5, pc}

080a16fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a16fa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a16fc:	b570      	push	{r4, r5, r6, lr}
 80a16fe:	4604      	mov	r4, r0
	  switch (__op)
 80a1700:	d007      	beq.n	80a1712 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a1702:	2a03      	cmp	r2, #3
 80a1704:	d012      	beq.n	80a172c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a1706:	2a01      	cmp	r2, #1
 80a1708:	d101      	bne.n	80a170e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a170a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a170c:	6003      	str	r3, [r0, #0]
	}
 80a170e:	2000      	movs	r0, #0
 80a1710:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1712:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1714:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1716:	f7fe fcbe 	bl	80a0096 <_Znwj>
 80a171a:	4605      	mov	r5, r0
 80a171c:	b120      	cbz	r0, 80a1728 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a171e:	4631      	mov	r1, r6
 80a1720:	f7ff ffdc 	bl	80a16dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1724:	7c33      	ldrb	r3, [r6, #16]
 80a1726:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1728:	6025      	str	r5, [r4, #0]
	}
 80a172a:	e7f0      	b.n	80a170e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a172c:	6804      	ldr	r4, [r0, #0]
 80a172e:	2c00      	cmp	r4, #0
 80a1730:	d0ed      	beq.n	80a170e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a1732:	4620      	mov	r0, r4
 80a1734:	f7ff fdc3 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1738:	2114      	movs	r1, #20
 80a173a:	4620      	mov	r0, r4
 80a173c:	f000 ff2c 	bl	80a2598 <_ZdlPvj>
 80a1740:	e7e5      	b.n	80a170e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1744 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1744:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1746:	4604      	mov	r4, r0
 80a1748:	b089      	sub	sp, #36	; 0x24
 80a174a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a174c:	a801      	add	r0, sp, #4
 80a174e:	4611      	mov	r1, r2
 80a1750:	f7ff fe12 	bl	80a1378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1754:	b1a4      	cbz	r4, 80a1780 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1756:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1758:	b11d      	cbz	r5, 80a1762 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a175a:	4628      	mov	r0, r5
 80a175c:	f001 fff2 	bl	80a3744 <strdup>
 80a1760:	4605      	mov	r5, r0
 80a1762:	a801      	add	r0, sp, #4
 80a1764:	a903      	add	r1, sp, #12
        type_(type) {
 80a1766:	9503      	str	r5, [sp, #12]
 80a1768:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a176c:	f7ff fe78 	bl	80a1460 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1770:	a803      	add	r0, sp, #12
 80a1772:	f7ff fdba 	bl	80a12ea <_ZN8particle5ErrorD1Ev>
 80a1776:	a802      	add	r0, sp, #8
 80a1778:	f7ff fde1 	bl	80a133e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a177c:	b009      	add	sp, #36	; 0x24
 80a177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1780:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1782:	9d01      	ldr	r5, [sp, #4]
 80a1784:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1788:	2a00      	cmp	r2, #0
 80a178a:	d103      	bne.n	80a1794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a178c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1790:	2900      	cmp	r1, #0
 80a1792:	d1f7      	bne.n	80a1784 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1794:	d1ef      	bne.n	80a1776 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1796:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1798:	f3bf 8f5b 	dmb	ish
 80a179c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a179e:	f3bf 8f5b 	dmb	ish
 80a17a2:	1d2b      	adds	r3, r5, #4
 80a17a4:	e853 6f00 	ldrex	r6, [r3]
 80a17a8:	e843 4200 	strex	r2, r4, [r3]
 80a17ac:	2a00      	cmp	r2, #0
 80a17ae:	d1f9      	bne.n	80a17a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a17b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a17b4:	2e00      	cmp	r6, #0
 80a17b6:	d0de      	beq.n	80a1776 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a17b8:	4620      	mov	r0, r4
 80a17ba:	f7ff fc67 	bl	80a108c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a17be:	4607      	mov	r7, r0
 80a17c0:	b160      	cbz	r0, 80a17dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a17c2:	4630      	mov	r0, r6
 80a17c4:	f105 010c 	add.w	r1, r5, #12
 80a17c8:	f7ff fe16 	bl	80a13f8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a17cc:	4630      	mov	r0, r6
 80a17ce:	f7ff fd76 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a17d2:	2110      	movs	r1, #16
 80a17d4:	4630      	mov	r0, r6
 80a17d6:	f000 fedf 	bl	80a2598 <_ZdlPvj>
 80a17da:	e7cc      	b.n	80a1776 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a17dc:	4631      	mov	r1, r6
 80a17de:	a803      	add	r0, sp, #12
 80a17e0:	f7ff ff7c 	bl	80a16dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a17e4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a17e6:	2010      	movs	r0, #16
 80a17e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a17ec:	f7fe fc53 	bl	80a0096 <_Znwj>
 80a17f0:	4605      	mov	r5, r0
 80a17f2:	b1d0      	cbz	r0, 80a182a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a17f4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a17f6:	2014      	movs	r0, #20
 80a17f8:	f7fe fc4d 	bl	80a0096 <_Znwj>
 80a17fc:	4604      	mov	r4, r0
 80a17fe:	b178      	cbz	r0, 80a1820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1800:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1802:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1804:	a803      	add	r0, sp, #12
 80a1806:	f7ff fdd6 	bl	80a13b6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a180a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a180c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a180e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1810:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1812:	9205      	str	r2, [sp, #20]
 80a1814:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1816:	60e3      	str	r3, [r4, #12]
 80a1818:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a181c:	9206      	str	r2, [sp, #24]
 80a181e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1820:	4b06      	ldr	r3, [pc, #24]	; (80a183c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1822:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1824:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1826:	4b06      	ldr	r3, [pc, #24]	; (80a1840 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1828:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a182a:	a803      	add	r0, sp, #12
 80a182c:	f7ff fd47 	bl	80a12be <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1830:	2200      	movs	r2, #0
 80a1832:	4629      	mov	r1, r5
 80a1834:	4803      	ldr	r0, [pc, #12]	; (80a1844 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1836:	f7ff fc31 	bl	80a109c <application_thread_invoke>
 80a183a:	e7c7      	b.n	80a17cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a183c:	080a140b 	.word	0x080a140b
 80a1840:	080a16fb 	.word	0x080a16fb
 80a1844:	080a127b 	.word	0x080a127b

080a1848 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1848:	4770      	bx	lr

080a184a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a184a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a184c:	4606      	mov	r6, r0
 80a184e:	4615      	mov	r5, r2
 80a1850:	460c      	mov	r4, r1
 80a1852:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1854:	42bc      	cmp	r4, r7
 80a1856:	d006      	beq.n	80a1866 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1858:	6833      	ldr	r3, [r6, #0]
 80a185a:	4630      	mov	r0, r6
 80a185c:	689b      	ldr	r3, [r3, #8]
 80a185e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1862:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1864:	e7f6      	b.n	80a1854 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1866:	4628      	mov	r0, r5
 80a1868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a186a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a186a:	2200      	movs	r2, #0
 80a186c:	7c00      	ldrb	r0, [r0, #16]
 80a186e:	f7ff bb21 	b.w	80a0eb4 <hal_i2c_write>

080a1872 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1872:	2100      	movs	r1, #0
 80a1874:	7c00      	ldrb	r0, [r0, #16]
 80a1876:	f7ff bb25 	b.w	80a0ec4 <hal_i2c_available>

080a187a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a187a:	2100      	movs	r1, #0
 80a187c:	7c00      	ldrb	r0, [r0, #16]
 80a187e:	f7ff bb29 	b.w	80a0ed4 <hal_i2c_read>

080a1882 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1882:	2100      	movs	r1, #0
 80a1884:	7c00      	ldrb	r0, [r0, #16]
 80a1886:	f7ff bb2d 	b.w	80a0ee4 <hal_i2c_peek>

080a188a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a188a:	2100      	movs	r1, #0
 80a188c:	7c00      	ldrb	r0, [r0, #16]
 80a188e:	f7ff bb31 	b.w	80a0ef4 <hal_i2c_flush>

080a1892 <_ZN7TwoWireD0Ev>:
 80a1892:	b510      	push	{r4, lr}
 80a1894:	4604      	mov	r4, r0
 80a1896:	2114      	movs	r1, #20
 80a1898:	f000 fe7e 	bl	80a2598 <_ZdlPvj>
 80a189c:	4620      	mov	r0, r4
 80a189e:	bd10      	pop	{r4, pc}

080a18a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a18a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a18a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a18a6:	4604      	mov	r4, r0
 80a18a8:	4608      	mov	r0, r1
 80a18aa:	2100      	movs	r1, #0
 80a18ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a18b0:	4b03      	ldr	r3, [pc, #12]	; (80a18c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a18b2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a18b4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a18b6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a18b8:	f7ff fb2c 	bl	80a0f14 <hal_i2c_init>
}
 80a18bc:	4620      	mov	r0, r4
 80a18be:	bd10      	pop	{r4, pc}
 80a18c0:	080a4274 	.word	0x080a4274

080a18c4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a18c4:	2200      	movs	r2, #0
 80a18c6:	7c00      	ldrb	r0, [r0, #16]
 80a18c8:	f7ff bad4 	b.w	80a0e74 <hal_i2c_set_speed>

080a18cc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a18cc:	2300      	movs	r3, #0
 80a18ce:	7c00      	ldrb	r0, [r0, #16]
 80a18d0:	461a      	mov	r2, r3
 80a18d2:	4619      	mov	r1, r3
 80a18d4:	f7ff bad6 	b.w	80a0e84 <hal_i2c_begin>

080a18d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a18d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a18da:	2200      	movs	r2, #0
 80a18dc:	2314      	movs	r3, #20
 80a18de:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a18e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a18e6:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a18e8:	7c00      	ldrb	r0, [r0, #16]
 80a18ea:	f88d 3008 	strb.w	r3, [sp, #8]
 80a18ee:	684b      	ldr	r3, [r1, #4]
 80a18f0:	9303      	str	r3, [sp, #12]
 80a18f2:	68cb      	ldr	r3, [r1, #12]
 80a18f4:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a18f6:	7a0b      	ldrb	r3, [r1, #8]
 80a18f8:	a901      	add	r1, sp, #4
 80a18fa:	9305      	str	r3, [sp, #20]
 80a18fc:	f7ff fb14 	bl	80a0f28 <hal_i2c_request_ex>
}
 80a1900:	b007      	add	sp, #28
 80a1902:	f85d fb04 	ldr.w	pc, [sp], #4

080a1906 <_ZN7TwoWire11requestFromEhjh>:
{
 80a1906:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1908:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a190a:	f88d 1000 	strb.w	r1, [sp]
 80a190e:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1912:	bf18      	it	ne
 80a1914:	2301      	movne	r3, #1
 80a1916:	9103      	str	r1, [sp, #12]
 80a1918:	4669      	mov	r1, sp
    size_ = size;
 80a191a:	9201      	str	r2, [sp, #4]
 80a191c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1920:	f7ff ffda 	bl	80a18d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1924:	b005      	add	sp, #20
 80a1926:	f85d fb04 	ldr.w	pc, [sp], #4

080a192a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a192a:	2301      	movs	r3, #1
 80a192c:	f7ff bfeb 	b.w	80a1906 <_ZN7TwoWire11requestFromEhjh>

080a1930 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1930:	2200      	movs	r2, #0
 80a1932:	7c00      	ldrb	r0, [r0, #16]
 80a1934:	f7ff baae 	b.w	80a0e94 <hal_i2c_begin_transmission>

080a1938 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a1938:	b2c9      	uxtb	r1, r1
 80a193a:	f7ff bff9 	b.w	80a1930 <_ZN7TwoWire17beginTransmissionEh>

080a193e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a193e:	2200      	movs	r2, #0
 80a1940:	7c00      	ldrb	r0, [r0, #16]
 80a1942:	f7ff baaf 	b.w	80a0ea4 <hal_i2c_end_transmission>

080a1946 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1946:	2101      	movs	r1, #1
 80a1948:	f7ff bff9 	b.w	80a193e <_ZN7TwoWire15endTransmissionEh>

080a194c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a194c:	4770      	bx	lr

080a194e <_ZN9IPAddressD0Ev>:
 80a194e:	b510      	push	{r4, lr}
 80a1950:	4604      	mov	r4, r0
 80a1952:	2118      	movs	r1, #24
 80a1954:	f000 fe20 	bl	80a2598 <_ZdlPvj>
 80a1958:	4620      	mov	r0, r4
 80a195a:	bd10      	pop	{r4, pc}

080a195c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a195e:	460e      	mov	r6, r1
 80a1960:	2400      	movs	r4, #0
 80a1962:	f100 0708 	add.w	r7, r0, #8
 80a1966:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1968:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a196c:	220a      	movs	r2, #10
 80a196e:	4630      	mov	r0, r6
 80a1970:	f000 f90b 	bl	80a1b8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1974:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1976:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1978:	d101      	bne.n	80a197e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a197a:	4620      	mov	r0, r4
 80a197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a197e:	2c00      	cmp	r4, #0
 80a1980:	d0f2      	beq.n	80a1968 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1982:	212e      	movs	r1, #46	; 0x2e
 80a1984:	4630      	mov	r0, r6
 80a1986:	f000 f8e1 	bl	80a1b4c <_ZN5Print5printEc>
 80a198a:	4404      	add	r4, r0
 80a198c:	e7ec      	b.n	80a1968 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1990 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1990:	b510      	push	{r4, lr}
 80a1992:	4604      	mov	r4, r0
 80a1994:	4b04      	ldr	r3, [pc, #16]	; (80a19a8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1996:	2211      	movs	r2, #17
 80a1998:	2100      	movs	r1, #0
 80a199a:	f840 3b04 	str.w	r3, [r0], #4
 80a199e:	f001 fe93 	bl	80a36c8 <memset>
}
 80a19a2:	4620      	mov	r0, r4
 80a19a4:	bd10      	pop	{r4, pc}
 80a19a6:	bf00      	nop
 80a19a8:	080a429c 	.word	0x080a429c

080a19ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a19ac:	4603      	mov	r3, r0
 80a19ae:	4a07      	ldr	r2, [pc, #28]	; (80a19cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a19b0:	b510      	push	{r4, lr}
 80a19b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a19b6:	f101 0210 	add.w	r2, r1, #16
 80a19ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80a19be:	4291      	cmp	r1, r2
 80a19c0:	f843 4b04 	str.w	r4, [r3], #4
 80a19c4:	d1f9      	bne.n	80a19ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a19c6:	780a      	ldrb	r2, [r1, #0]
 80a19c8:	701a      	strb	r2, [r3, #0]
}
 80a19ca:	bd10      	pop	{r4, pc}
 80a19cc:	080a429c 	.word	0x080a429c

080a19d0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a19d0:	4a02      	ldr	r2, [pc, #8]	; (80a19dc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a19d2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a19d6:	2204      	movs	r2, #4
 80a19d8:	7502      	strb	r2, [r0, #20]
}
 80a19da:	4770      	bx	lr
 80a19dc:	080a429c 	.word	0x080a429c

080a19e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a19e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a19e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a19e6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a19ea:	2304      	movs	r3, #4
 80a19ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a19f0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a19f4:	6044      	str	r4, [r0, #4]
 80a19f6:	7503      	strb	r3, [r0, #20]
}
 80a19f8:	bd10      	pop	{r4, pc}
	...

080a19fc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a19fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19fe:	4d04      	ldr	r5, [pc, #16]	; (80a1a10 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1a00:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1a02:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1a06:	9500      	str	r5, [sp, #0]
 80a1a08:	f7ff ffea 	bl	80a19e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1a0c:	b003      	add	sp, #12
 80a1a0e:	bd30      	pop	{r4, r5, pc}
 80a1a10:	080a429c 	.word	0x080a429c

080a1a14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1a14:	4b01      	ldr	r3, [pc, #4]	; (80a1a1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1a16:	4a02      	ldr	r2, [pc, #8]	; (80a1a20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1a18:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1a1a:	4770      	bx	lr
 80a1a1c:	20000780 	.word	0x20000780
 80a1a20:	080a42a8 	.word	0x080a42a8

080a1a24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1a24:	2300      	movs	r3, #0
 80a1a26:	6840      	ldr	r0, [r0, #4]
 80a1a28:	461a      	mov	r2, r3
 80a1a2a:	f7ff bb83 	b.w	80a1134 <network_connect>

080a1a2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1a2e:	2200      	movs	r2, #0
 80a1a30:	2102      	movs	r1, #2
 80a1a32:	6840      	ldr	r0, [r0, #4]
 80a1a34:	f7ff bb8e 	b.w	80a1154 <network_disconnect>

080a1a38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1a38:	2200      	movs	r2, #0
 80a1a3a:	6840      	ldr	r0, [r0, #4]
 80a1a3c:	4611      	mov	r1, r2
 80a1a3e:	f7ff bb81 	b.w	80a1144 <network_connecting>

080a1a42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1a42:	2200      	movs	r2, #0
 80a1a44:	6840      	ldr	r0, [r0, #4]
 80a1a46:	4611      	mov	r1, r2
 80a1a48:	f7ff bb8c 	b.w	80a1164 <network_ready>

080a1a4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1a4c:	2300      	movs	r3, #0
 80a1a4e:	6840      	ldr	r0, [r0, #4]
 80a1a50:	461a      	mov	r2, r3
 80a1a52:	4619      	mov	r1, r3
 80a1a54:	f7ff bb8e 	b.w	80a1174 <network_on>

080a1a58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1a58:	2300      	movs	r3, #0
 80a1a5a:	6840      	ldr	r0, [r0, #4]
 80a1a5c:	461a      	mov	r2, r3
 80a1a5e:	4619      	mov	r1, r3
 80a1a60:	f7ff bb90 	b.w	80a1184 <network_off>

080a1a64 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1a64:	2100      	movs	r1, #0
 80a1a66:	6840      	ldr	r0, [r0, #4]
 80a1a68:	f7ff bbb4 	b.w	80a11d4 <network_is_on>

080a1a6c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1a6c:	2100      	movs	r1, #0
 80a1a6e:	6840      	ldr	r0, [r0, #4]
 80a1a70:	f7ff bbb8 	b.w	80a11e4 <network_is_off>

080a1a74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1a74:	2200      	movs	r2, #0
 80a1a76:	6840      	ldr	r0, [r0, #4]
 80a1a78:	f081 0101 	eor.w	r1, r1, #1
 80a1a7c:	f7ff bb8a 	b.w	80a1194 <network_listen>

080a1a80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a80:	2200      	movs	r2, #0
 80a1a82:	6840      	ldr	r0, [r0, #4]
 80a1a84:	f7ff bb96 	b.w	80a11b4 <network_set_listen_timeout>

080a1a88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a88:	2200      	movs	r2, #0
 80a1a8a:	6840      	ldr	r0, [r0, #4]
 80a1a8c:	4611      	mov	r1, r2
 80a1a8e:	f7ff bb99 	b.w	80a11c4 <network_get_listen_timeout>

080a1a92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a92:	2200      	movs	r2, #0
 80a1a94:	6840      	ldr	r0, [r0, #4]
 80a1a96:	4611      	mov	r1, r2
 80a1a98:	f7ff bb84 	b.w	80a11a4 <network_listening>

080a1a9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a9c:	b570      	push	{r4, r5, r6, lr}
 80a1a9e:	4615      	mov	r5, r2
 80a1aa0:	b08e      	sub	sp, #56	; 0x38
 80a1aa2:	4604      	mov	r4, r0
    IPAddress addr;
 80a1aa4:	a808      	add	r0, sp, #32
 80a1aa6:	f7ff ff73 	bl	80a1990 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1aaa:	2211      	movs	r2, #17
 80a1aac:	2100      	movs	r1, #0
 80a1aae:	a803      	add	r0, sp, #12
 80a1ab0:	f001 fe0a 	bl	80a36c8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ab4:	2600      	movs	r6, #0
 80a1ab6:	4628      	mov	r0, r5
 80a1ab8:	f001 fe5f 	bl	80a377a <strlen>
 80a1abc:	4b0a      	ldr	r3, [pc, #40]	; (80a1ae8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1abe:	9600      	str	r6, [sp, #0]
 80a1ac0:	b281      	uxth	r1, r0
 80a1ac2:	685b      	ldr	r3, [r3, #4]
 80a1ac4:	4628      	mov	r0, r5
 80a1ac6:	aa03      	add	r2, sp, #12
 80a1ac8:	f7ff fac0 	bl	80a104c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1acc:	b130      	cbz	r0, 80a1adc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1ace:	4631      	mov	r1, r6
 80a1ad0:	4620      	mov	r0, r4
 80a1ad2:	f7ff ff7d 	bl	80a19d0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ad6:	4620      	mov	r0, r4
 80a1ad8:	b00e      	add	sp, #56	; 0x38
 80a1ada:	bd70      	pop	{r4, r5, r6, pc}
 80a1adc:	4620      	mov	r0, r4
 80a1ade:	a903      	add	r1, sp, #12
 80a1ae0:	f7ff ff64 	bl	80a19ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1ae4:	e7f7      	b.n	80a1ad6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1ae6:	bf00      	nop
 80a1ae8:	20000c14 	.word	0x20000c14

080a1aec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1aec:	4b02      	ldr	r3, [pc, #8]	; (80a1af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1aee:	4a03      	ldr	r2, [pc, #12]	; (80a1afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1af0:	601a      	str	r2, [r3, #0]
 80a1af2:	2200      	movs	r2, #0
 80a1af4:	605a      	str	r2, [r3, #4]

} // spark
 80a1af6:	4770      	bx	lr
 80a1af8:	20000784 	.word	0x20000784
 80a1afc:	080a42b4 	.word	0x080a42b4

080a1b00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b02:	4606      	mov	r6, r0
 80a1b04:	460d      	mov	r5, r1
  size_t n = 0;
 80a1b06:	2400      	movs	r4, #0
 80a1b08:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1b0a:	42bd      	cmp	r5, r7
 80a1b0c:	d00c      	beq.n	80a1b28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1b0e:	6833      	ldr	r3, [r6, #0]
 80a1b10:	4630      	mov	r0, r6
 80a1b12:	689b      	ldr	r3, [r3, #8]
 80a1b14:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1b18:	4798      	blx	r3
     if (chunk>=0)
 80a1b1a:	1e03      	subs	r3, r0, #0
 80a1b1c:	db01      	blt.n	80a1b22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1b1e:	441c      	add	r4, r3
  while (size--) {
 80a1b20:	e7f3      	b.n	80a1b0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1b22:	2c00      	cmp	r4, #0
 80a1b24:	bf08      	it	eq
 80a1b26:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b2c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1b2c:	b570      	push	{r4, r5, r6, lr}
 80a1b2e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1b30:	460c      	mov	r4, r1
    }
 80a1b32:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1b34:	b149      	cbz	r1, 80a1b4a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1b36:	f001 fe20 	bl	80a377a <strlen>
 80a1b3a:	682b      	ldr	r3, [r5, #0]
 80a1b3c:	4602      	mov	r2, r0
 80a1b3e:	4621      	mov	r1, r4
 80a1b40:	4628      	mov	r0, r5
    }
 80a1b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1b46:	68db      	ldr	r3, [r3, #12]
 80a1b48:	4718      	bx	r3
    }
 80a1b4a:	bd70      	pop	{r4, r5, r6, pc}

080a1b4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1b4c:	6803      	ldr	r3, [r0, #0]
 80a1b4e:	689b      	ldr	r3, [r3, #8]
 80a1b50:	4718      	bx	r3

080a1b52 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80a1b52:	b508      	push	{r3, lr}
  return write(str);
 80a1b54:	f7ff ffea 	bl	80a1b2c <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
 80a1b58:	bd08      	pop	{r3, pc}

080a1b5a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80a1b5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1b5c:	210d      	movs	r1, #13
{
 80a1b5e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1b60:	f7ff fff4 	bl	80a1b4c <_ZN5Print5printEc>
  n += print('\n');
 80a1b64:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1b66:	4604      	mov	r4, r0
  n += print('\n');
 80a1b68:	4628      	mov	r0, r5
 80a1b6a:	f7ff ffef 	bl	80a1b4c <_ZN5Print5printEc>
  return n;
}
 80a1b6e:	4420      	add	r0, r4
 80a1b70:	bd38      	pop	{r3, r4, r5, pc}

080a1b72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1b72:	b538      	push	{r3, r4, r5, lr}
 80a1b74:	4605      	mov	r5, r0
  return write(str);
 80a1b76:	f7ff ffd9 	bl	80a1b2c <_ZN5Print5writeEPKc>
 80a1b7a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1b7c:	4628      	mov	r0, r5
 80a1b7e:	f7ff ffec 	bl	80a1b5a <_ZN5Print7printlnEv>
  return n;
}
 80a1b82:	4420      	add	r0, r4
 80a1b84:	bd38      	pop	{r3, r4, r5, pc}

080a1b86 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a1b86:	f7ff bff4 	b.w	80a1b72 <_ZN5Print7printlnEPKc>

080a1b8a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1b8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1b8c:	2a01      	cmp	r2, #1
 80a1b8e:	bf98      	it	ls
 80a1b90:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1b92:	b530      	push	{r4, r5, lr}
 80a1b94:	b08b      	sub	sp, #44	; 0x2c
 80a1b96:	460c      	mov	r4, r1
  *str = '\0';
 80a1b98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1b9c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1b9e:	4625      	mov	r5, r4
 80a1ba0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1ba4:	fb04 5312 	mls	r3, r4, r2, r5
 80a1ba8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1baa:	2b09      	cmp	r3, #9
 80a1bac:	bf94      	ite	ls
 80a1bae:	3330      	addls	r3, #48	; 0x30
 80a1bb0:	3337      	addhi	r3, #55	; 0x37
 80a1bb2:	b2db      	uxtb	r3, r3
  } while(n);
 80a1bb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1bb6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1bba:	d9f0      	bls.n	80a1b9e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1bbc:	f7ff ffb6 	bl	80a1b2c <_ZN5Print5writeEPKc>
}
 80a1bc0:	b00b      	add	sp, #44	; 0x2c
 80a1bc2:	bd30      	pop	{r4, r5, pc}

080a1bc4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1bc4:	2200      	movs	r2, #0
 80a1bc6:	4b01      	ldr	r3, [pc, #4]	; (80a1bcc <_GLOBAL__sub_I_RGB+0x8>)
 80a1bc8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1bca:	4770      	bx	lr
 80a1bcc:	2000078c 	.word	0x2000078c

080a1bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1bd0:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1bd2:	2600      	movs	r6, #0
 80a1bd4:	4604      	mov	r4, r0
 80a1bd6:	460d      	mov	r5, r1
 80a1bd8:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1bdc:	f7ff f902 	bl	80a0de4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1be0:	4628      	mov	r0, r5
    _spi = spi;
 80a1be2:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1be4:	f7ff f9aa 	bl	80a0f3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1be8:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1bea:	6066      	str	r6, [r4, #4]
}
 80a1bec:	bd70      	pop	{r4, r5, r6, pc}

080a1bee <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1bee:	b510      	push	{r4, lr}
 80a1bf0:	4604      	mov	r4, r0
{
	free(buffer);
 80a1bf2:	6800      	ldr	r0, [r0, #0]
 80a1bf4:	f7ff fb06 	bl	80a1204 <free>
}
 80a1bf8:	4620      	mov	r0, r4
 80a1bfa:	bd10      	pop	{r4, pc}

080a1bfc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1bfc:	b510      	push	{r4, lr}
 80a1bfe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1c00:	6800      	ldr	r0, [r0, #0]
 80a1c02:	b108      	cbz	r0, 80a1c08 <_ZN6String10invalidateEv+0xc>
 80a1c04:	f7ff fafe 	bl	80a1204 <free>
	buffer = NULL;
 80a1c08:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1c0a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1c0e:	6023      	str	r3, [r4, #0]
}
 80a1c10:	bd10      	pop	{r4, pc}

080a1c12 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1c12:	b538      	push	{r3, r4, r5, lr}
 80a1c14:	4604      	mov	r4, r0
 80a1c16:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1c18:	6800      	ldr	r0, [r0, #0]
 80a1c1a:	3101      	adds	r1, #1
 80a1c1c:	f7ff fafa 	bl	80a1214 <realloc>
	if (newbuffer) {
 80a1c20:	b110      	cbz	r0, 80a1c28 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1c22:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1c26:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1c28:	bd38      	pop	{r3, r4, r5, pc}

080a1c2a <_ZN6String7reserveEj>:
{
 80a1c2a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1c2c:	6803      	ldr	r3, [r0, #0]
{
 80a1c2e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1c30:	b123      	cbz	r3, 80a1c3c <_ZN6String7reserveEj+0x12>
 80a1c32:	6843      	ldr	r3, [r0, #4]
 80a1c34:	428b      	cmp	r3, r1
 80a1c36:	d301      	bcc.n	80a1c3c <_ZN6String7reserveEj+0x12>
 80a1c38:	2001      	movs	r0, #1
}
 80a1c3a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	f7ff ffe8 	bl	80a1c12 <_ZN6String12changeBufferEj>
 80a1c42:	2800      	cmp	r0, #0
 80a1c44:	d0f9      	beq.n	80a1c3a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1c46:	68a3      	ldr	r3, [r4, #8]
 80a1c48:	2b00      	cmp	r3, #0
 80a1c4a:	d1f5      	bne.n	80a1c38 <_ZN6String7reserveEj+0xe>
 80a1c4c:	6822      	ldr	r2, [r4, #0]
 80a1c4e:	7013      	strb	r3, [r2, #0]
 80a1c50:	e7f2      	b.n	80a1c38 <_ZN6String7reserveEj+0xe>

080a1c52 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1c52:	b570      	push	{r4, r5, r6, lr}
 80a1c54:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1c56:	4611      	mov	r1, r2
{
 80a1c58:	4604      	mov	r4, r0
 80a1c5a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1c5c:	f7ff ffe5 	bl	80a1c2a <_ZN6String7reserveEj>
 80a1c60:	b920      	cbnz	r0, 80a1c6c <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1c62:	4620      	mov	r0, r4
 80a1c64:	f7ff ffca 	bl	80a1bfc <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1c68:	4620      	mov	r0, r4
 80a1c6a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1c6c:	462a      	mov	r2, r5
 80a1c6e:	4631      	mov	r1, r6
 80a1c70:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1c72:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1c74:	f001 fd1a 	bl	80a36ac <memcpy>
	buffer[len] = 0;
 80a1c78:	2100      	movs	r1, #0
 80a1c7a:	6822      	ldr	r2, [r4, #0]
 80a1c7c:	68a3      	ldr	r3, [r4, #8]
 80a1c7e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1c80:	e7f2      	b.n	80a1c68 <_ZN6String4copyEPKcj+0x16>

080a1c82 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1c82:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1c84:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1c86:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c88:	460d      	mov	r5, r1
	capacity = 0;
 80a1c8a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1c8e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c90:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1c92:	b139      	cbz	r1, 80a1ca4 <_ZN6StringC1EPKc+0x22>
 80a1c94:	4608      	mov	r0, r1
 80a1c96:	f001 fd70 	bl	80a377a <strlen>
 80a1c9a:	4629      	mov	r1, r5
 80a1c9c:	4602      	mov	r2, r0
 80a1c9e:	4620      	mov	r0, r4
 80a1ca0:	f7ff ffd7 	bl	80a1c52 <_ZN6String4copyEPKcj>
}
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	bd38      	pop	{r3, r4, r5, pc}

080a1ca8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1ca8:	4288      	cmp	r0, r1
{
 80a1caa:	b510      	push	{r4, lr}
 80a1cac:	460b      	mov	r3, r1
 80a1cae:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1cb0:	d004      	beq.n	80a1cbc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1cb2:	6809      	ldr	r1, [r1, #0]
 80a1cb4:	b121      	cbz	r1, 80a1cc0 <_ZN6StringaSERKS_+0x18>
 80a1cb6:	689a      	ldr	r2, [r3, #8]
 80a1cb8:	f7ff ffcb 	bl	80a1c52 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1cc0:	f7ff ff9c 	bl	80a1bfc <_ZN6String10invalidateEv>
 80a1cc4:	e7fa      	b.n	80a1cbc <_ZN6StringaSERKS_+0x14>

080a1cc6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1cc6:	2300      	movs	r3, #0
String::String(const String &value)
 80a1cc8:	b510      	push	{r4, lr}
 80a1cca:	4604      	mov	r4, r0
	capacity = 0;
 80a1ccc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1cd0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1cd2:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1cd4:	f7ff ffe8 	bl	80a1ca8 <_ZN6StringaSERKS_>
}
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	bd10      	pop	{r4, pc}

080a1cdc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1cdc:	b538      	push	{r3, r4, r5, lr}
 80a1cde:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1ce0:	460c      	mov	r4, r1
 80a1ce2:	b149      	cbz	r1, 80a1cf8 <_ZN6StringaSEPKc+0x1c>
 80a1ce4:	4608      	mov	r0, r1
 80a1ce6:	f001 fd48 	bl	80a377a <strlen>
 80a1cea:	4621      	mov	r1, r4
 80a1cec:	4602      	mov	r2, r0
 80a1cee:	4628      	mov	r0, r5
 80a1cf0:	f7ff ffaf 	bl	80a1c52 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1cf4:	4628      	mov	r0, r5
 80a1cf6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1cf8:	f7ff ff80 	bl	80a1bfc <_ZN6String10invalidateEv>
 80a1cfc:	e7fa      	b.n	80a1cf4 <_ZN6StringaSEPKc+0x18>

080a1cfe <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a1cfe:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1d00:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a1d02:	4604      	mov	r4, r0
 80a1d04:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1d06:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1d0a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1d0c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a1d0e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1d10:	a901      	add	r1, sp, #4
 80a1d12:	f000 fa8d 	bl	80a2230 <ltoa>
	*this = buf;
 80a1d16:	4620      	mov	r0, r4
 80a1d18:	a901      	add	r1, sp, #4
 80a1d1a:	f7ff ffdf 	bl	80a1cdc <_ZN6StringaSEPKc>
}
 80a1d1e:	4620      	mov	r0, r4
 80a1d20:	b00a      	add	sp, #40	; 0x28
 80a1d22:	bd10      	pop	{r4, pc}

080a1d24 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1d24:	b570      	push	{r4, r5, r6, lr}
 80a1d26:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1d28:	460e      	mov	r6, r1
 80a1d2a:	b909      	cbnz	r1, 80a1d30 <_ZN6String6concatEPKcj+0xc>
 80a1d2c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1d2e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1d30:	b16a      	cbz	r2, 80a1d4e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1d32:	6884      	ldr	r4, [r0, #8]
 80a1d34:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1d36:	4621      	mov	r1, r4
 80a1d38:	f7ff ff77 	bl	80a1c2a <_ZN6String7reserveEj>
 80a1d3c:	2800      	cmp	r0, #0
 80a1d3e:	d0f5      	beq.n	80a1d2c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1d40:	6828      	ldr	r0, [r5, #0]
 80a1d42:	68ab      	ldr	r3, [r5, #8]
 80a1d44:	4631      	mov	r1, r6
 80a1d46:	4418      	add	r0, r3
 80a1d48:	f001 fcf4 	bl	80a3734 <strcpy>
	len = newlen;
 80a1d4c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1d4e:	2001      	movs	r0, #1
 80a1d50:	e7ed      	b.n	80a1d2e <_ZN6String6concatEPKcj+0xa>

080a1d52 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1d52:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1d54:	688a      	ldr	r2, [r1, #8]
 80a1d56:	6809      	ldr	r1, [r1, #0]
{
 80a1d58:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1d5a:	f7ff ffe3 	bl	80a1d24 <_ZN6String6concatEPKcj>
 80a1d5e:	b910      	cbnz	r0, 80a1d66 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1d60:	4620      	mov	r0, r4
 80a1d62:	f7ff ff4b 	bl	80a1bfc <_ZN6String10invalidateEv>
	return a;
}
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	bd10      	pop	{r4, pc}

080a1d6a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1d6a:	b538      	push	{r3, r4, r5, lr}
 80a1d6c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1d6e:	460d      	mov	r5, r1
 80a1d70:	b921      	cbnz	r1, 80a1d7c <_ZplRK15StringSumHelperPKc+0x12>
 80a1d72:	4620      	mov	r0, r4
 80a1d74:	f7ff ff42 	bl	80a1bfc <_ZN6String10invalidateEv>
	return a;
}
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1d7c:	4608      	mov	r0, r1
 80a1d7e:	f001 fcfc 	bl	80a377a <strlen>
 80a1d82:	4629      	mov	r1, r5
 80a1d84:	4602      	mov	r2, r0
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	f7ff ffcc 	bl	80a1d24 <_ZN6String6concatEPKcj>
 80a1d8c:	2800      	cmp	r0, #0
 80a1d8e:	d0f0      	beq.n	80a1d72 <_ZplRK15StringSumHelperPKc+0x8>
 80a1d90:	e7f2      	b.n	80a1d78 <_ZplRK15StringSumHelperPKc+0xe>
	...

080a1d94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1d94:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1d96:	2000      	movs	r0, #0
 80a1d98:	4b04      	ldr	r3, [pc, #16]	; (80a1dac <_GLOBAL__sub_I_System+0x18>)
 80a1d9a:	601a      	str	r2, [r3, #0]
 80a1d9c:	4b04      	ldr	r3, [pc, #16]	; (80a1db0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1d9e:	4a05      	ldr	r2, [pc, #20]	; (80a1db4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1da0:	6018      	str	r0, [r3, #0]
 80a1da2:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1da4:	7198      	strb	r0, [r3, #6]
 80a1da6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1da8:	f7ff b960 	b.w	80a106c <set_system_mode>
 80a1dac:	200007a8 	.word	0x200007a8
 80a1db0:	2000079c 	.word	0x2000079c
 80a1db4:	ffff0000 	.word	0xffff0000

080a1db8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a1db8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1dba:	2000      	movs	r0, #0
 80a1dbc:	f7ff f9aa 	bl	80a1114 <spark_sync_time_pending>
 80a1dc0:	b128      	cbz	r0, 80a1dce <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1dc2:	f7ff f997 	bl	80a10f4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1dc6:	f080 0001 	eor.w	r0, r0, #1
 80a1dca:	b2c0      	uxtb	r0, r0
    }
 80a1dcc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1dce:	2001      	movs	r0, #1
 80a1dd0:	e7fc      	b.n	80a1dcc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a1dd4 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a1dd4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1dd6:	490a      	ldr	r1, [pc, #40]	; (80a1e00 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a1dd8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1dda:	f001 f971 	bl	80a30c0 <__aeabi_fcmplt>
 80a1dde:	b968      	cbnz	r0, 80a1dfc <_ZN9TimeClass4zoneEf+0x28>
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	4908      	ldr	r1, [pc, #32]	; (80a1e04 <_ZN9TimeClass4zoneEf+0x30>)
 80a1de4:	f001 f98a 	bl	80a30fc <__aeabi_fcmpgt>
 80a1de8:	b940      	cbnz	r0, 80a1dfc <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a1dea:	4907      	ldr	r1, [pc, #28]	; (80a1e08 <_ZN9TimeClass4zoneEf+0x34>)
 80a1dec:	4620      	mov	r0, r4
 80a1dee:	f000 ffc9 	bl	80a2d84 <__aeabi_fmul>
 80a1df2:	f001 f98d 	bl	80a3110 <__aeabi_f2lz>
 80a1df6:	4b05      	ldr	r3, [pc, #20]	; (80a1e0c <_ZN9TimeClass4zoneEf+0x38>)
 80a1df8:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a1dfc:	bd10      	pop	{r4, pc}
 80a1dfe:	bf00      	nop
 80a1e00:	c1400000 	.word	0xc1400000
 80a1e04:	41600000 	.word	0x41600000
 80a1e08:	45610000 	.word	0x45610000
 80a1e0c:	200007b8 	.word	0x200007b8

080a1e10 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a1e10:	b530      	push	{r4, r5, lr}
 80a1e12:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a1e14:	4818      	ldr	r0, [pc, #96]	; (80a1e78 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a1e16:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a1e18:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a1e1c:	1852      	adds	r2, r2, r1
 80a1e1e:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a1e22:	4816      	ldr	r0, [pc, #88]	; (80a1e7c <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a1e24:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a1e26:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a1e2a:	1852      	adds	r2, r2, r1
 80a1e2c:	eb40 0303 	adc.w	r3, r0, r3
 80a1e30:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a1e34:	2224      	movs	r2, #36	; 0x24
 80a1e36:	2100      	movs	r1, #0
 80a1e38:	eb0d 0002 	add.w	r0, sp, r2
 80a1e3c:	f001 fc44 	bl	80a36c8 <memset>
    localtime_r(&t, &calendar_time);
 80a1e40:	a909      	add	r1, sp, #36	; 0x24
 80a1e42:	4668      	mov	r0, sp
 80a1e44:	f001 fb28 	bl	80a3498 <localtime_r>
    char ascstr[26] = {};
 80a1e48:	2216      	movs	r2, #22
 80a1e4a:	4629      	mov	r1, r5
 80a1e4c:	a803      	add	r0, sp, #12
 80a1e4e:	9502      	str	r5, [sp, #8]
 80a1e50:	f001 fc3a 	bl	80a36c8 <memset>
    asctime_r(&calendar_time, ascstr);
 80a1e54:	a902      	add	r1, sp, #8
 80a1e56:	a809      	add	r0, sp, #36	; 0x24
 80a1e58:	f001 faf2 	bl	80a3440 <asctime_r>
    int len = strlen(ascstr);
 80a1e5c:	a802      	add	r0, sp, #8
 80a1e5e:	f001 fc8c 	bl	80a377a <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a1e62:	ab12      	add	r3, sp, #72	; 0x48
 80a1e64:	4418      	add	r0, r3
 80a1e66:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a1e6a:	a902      	add	r1, sp, #8
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	f7ff ff08 	bl	80a1c82 <_ZN6StringC1EPKc>
}
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	b013      	add	sp, #76	; 0x4c
 80a1e76:	bd30      	pop	{r4, r5, pc}
 80a1e78:	200007b8 	.word	0x200007b8
 80a1e7c:	200007b0 	.word	0x200007b0

080a1e80 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1e80:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1e82:	2000      	movs	r0, #0
 80a1e84:	f7fe ffce 	bl	80a0e24 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1e88:	4604      	mov	r4, r0
 80a1e8a:	b9a0      	cbnz	r0, 80a1eb6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1e8c:	f7ff f8e6 	bl	80a105c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1e90:	2801      	cmp	r0, #1
 80a1e92:	d110      	bne.n	80a1eb6 <_ZN9TimeClass7isValidEv+0x36>
 80a1e94:	4620      	mov	r0, r4
 80a1e96:	f7ff f909 	bl	80a10ac <system_thread_get_state>
 80a1e9a:	b960      	cbnz	r0, 80a1eb6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1e9c:	f7ff ff8c 	bl	80a1db8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1ea0:	b910      	cbnz	r0, 80a1ea8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1ea2:	f7ff f91f 	bl	80a10e4 <spark_process>
        while (_while() && !_condition()) {
 80a1ea6:	e7f9      	b.n	80a1e9c <_ZN9TimeClass7isValidEv+0x1c>
 80a1ea8:	f7ff ff86 	bl	80a1db8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1eb0:	2000      	movs	r0, #0
 80a1eb2:	f7fe bfb7 	b.w	80a0e24 <hal_rtc_time_is_valid>
}
 80a1eb6:	4620      	mov	r0, r4
 80a1eb8:	bd10      	pop	{r4, pc}

080a1eba <_ZN9TimeClass3nowEv>:
{
 80a1eba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1ebc:	f7ff ffe0 	bl	80a1e80 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1ec0:	2210      	movs	r2, #16
 80a1ec2:	2100      	movs	r1, #0
 80a1ec4:	4668      	mov	r0, sp
 80a1ec6:	f001 fbff 	bl	80a36c8 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1eca:	2100      	movs	r1, #0
 80a1ecc:	4668      	mov	r0, sp
 80a1ece:	f7fe ffb1 	bl	80a0e34 <hal_rtc_get_time>
}
 80a1ed2:	9800      	ldr	r0, [sp, #0]
 80a1ed4:	b005      	add	sp, #20
 80a1ed6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1edc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1edc:	4b02      	ldr	r3, [pc, #8]	; (80a1ee8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1ede:	681a      	ldr	r2, [r3, #0]
 80a1ee0:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ee2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1ee4:	4770      	bx	lr
 80a1ee6:	bf00      	nop
 80a1ee8:	20000010 	.word	0x20000010
 80a1eec:	200007ac 	.word	0x200007ac

080a1ef0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ef0:	4770      	bx	lr

080a1ef2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ef2:	7441      	strb	r1, [r0, #17]
}
 80a1ef4:	4770      	bx	lr

080a1ef6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1ef6:	4770      	bx	lr

080a1ef8 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1ef8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1efa:	7c00      	ldrb	r0, [r0, #16]
 80a1efc:	f7ff f866 	bl	80a0fcc <hal_usart_available_data_for_write>
}
 80a1f00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f04:	bd08      	pop	{r3, pc}

080a1f06 <_ZN11USARTSerial9availableEv>:
{
 80a1f06:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1f08:	7c00      	ldrb	r0, [r0, #16]
 80a1f0a:	f7ff f837 	bl	80a0f7c <hal_usart_available>
}
 80a1f0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f12:	bd08      	pop	{r3, pc}

080a1f14 <_ZN11USARTSerial4peekEv>:
{
 80a1f14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1f16:	7c00      	ldrb	r0, [r0, #16]
 80a1f18:	f7ff f840 	bl	80a0f9c <hal_usart_peek>
}
 80a1f1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f20:	bd08      	pop	{r3, pc}

080a1f22 <_ZN11USARTSerial4readEv>:
{
 80a1f22:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1f24:	7c00      	ldrb	r0, [r0, #16]
 80a1f26:	f7ff f831 	bl	80a0f8c <hal_usart_read>
}
 80a1f2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f2e:	bd08      	pop	{r3, pc}

080a1f30 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1f30:	7c00      	ldrb	r0, [r0, #16]
 80a1f32:	f7ff b83b 	b.w	80a0fac <hal_usart_flush>

080a1f36 <_ZN11USARTSerial5writeEh>:
{
 80a1f36:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f38:	7c46      	ldrb	r6, [r0, #17]
{
 80a1f3a:	4604      	mov	r4, r0
 80a1f3c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f3e:	b12e      	cbz	r6, 80a1f4c <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1f40:	4629      	mov	r1, r5
 80a1f42:	7c20      	ldrb	r0, [r4, #16]
}
 80a1f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1f48:	f7ff b810 	b.w	80a0f6c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f4c:	7c00      	ldrb	r0, [r0, #16]
 80a1f4e:	f7ff f83d 	bl	80a0fcc <hal_usart_available_data_for_write>
 80a1f52:	2800      	cmp	r0, #0
 80a1f54:	dcf4      	bgt.n	80a1f40 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1f56:	4630      	mov	r0, r6
 80a1f58:	bd70      	pop	{r4, r5, r6, pc}

080a1f5a <_ZN11USARTSerialD0Ev>:
 80a1f5a:	b510      	push	{r4, lr}
 80a1f5c:	4604      	mov	r4, r0
 80a1f5e:	2114      	movs	r1, #20
 80a1f60:	f000 fb1a 	bl	80a2598 <_ZdlPvj>
 80a1f64:	4620      	mov	r0, r4
 80a1f66:	bd10      	pop	{r4, pc}

080a1f68 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1f68:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1f6c:	b510      	push	{r4, lr}
 80a1f6e:	4604      	mov	r4, r0
 80a1f70:	4608      	mov	r0, r1
 80a1f72:	4611      	mov	r1, r2
 80a1f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f78:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1f7c:	4a04      	ldr	r2, [pc, #16]	; (80a1f90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1f7e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1f80:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1f82:	2201      	movs	r2, #1
 80a1f84:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1f86:	461a      	mov	r2, r3
 80a1f88:	f7fe ffe8 	bl	80a0f5c <hal_usart_init>
}
 80a1f8c:	4620      	mov	r0, r4
 80a1f8e:	bd10      	pop	{r4, pc}
 80a1f90:	080a430c 	.word	0x080a430c

080a1f94 <_Z22__fetch_global_Serial1v>:
{
 80a1f94:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f96:	4d0c      	ldr	r5, [pc, #48]	; (80a1fc8 <_Z22__fetch_global_Serial1v+0x34>)
 80a1f98:	7829      	ldrb	r1, [r5, #0]
 80a1f9a:	f3bf 8f5b 	dmb	ish
 80a1f9e:	f011 0401 	ands.w	r4, r1, #1
 80a1fa2:	d10f      	bne.n	80a1fc4 <_Z22__fetch_global_Serial1v+0x30>
 80a1fa4:	4628      	mov	r0, r5
 80a1fa6:	f7fe f87c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1faa:	b158      	cbz	r0, 80a1fc4 <_Z22__fetch_global_Serial1v+0x30>
 80a1fac:	4621      	mov	r1, r4
 80a1fae:	4b07      	ldr	r3, [pc, #28]	; (80a1fcc <_Z22__fetch_global_Serial1v+0x38>)
 80a1fb0:	4a07      	ldr	r2, [pc, #28]	; (80a1fd0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1fb2:	4808      	ldr	r0, [pc, #32]	; (80a1fd4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fb4:	f7ff ffd8 	bl	80a1f68 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1fb8:	4628      	mov	r0, r5
 80a1fba:	f7fe f877 	bl	80a00ac <__cxa_guard_release>
 80a1fbe:	4806      	ldr	r0, [pc, #24]	; (80a1fd8 <_Z22__fetch_global_Serial1v+0x44>)
 80a1fc0:	f001 fa64 	bl	80a348c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1fc4:	4803      	ldr	r0, [pc, #12]	; (80a1fd4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fc6:	bd38      	pop	{r3, r4, r5, pc}
 80a1fc8:	200007c0 	.word	0x200007c0
 80a1fcc:	20000848 	.word	0x20000848
 80a1fd0:	200007c4 	.word	0x200007c4
 80a1fd4:	200008cc 	.word	0x200008cc
 80a1fd8:	080a1ef7 	.word	0x080a1ef7

080a1fdc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1fdc:	7441      	strb	r1, [r0, #17]
}
 80a1fde:	4770      	bx	lr

080a1fe0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1fe0:	4770      	bx	lr

080a1fe2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1fe2:	4770      	bx	lr

080a1fe4 <_ZN9USBSerial4readEv>:
{
 80a1fe4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1fe6:	2100      	movs	r1, #0
 80a1fe8:	7c00      	ldrb	r0, [r0, #16]
 80a1fea:	f7ff f817 	bl	80a101c <HAL_USB_USART_Receive_Data>
}
 80a1fee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ff2:	bd08      	pop	{r3, pc}

080a1ff4 <_ZN9USBSerial4peekEv>:
{
 80a1ff4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1ff6:	2101      	movs	r1, #1
 80a1ff8:	7c00      	ldrb	r0, [r0, #16]
 80a1ffa:	f7ff f80f 	bl	80a101c <HAL_USB_USART_Receive_Data>
}
 80a1ffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2002:	bd08      	pop	{r3, pc}

080a2004 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2004:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2006:	7c00      	ldrb	r0, [r0, #16]
 80a2008:	f7ff f800 	bl	80a100c <HAL_USB_USART_Available_Data_For_Write>
}
 80a200c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2010:	bd08      	pop	{r3, pc}

080a2012 <_ZN9USBSerial9availableEv>:
{
 80a2012:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2014:	7c00      	ldrb	r0, [r0, #16]
 80a2016:	f7fe fff1 	bl	80a0ffc <HAL_USB_USART_Available_Data>
}
 80a201a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a201e:	bd08      	pop	{r3, pc}

080a2020 <_ZN9USBSerial5writeEh>:
{
 80a2020:	b538      	push	{r3, r4, r5, lr}
 80a2022:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2024:	7c00      	ldrb	r0, [r0, #16]
{
 80a2026:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2028:	f7fe fff0 	bl	80a100c <HAL_USB_USART_Available_Data_For_Write>
 80a202c:	2800      	cmp	r0, #0
 80a202e:	dc01      	bgt.n	80a2034 <_ZN9USBSerial5writeEh+0x14>
 80a2030:	7c60      	ldrb	r0, [r4, #17]
 80a2032:	b128      	cbz	r0, 80a2040 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2034:	4629      	mov	r1, r5
 80a2036:	7c20      	ldrb	r0, [r4, #16]
 80a2038:	f7fe fff8 	bl	80a102c <HAL_USB_USART_Send_Data>
 80a203c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2040:	bd38      	pop	{r3, r4, r5, pc}

080a2042 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2042:	7c00      	ldrb	r0, [r0, #16]
 80a2044:	f7fe bffa 	b.w	80a103c <HAL_USB_USART_Flush_Data>

080a2048 <_ZN9USBSerialD0Ev>:
 80a2048:	b510      	push	{r4, lr}
 80a204a:	4604      	mov	r4, r0
 80a204c:	2114      	movs	r1, #20
 80a204e:	f000 faa3 	bl	80a2598 <_ZdlPvj>
 80a2052:	4620      	mov	r0, r4
 80a2054:	bd10      	pop	{r4, pc}

080a2056 <__tcf_1>:
 80a2056:	4770      	bx	lr

080a2058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2058:	b510      	push	{r4, lr}
 80a205a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a205e:	4604      	mov	r4, r0
 80a2060:	4608      	mov	r0, r1
 80a2062:	2100      	movs	r1, #0
 80a2064:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2068:	4b04      	ldr	r3, [pc, #16]	; (80a207c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a206a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a206c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a206e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2070:	4611      	mov	r1, r2
  _blocking = true;
 80a2072:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2074:	f7fe ffb2 	bl	80a0fdc <HAL_USB_USART_Init>
}
 80a2078:	4620      	mov	r0, r4
 80a207a:	bd10      	pop	{r4, pc}
 80a207c:	080a433c 	.word	0x080a433c

080a2080 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2080:	2200      	movs	r2, #0
 80a2082:	7c00      	ldrb	r0, [r0, #16]
 80a2084:	f7fe bfb2 	b.w	80a0fec <HAL_USB_USART_Begin>

080a2088 <_Z19acquireSerialBufferv>:
{
 80a2088:	b510      	push	{r4, lr}
 80a208a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a208c:	2214      	movs	r2, #20
 80a208e:	2100      	movs	r1, #0
 80a2090:	f001 fb1a 	bl	80a36c8 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2094:	4b05      	ldr	r3, [pc, #20]	; (80a20ac <_Z19acquireSerialBufferv+0x24>)
}
 80a2096:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2098:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a209a:	4b05      	ldr	r3, [pc, #20]	; (80a20b0 <_Z19acquireSerialBufferv+0x28>)
 80a209c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a209e:	f240 1301 	movw	r3, #257	; 0x101
 80a20a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a20a4:	2381      	movs	r3, #129	; 0x81
 80a20a6:	8223      	strh	r3, [r4, #16]
}
 80a20a8:	bd10      	pop	{r4, pc}
 80a20aa:	bf00      	nop
 80a20ac:	20000910 	.word	0x20000910
 80a20b0:	20000a11 	.word	0x20000a11

080a20b4 <_Z16_fetch_usbserialv>:
{
 80a20b4:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20b6:	4d0e      	ldr	r5, [pc, #56]	; (80a20f0 <_Z16_fetch_usbserialv+0x3c>)
{
 80a20b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a20ba:	a801      	add	r0, sp, #4
 80a20bc:	f7ff ffe4 	bl	80a2088 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20c0:	7829      	ldrb	r1, [r5, #0]
 80a20c2:	f3bf 8f5b 	dmb	ish
 80a20c6:	f011 0401 	ands.w	r4, r1, #1
 80a20ca:	d10e      	bne.n	80a20ea <_Z16_fetch_usbserialv+0x36>
 80a20cc:	4628      	mov	r0, r5
 80a20ce:	f7fd ffe8 	bl	80a00a2 <__cxa_guard_acquire>
 80a20d2:	b150      	cbz	r0, 80a20ea <_Z16_fetch_usbserialv+0x36>
 80a20d4:	4621      	mov	r1, r4
 80a20d6:	aa01      	add	r2, sp, #4
 80a20d8:	4806      	ldr	r0, [pc, #24]	; (80a20f4 <_Z16_fetch_usbserialv+0x40>)
 80a20da:	f7ff ffbd 	bl	80a2058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a20de:	4628      	mov	r0, r5
 80a20e0:	f7fd ffe4 	bl	80a00ac <__cxa_guard_release>
 80a20e4:	4804      	ldr	r0, [pc, #16]	; (80a20f8 <_Z16_fetch_usbserialv+0x44>)
 80a20e6:	f001 f9d1 	bl	80a348c <atexit>
	return _usbserial;
}
 80a20ea:	4802      	ldr	r0, [pc, #8]	; (80a20f4 <_Z16_fetch_usbserialv+0x40>)
 80a20ec:	b007      	add	sp, #28
 80a20ee:	bd30      	pop	{r4, r5, pc}
 80a20f0:	200008e0 	.word	0x200008e0
 80a20f4:	200008e8 	.word	0x200008e8
 80a20f8:	080a1fe1 	.word	0x080a1fe1

080a20fc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a20fc:	b510      	push	{r4, lr}
 80a20fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2100:	2214      	movs	r2, #20
 80a2102:	2100      	movs	r1, #0
 80a2104:	f001 fae0 	bl	80a36c8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2108:	4b05      	ldr	r3, [pc, #20]	; (80a2120 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a210a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a210c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a210e:	4b05      	ldr	r3, [pc, #20]	; (80a2124 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2110:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2112:	f240 1301 	movw	r3, #257	; 0x101
 80a2116:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2118:	2381      	movs	r3, #129	; 0x81
 80a211a:	8223      	strh	r3, [r4, #16]
}
 80a211c:	bd10      	pop	{r4, pc}
 80a211e:	bf00      	nop
 80a2120:	20000a92 	.word	0x20000a92
 80a2124:	20000b93 	.word	0x20000b93

080a2128 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2128:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a212a:	4c0e      	ldr	r4, [pc, #56]	; (80a2164 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a212c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a212e:	a801      	add	r0, sp, #4
 80a2130:	f7ff ffe4 	bl	80a20fc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2134:	7823      	ldrb	r3, [r4, #0]
 80a2136:	f3bf 8f5b 	dmb	ish
 80a213a:	07db      	lsls	r3, r3, #31
 80a213c:	d40e      	bmi.n	80a215c <_Z17_fetch_usbserial1v+0x34>
 80a213e:	4620      	mov	r0, r4
 80a2140:	f7fd ffaf 	bl	80a00a2 <__cxa_guard_acquire>
 80a2144:	b150      	cbz	r0, 80a215c <_Z17_fetch_usbserial1v+0x34>
 80a2146:	2101      	movs	r1, #1
 80a2148:	aa01      	add	r2, sp, #4
 80a214a:	4807      	ldr	r0, [pc, #28]	; (80a2168 <_Z17_fetch_usbserial1v+0x40>)
 80a214c:	f7ff ff84 	bl	80a2058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2150:	4620      	mov	r0, r4
 80a2152:	f7fd ffab 	bl	80a00ac <__cxa_guard_release>
 80a2156:	4805      	ldr	r0, [pc, #20]	; (80a216c <_Z17_fetch_usbserial1v+0x44>)
 80a2158:	f001 f998 	bl	80a348c <atexit>
  return _usbserial1;
}
 80a215c:	4802      	ldr	r0, [pc, #8]	; (80a2168 <_Z17_fetch_usbserial1v+0x40>)
 80a215e:	b006      	add	sp, #24
 80a2160:	bd10      	pop	{r4, pc}
 80a2162:	bf00      	nop
 80a2164:	200008e4 	.word	0x200008e4
 80a2168:	200008fc 	.word	0x200008fc
 80a216c:	080a2057 	.word	0x080a2057

080a2170 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2170:	2200      	movs	r2, #0
 80a2172:	6840      	ldr	r0, [r0, #4]
 80a2174:	4611      	mov	r1, r2
 80a2176:	f7fe bff5 	b.w	80a1164 <network_ready>

080a217a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a217a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a217c:	4615      	mov	r5, r2
 80a217e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2180:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2182:	460e      	mov	r6, r1
 80a2184:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2186:	2100      	movs	r1, #0
 80a2188:	a803      	add	r0, sp, #12
 80a218a:	f001 fa9d 	bl	80a36c8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a218e:	4628      	mov	r0, r5
 80a2190:	f001 faf3 	bl	80a377a <strlen>
 80a2194:	2700      	movs	r7, #0
 80a2196:	b281      	uxth	r1, r0
 80a2198:	6873      	ldr	r3, [r6, #4]
 80a219a:	4628      	mov	r0, r5
 80a219c:	9700      	str	r7, [sp, #0]
 80a219e:	aa03      	add	r2, sp, #12
 80a21a0:	f7fe ff54 	bl	80a104c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21a4:	b130      	cbz	r0, 80a21b4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a21a6:	4639      	mov	r1, r7
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	f7ff fc11 	bl	80a19d0 <_ZN9IPAddressC1Em>
    }
 80a21ae:	4620      	mov	r0, r4
 80a21b0:	b009      	add	sp, #36	; 0x24
 80a21b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21b4:	4620      	mov	r0, r4
 80a21b6:	a903      	add	r1, sp, #12
 80a21b8:	f7ff fbf8 	bl	80a19ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a21bc:	e7f7      	b.n	80a21ae <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a21be <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a21be:	2200      	movs	r2, #0
 80a21c0:	6840      	ldr	r0, [r0, #4]
 80a21c2:	4611      	mov	r1, r2
 80a21c4:	f7fe bfee 	b.w	80a11a4 <network_listening>

080a21c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a21c8:	2200      	movs	r2, #0
 80a21ca:	6840      	ldr	r0, [r0, #4]
 80a21cc:	4611      	mov	r1, r2
 80a21ce:	f7fe bff9 	b.w	80a11c4 <network_get_listen_timeout>

080a21d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a21d2:	2200      	movs	r2, #0
 80a21d4:	6840      	ldr	r0, [r0, #4]
 80a21d6:	f7fe bfed 	b.w	80a11b4 <network_set_listen_timeout>

080a21da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a21da:	2200      	movs	r2, #0
 80a21dc:	6840      	ldr	r0, [r0, #4]
 80a21de:	f081 0101 	eor.w	r1, r1, #1
 80a21e2:	f7fe bfd7 	b.w	80a1194 <network_listen>

080a21e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a21e6:	2300      	movs	r3, #0
 80a21e8:	6840      	ldr	r0, [r0, #4]
 80a21ea:	461a      	mov	r2, r3
 80a21ec:	4619      	mov	r1, r3
 80a21ee:	f7fe bfc9 	b.w	80a1184 <network_off>

080a21f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a21f2:	2300      	movs	r3, #0
 80a21f4:	6840      	ldr	r0, [r0, #4]
 80a21f6:	461a      	mov	r2, r3
 80a21f8:	4619      	mov	r1, r3
 80a21fa:	f7fe bfbb 	b.w	80a1174 <network_on>

080a21fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a21fe:	2200      	movs	r2, #0
 80a2200:	6840      	ldr	r0, [r0, #4]
 80a2202:	4611      	mov	r1, r2
 80a2204:	f7fe bf9e 	b.w	80a1144 <network_connecting>

080a2208 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2208:	2200      	movs	r2, #0
 80a220a:	2102      	movs	r1, #2
 80a220c:	6840      	ldr	r0, [r0, #4]
 80a220e:	f7fe bfa1 	b.w	80a1154 <network_disconnect>

080a2212 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2212:	2300      	movs	r3, #0
 80a2214:	6840      	ldr	r0, [r0, #4]
 80a2216:	461a      	mov	r2, r3
 80a2218:	f7fe bf8c 	b.w	80a1134 <network_connect>

080a221c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a221c:	2204      	movs	r2, #4
 80a221e:	4b02      	ldr	r3, [pc, #8]	; (80a2228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2220:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2222:	4a02      	ldr	r2, [pc, #8]	; (80a222c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2224:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2226:	4770      	bx	lr
 80a2228:	20000c14 	.word	0x20000c14
 80a222c:	080a436c 	.word	0x080a436c

080a2230 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2230:	1e93      	subs	r3, r2, #2
 80a2232:	2b22      	cmp	r3, #34	; 0x22
 80a2234:	f04f 0300 	mov.w	r3, #0
{
 80a2238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a223c:	b08c      	sub	sp, #48	; 0x30
 80a223e:	460d      	mov	r5, r1
 80a2240:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2242:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a2246:	d926      	bls.n	80a2296 <ltoa+0x66>

      if (10 == base && N < 0L)
 80a2248:	2800      	cmp	r0, #0
 80a224a:	da29      	bge.n	80a22a0 <ltoa+0x70>
      {
            *head++ = '-';
 80a224c:	462e      	mov	r6, r5
 80a224e:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a2250:	240a      	movs	r4, #10
            *head++ = '-';
 80a2252:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a2256:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2258:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a225c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2260:	4622      	mov	r2, r4
 80a2262:	4601      	mov	r1, r0
 80a2264:	a801      	add	r0, sp, #4
 80a2266:	f001 fa0d 	bl	80a3684 <ldiv>
 80a226a:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a226c:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a226e:	2b09      	cmp	r3, #9
 80a2270:	bfcc      	ite	gt
 80a2272:	2237      	movgt	r2, #55	; 0x37
 80a2274:	2230      	movle	r2, #48	; 0x30
 80a2276:	4413      	add	r3, r2
 80a2278:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a227c:	f108 0801 	add.w	r8, r8, #1
 80a2280:	2800      	cmp	r0, #0
 80a2282:	d1ed      	bne.n	80a2260 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a2284:	4642      	mov	r2, r8
 80a2286:	4630      	mov	r0, r6
 80a2288:	1c79      	adds	r1, r7, #1
 80a228a:	f001 fa0f 	bl	80a36ac <memcpy>
      return str;
}
 80a228e:	4628      	mov	r0, r5
 80a2290:	b00c      	add	sp, #48	; 0x30
 80a2292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a2296:	2a0a      	cmp	r2, #10
 80a2298:	d0d6      	beq.n	80a2248 <ltoa+0x18>
      if (uarg)
 80a229a:	b118      	cbz	r0, 80a22a4 <ltoa+0x74>
 80a229c:	462e      	mov	r6, r5
 80a229e:	e7db      	b.n	80a2258 <ltoa+0x28>
 80a22a0:	240a      	movs	r4, #10
 80a22a2:	e7fa      	b.n	80a229a <ltoa+0x6a>
      else  *tail-- = '0';
 80a22a4:	2330      	movs	r3, #48	; 0x30
 80a22a6:	462e      	mov	r6, r5
      int i = 2;
 80a22a8:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a22ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a22b0:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a22b4:	e7e6      	b.n	80a2284 <ltoa+0x54>
	...

080a22b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a22b8:	4b01      	ldr	r3, [pc, #4]	; (80a22c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a22ba:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a22bc:	4770      	bx	lr
 80a22be:	bf00      	nop
 80a22c0:	20000014 	.word	0x20000014

080a22c4 <serialEventRun>:
{
 80a22c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a22c6:	4b13      	ldr	r3, [pc, #76]	; (80a2314 <serialEventRun+0x50>)
 80a22c8:	b143      	cbz	r3, 80a22dc <serialEventRun+0x18>
 80a22ca:	f7ff fef3 	bl	80a20b4 <_Z16_fetch_usbserialv>
 80a22ce:	6803      	ldr	r3, [r0, #0]
 80a22d0:	691b      	ldr	r3, [r3, #16]
 80a22d2:	4798      	blx	r3
 80a22d4:	2800      	cmp	r0, #0
 80a22d6:	dd01      	ble.n	80a22dc <serialEventRun+0x18>
        serialEvent();
 80a22d8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a22dc:	4b0e      	ldr	r3, [pc, #56]	; (80a2318 <serialEventRun+0x54>)
 80a22de:	b143      	cbz	r3, 80a22f2 <serialEventRun+0x2e>
 80a22e0:	f7ff fe58 	bl	80a1f94 <_Z22__fetch_global_Serial1v>
 80a22e4:	6803      	ldr	r3, [r0, #0]
 80a22e6:	691b      	ldr	r3, [r3, #16]
 80a22e8:	4798      	blx	r3
 80a22ea:	2800      	cmp	r0, #0
 80a22ec:	dd01      	ble.n	80a22f2 <serialEventRun+0x2e>
        serialEvent1();
 80a22ee:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a22f2:	4b0a      	ldr	r3, [pc, #40]	; (80a231c <serialEventRun+0x58>)
 80a22f4:	b10b      	cbz	r3, 80a22fa <serialEventRun+0x36>
 80a22f6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a22fa:	4b09      	ldr	r3, [pc, #36]	; (80a2320 <serialEventRun+0x5c>)
 80a22fc:	b143      	cbz	r3, 80a2310 <serialEventRun+0x4c>
 80a22fe:	f7ff ff13 	bl	80a2128 <_Z17_fetch_usbserial1v>
 80a2302:	6803      	ldr	r3, [r0, #0]
 80a2304:	691b      	ldr	r3, [r3, #16]
 80a2306:	4798      	blx	r3
 80a2308:	2800      	cmp	r0, #0
 80a230a:	dd01      	ble.n	80a2310 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a230c:	f3af 8000 	nop.w
}
 80a2310:	bd08      	pop	{r3, pc}
 80a2312:	bf00      	nop
	...

080a2324 <_post_loop>:
{
 80a2324:	b508      	push	{r3, lr}
	serialEventRun();
 80a2326:	f7ff ffcd 	bl	80a22c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a232a:	f7fe fd73 	bl	80a0e14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a232e:	4b01      	ldr	r3, [pc, #4]	; (80a2334 <_post_loop+0x10>)
 80a2330:	6018      	str	r0, [r3, #0]
}
 80a2332:	bd08      	pop	{r3, pc}
 80a2334:	20000c34 	.word	0x20000c34

080a2338 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2338:	4805      	ldr	r0, [pc, #20]	; (80a2350 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a233a:	4a06      	ldr	r2, [pc, #24]	; (80a2354 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a233c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a233e:	1a12      	subs	r2, r2, r0
 80a2340:	4905      	ldr	r1, [pc, #20]	; (80a2358 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2342:	f001 f9b3 	bl	80a36ac <memcpy>
    __backup_sram_signature = signature;
 80a2346:	4b05      	ldr	r3, [pc, #20]	; (80a235c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2348:	4a05      	ldr	r2, [pc, #20]	; (80a2360 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a234a:	601a      	str	r2, [r3, #0]
}
 80a234c:	bd08      	pop	{r3, pc}
 80a234e:	bf00      	nop
 80a2350:	40024000 	.word	0x40024000
 80a2354:	40024004 	.word	0x40024004
 80a2358:	080a45c8 	.word	0x080a45c8
 80a235c:	40024000 	.word	0x40024000
 80a2360:	9a271c1e 	.word	0x9a271c1e

080a2364 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2364:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2366:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2368:	461a      	mov	r2, r3
 80a236a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a236e:	9300      	str	r3, [sp, #0]
 80a2370:	f7fe feae 	bl	80a10d0 <system_ctrl_set_result>
}
 80a2374:	b003      	add	sp, #12
 80a2376:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a237c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a237c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a237e:	8843      	ldrh	r3, [r0, #2]
 80a2380:	2b0a      	cmp	r3, #10
 80a2382:	d008      	beq.n	80a2396 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2384:	2b50      	cmp	r3, #80	; 0x50
 80a2386:	d10b      	bne.n	80a23a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2388:	4b09      	ldr	r3, [pc, #36]	; (80a23b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a238a:	681b      	ldr	r3, [r3, #0]
 80a238c:	b14b      	cbz	r3, 80a23a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a238e:	b003      	add	sp, #12
 80a2390:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2394:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2396:	f7ff ffe5 	bl	80a2364 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a239a:	b003      	add	sp, #12
 80a239c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23a0:	2300      	movs	r3, #0
 80a23a2:	461a      	mov	r2, r3
 80a23a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23a8:	9300      	str	r3, [sp, #0]
 80a23aa:	f7fe fe91 	bl	80a10d0 <system_ctrl_set_result>
}
 80a23ae:	e7f4      	b.n	80a239a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a23b0:	20000c20 	.word	0x20000c20

080a23b4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a23b4:	2100      	movs	r1, #0
{
 80a23b6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a23b8:	4811      	ldr	r0, [pc, #68]	; (80a2400 <module_user_init_hook+0x4c>)
 80a23ba:	f7fe ff53 	bl	80a1264 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a23be:	4b11      	ldr	r3, [pc, #68]	; (80a2404 <module_user_init_hook+0x50>)
 80a23c0:	681a      	ldr	r2, [r3, #0]
 80a23c2:	4b11      	ldr	r3, [pc, #68]	; (80a2408 <module_user_init_hook+0x54>)
 80a23c4:	429a      	cmp	r2, r3
 80a23c6:	bf0c      	ite	eq
 80a23c8:	2201      	moveq	r2, #1
 80a23ca:	2200      	movne	r2, #0
 80a23cc:	4b0f      	ldr	r3, [pc, #60]	; (80a240c <module_user_init_hook+0x58>)
 80a23ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a23d0:	d001      	beq.n	80a23d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a23d2:	f7ff ffb1 	bl	80a2338 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a23d6:	f7fe fd15 	bl	80a0e04 <HAL_RNG_GetRandomNumber>
 80a23da:	4604      	mov	r4, r0
    srand(seed);
 80a23dc:	f001 f97c 	bl	80a36d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a23e0:	4b0b      	ldr	r3, [pc, #44]	; (80a2410 <module_user_init_hook+0x5c>)
 80a23e2:	b113      	cbz	r3, 80a23ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a23e4:	4620      	mov	r0, r4
 80a23e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a23ea:	2100      	movs	r1, #0
 80a23ec:	4808      	ldr	r0, [pc, #32]	; (80a2410 <module_user_init_hook+0x5c>)
 80a23ee:	f7fe fe99 	bl	80a1124 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a23f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a23f6:	2100      	movs	r1, #0
 80a23f8:	4806      	ldr	r0, [pc, #24]	; (80a2414 <module_user_init_hook+0x60>)
 80a23fa:	f7fe be5f 	b.w	80a10bc <system_ctrl_set_app_request_handler>
 80a23fe:	bf00      	nop
 80a2400:	080a22b9 	.word	0x080a22b9
 80a2404:	40024000 	.word	0x40024000
 80a2408:	9a271c1e 	.word	0x9a271c1e
 80a240c:	20000c1c 	.word	0x20000c1c
 80a2410:	00000000 	.word	0x00000000
 80a2414:	080a237d 	.word	0x080a237d

080a2418 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2418:	4b02      	ldr	r3, [pc, #8]	; (80a2424 <__tcf_0+0xc>)
 80a241a:	6898      	ldr	r0, [r3, #8]
 80a241c:	b108      	cbz	r0, 80a2422 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a241e:	f7fe bce9 	b.w	80a0df4 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2422:	4770      	bx	lr
 80a2424:	20000c28 	.word	0x20000c28

080a2428 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2428:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a242a:	b570      	push	{r4, r5, r6, lr}
 80a242c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a242e:	d901      	bls.n	80a2434 <pinAvailable+0xc>
    return false;
 80a2430:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2432:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2434:	f1a0 030d 	sub.w	r3, r0, #13
 80a2438:	2b02      	cmp	r3, #2
 80a243a:	d90b      	bls.n	80a2454 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a243c:	2801      	cmp	r0, #1
 80a243e:	d824      	bhi.n	80a248a <pinAvailable+0x62>
 80a2440:	f000 f878 	bl	80a2534 <_Z19__fetch_global_Wirev>
 80a2444:	2100      	movs	r1, #0
 80a2446:	7c00      	ldrb	r0, [r0, #16]
 80a2448:	f7fe fd5c 	bl	80a0f04 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a244c:	f080 0001 	eor.w	r0, r0, #1
 80a2450:	b2c0      	uxtb	r0, r0
 80a2452:	e7ee      	b.n	80a2432 <pinAvailable+0xa>
 80a2454:	4e12      	ldr	r6, [pc, #72]	; (80a24a0 <pinAvailable+0x78>)
 80a2456:	7831      	ldrb	r1, [r6, #0]
 80a2458:	f3bf 8f5b 	dmb	ish
 80a245c:	f011 0501 	ands.w	r5, r1, #1
 80a2460:	d10d      	bne.n	80a247e <pinAvailable+0x56>
 80a2462:	4630      	mov	r0, r6
 80a2464:	f7fd fe1d 	bl	80a00a2 <__cxa_guard_acquire>
 80a2468:	b148      	cbz	r0, 80a247e <pinAvailable+0x56>
 80a246a:	4629      	mov	r1, r5
 80a246c:	480d      	ldr	r0, [pc, #52]	; (80a24a4 <pinAvailable+0x7c>)
 80a246e:	f7ff fbaf 	bl	80a1bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2472:	4630      	mov	r0, r6
 80a2474:	f7fd fe1a 	bl	80a00ac <__cxa_guard_release>
 80a2478:	480b      	ldr	r0, [pc, #44]	; (80a24a8 <pinAvailable+0x80>)
 80a247a:	f001 f807 	bl	80a348c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a247e:	4b09      	ldr	r3, [pc, #36]	; (80a24a4 <pinAvailable+0x7c>)
 80a2480:	7818      	ldrb	r0, [r3, #0]
 80a2482:	f7fe fd63 	bl	80a0f4c <hal_spi_is_enabled>
 80a2486:	2800      	cmp	r0, #0
 80a2488:	d1d2      	bne.n	80a2430 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a248a:	3c12      	subs	r4, #18
 80a248c:	2c01      	cmp	r4, #1
 80a248e:	d805      	bhi.n	80a249c <pinAvailable+0x74>
 80a2490:	f7ff fd80 	bl	80a1f94 <_Z22__fetch_global_Serial1v>
 80a2494:	7c00      	ldrb	r0, [r0, #16]
 80a2496:	f7fe fd91 	bl	80a0fbc <hal_usart_is_enabled>
 80a249a:	e7d7      	b.n	80a244c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a249c:	2001      	movs	r0, #1
 80a249e:	e7c8      	b.n	80a2432 <pinAvailable+0xa>
 80a24a0:	20000c24 	.word	0x20000c24
 80a24a4:	20000c28 	.word	0x20000c28
 80a24a8:	080a2419 	.word	0x080a2419

080a24ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24ac:	2817      	cmp	r0, #23
{
 80a24ae:	b538      	push	{r3, r4, r5, lr}
 80a24b0:	4604      	mov	r4, r0
 80a24b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24b4:	d80a      	bhi.n	80a24cc <pinMode+0x20>
 80a24b6:	29ff      	cmp	r1, #255	; 0xff
 80a24b8:	d008      	beq.n	80a24cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a24ba:	f7ff ffb5 	bl	80a2428 <pinAvailable>
 80a24be:	b128      	cbz	r0, 80a24cc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a24c0:	4629      	mov	r1, r5
 80a24c2:	4620      	mov	r0, r4
}
 80a24c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a24c8:	f7fe bcbc 	b.w	80a0e44 <HAL_Pin_Mode>
}
 80a24cc:	bd38      	pop	{r3, r4, r5, pc}

080a24ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a24ce:	b538      	push	{r3, r4, r5, lr}
 80a24d0:	4604      	mov	r4, r0
 80a24d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a24d4:	f7fe fcbe 	bl	80a0e54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a24d8:	28ff      	cmp	r0, #255	; 0xff
 80a24da:	d010      	beq.n	80a24fe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a24dc:	2806      	cmp	r0, #6
 80a24de:	d804      	bhi.n	80a24ea <digitalWrite+0x1c>
 80a24e0:	234d      	movs	r3, #77	; 0x4d
 80a24e2:	fa23 f000 	lsr.w	r0, r3, r0
 80a24e6:	07c3      	lsls	r3, r0, #31
 80a24e8:	d409      	bmi.n	80a24fe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a24ea:	4620      	mov	r0, r4
 80a24ec:	f7ff ff9c 	bl	80a2428 <pinAvailable>
 80a24f0:	b128      	cbz	r0, 80a24fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a24f2:	4629      	mov	r1, r5
 80a24f4:	4620      	mov	r0, r4
}
 80a24f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a24fa:	f7fe bcb3 	b.w	80a0e64 <HAL_GPIO_Write>
}
 80a24fe:	bd38      	pop	{r3, r4, r5, pc}

080a2500 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2500:	4770      	bx	lr
	...

080a2504 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2504:	2300      	movs	r3, #0
{
 80a2506:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2508:	2520      	movs	r5, #32
 80a250a:	8043      	strh	r3, [r0, #2]
 80a250c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a250e:	4e08      	ldr	r6, [pc, #32]	; (80a2530 <_Z17acquireWireBufferv+0x2c>)
{
 80a2510:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2512:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2514:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2516:	6085      	str	r5, [r0, #8]
 80a2518:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a251a:	4628      	mov	r0, r5
 80a251c:	f000 f83e 	bl	80a259c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2520:	4631      	mov	r1, r6
	};
 80a2522:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2524:	4628      	mov	r0, r5
 80a2526:	f000 f839 	bl	80a259c <_ZnajRKSt9nothrow_t>
	};
 80a252a:	60e0      	str	r0, [r4, #12]
}
 80a252c:	4620      	mov	r0, r4
 80a252e:	bd70      	pop	{r4, r5, r6, pc}
 80a2530:	080a43a0 	.word	0x080a43a0

080a2534 <_Z19__fetch_global_Wirev>:
{
 80a2534:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2536:	4d0e      	ldr	r5, [pc, #56]	; (80a2570 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2538:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a253a:	7829      	ldrb	r1, [r5, #0]
 80a253c:	f3bf 8f5b 	dmb	ish
 80a2540:	f011 0401 	ands.w	r4, r1, #1
 80a2544:	d111      	bne.n	80a256a <_Z19__fetch_global_Wirev+0x36>
 80a2546:	4628      	mov	r0, r5
 80a2548:	f7fd fdab 	bl	80a00a2 <__cxa_guard_acquire>
 80a254c:	b168      	cbz	r0, 80a256a <_Z19__fetch_global_Wirev+0x36>
 80a254e:	a801      	add	r0, sp, #4
 80a2550:	f7ff ffd8 	bl	80a2504 <_Z17acquireWireBufferv>
 80a2554:	4621      	mov	r1, r4
 80a2556:	aa01      	add	r2, sp, #4
 80a2558:	4806      	ldr	r0, [pc, #24]	; (80a2574 <_Z19__fetch_global_Wirev+0x40>)
 80a255a:	f7ff f9a1 	bl	80a18a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a255e:	4628      	mov	r0, r5
 80a2560:	f7fd fda4 	bl	80a00ac <__cxa_guard_release>
 80a2564:	4804      	ldr	r0, [pc, #16]	; (80a2578 <_Z19__fetch_global_Wirev+0x44>)
 80a2566:	f000 ff91 	bl	80a348c <atexit>
	return wire;
}
 80a256a:	4802      	ldr	r0, [pc, #8]	; (80a2574 <_Z19__fetch_global_Wirev+0x40>)
 80a256c:	b007      	add	sp, #28
 80a256e:	bd30      	pop	{r4, r5, pc}
 80a2570:	20000c38 	.word	0x20000c38
 80a2574:	20000c3c 	.word	0x20000c3c
 80a2578:	080a2501 	.word	0x080a2501

080a257c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a257c:	2300      	movs	r3, #0
 80a257e:	b507      	push	{r0, r1, r2, lr}
 80a2580:	461a      	mov	r2, r3
 80a2582:	4619      	mov	r1, r3
 80a2584:	9300      	str	r3, [sp, #0]
 80a2586:	4803      	ldr	r0, [pc, #12]	; (80a2594 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2588:	f7ff fa38 	bl	80a19fc <_ZN9IPAddressC1Ehhhh>
 80a258c:	b003      	add	sp, #12
 80a258e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2592:	bf00      	nop
 80a2594:	20000c50 	.word	0x20000c50

080a2598 <_ZdlPvj>:
 80a2598:	f7fd bd81 	b.w	80a009e <_ZdlPv>

080a259c <_ZnajRKSt9nothrow_t>:
 80a259c:	f7fd bd7d 	b.w	80a009a <_Znaj>

080a25a0 <_ZSt25__throw_bad_function_callv>:
 80a25a0:	b508      	push	{r3, lr}
 80a25a2:	f7fe fe4f 	bl	80a1244 <abort>
	...

080a25a8 <__aeabi_drsub>:
 80a25a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a25ac:	e002      	b.n	80a25b4 <__adddf3>
 80a25ae:	bf00      	nop

080a25b0 <__aeabi_dsub>:
 80a25b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a25b4 <__adddf3>:
 80a25b4:	b530      	push	{r4, r5, lr}
 80a25b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a25ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a25be:	ea94 0f05 	teq	r4, r5
 80a25c2:	bf08      	it	eq
 80a25c4:	ea90 0f02 	teqeq	r0, r2
 80a25c8:	bf1f      	itttt	ne
 80a25ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a25ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a25d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a25d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a25da:	f000 80e2 	beq.w	80a27a2 <__adddf3+0x1ee>
 80a25de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a25e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a25e6:	bfb8      	it	lt
 80a25e8:	426d      	neglt	r5, r5
 80a25ea:	dd0c      	ble.n	80a2606 <__adddf3+0x52>
 80a25ec:	442c      	add	r4, r5
 80a25ee:	ea80 0202 	eor.w	r2, r0, r2
 80a25f2:	ea81 0303 	eor.w	r3, r1, r3
 80a25f6:	ea82 0000 	eor.w	r0, r2, r0
 80a25fa:	ea83 0101 	eor.w	r1, r3, r1
 80a25fe:	ea80 0202 	eor.w	r2, r0, r2
 80a2602:	ea81 0303 	eor.w	r3, r1, r3
 80a2606:	2d36      	cmp	r5, #54	; 0x36
 80a2608:	bf88      	it	hi
 80a260a:	bd30      	pophi	{r4, r5, pc}
 80a260c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2610:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a261c:	d002      	beq.n	80a2624 <__adddf3+0x70>
 80a261e:	4240      	negs	r0, r0
 80a2620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2628:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a262c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2630:	d002      	beq.n	80a2638 <__adddf3+0x84>
 80a2632:	4252      	negs	r2, r2
 80a2634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2638:	ea94 0f05 	teq	r4, r5
 80a263c:	f000 80a7 	beq.w	80a278e <__adddf3+0x1da>
 80a2640:	f1a4 0401 	sub.w	r4, r4, #1
 80a2644:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2648:	db0d      	blt.n	80a2666 <__adddf3+0xb2>
 80a264a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a264e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2652:	1880      	adds	r0, r0, r2
 80a2654:	f141 0100 	adc.w	r1, r1, #0
 80a2658:	fa03 f20e 	lsl.w	r2, r3, lr
 80a265c:	1880      	adds	r0, r0, r2
 80a265e:	fa43 f305 	asr.w	r3, r3, r5
 80a2662:	4159      	adcs	r1, r3
 80a2664:	e00e      	b.n	80a2684 <__adddf3+0xd0>
 80a2666:	f1a5 0520 	sub.w	r5, r5, #32
 80a266a:	f10e 0e20 	add.w	lr, lr, #32
 80a266e:	2a01      	cmp	r2, #1
 80a2670:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2674:	bf28      	it	cs
 80a2676:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a267a:	fa43 f305 	asr.w	r3, r3, r5
 80a267e:	18c0      	adds	r0, r0, r3
 80a2680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2688:	d507      	bpl.n	80a269a <__adddf3+0xe6>
 80a268a:	f04f 0e00 	mov.w	lr, #0
 80a268e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2692:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2696:	eb6e 0101 	sbc.w	r1, lr, r1
 80a269a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a269e:	d31b      	bcc.n	80a26d8 <__adddf3+0x124>
 80a26a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a26a4:	d30c      	bcc.n	80a26c0 <__adddf3+0x10c>
 80a26a6:	0849      	lsrs	r1, r1, #1
 80a26a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a26ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a26b0:	f104 0401 	add.w	r4, r4, #1
 80a26b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a26b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a26bc:	f080 809a 	bcs.w	80a27f4 <__adddf3+0x240>
 80a26c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a26c4:	bf08      	it	eq
 80a26c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a26ca:	f150 0000 	adcs.w	r0, r0, #0
 80a26ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a26d2:	ea41 0105 	orr.w	r1, r1, r5
 80a26d6:	bd30      	pop	{r4, r5, pc}
 80a26d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a26dc:	4140      	adcs	r0, r0
 80a26de:	eb41 0101 	adc.w	r1, r1, r1
 80a26e2:	3c01      	subs	r4, #1
 80a26e4:	bf28      	it	cs
 80a26e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a26ea:	d2e9      	bcs.n	80a26c0 <__adddf3+0x10c>
 80a26ec:	f091 0f00 	teq	r1, #0
 80a26f0:	bf04      	itt	eq
 80a26f2:	4601      	moveq	r1, r0
 80a26f4:	2000      	moveq	r0, #0
 80a26f6:	fab1 f381 	clz	r3, r1
 80a26fa:	bf08      	it	eq
 80a26fc:	3320      	addeq	r3, #32
 80a26fe:	f1a3 030b 	sub.w	r3, r3, #11
 80a2702:	f1b3 0220 	subs.w	r2, r3, #32
 80a2706:	da0c      	bge.n	80a2722 <__adddf3+0x16e>
 80a2708:	320c      	adds	r2, #12
 80a270a:	dd08      	ble.n	80a271e <__adddf3+0x16a>
 80a270c:	f102 0c14 	add.w	ip, r2, #20
 80a2710:	f1c2 020c 	rsb	r2, r2, #12
 80a2714:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2718:	fa21 f102 	lsr.w	r1, r1, r2
 80a271c:	e00c      	b.n	80a2738 <__adddf3+0x184>
 80a271e:	f102 0214 	add.w	r2, r2, #20
 80a2722:	bfd8      	it	le
 80a2724:	f1c2 0c20 	rsble	ip, r2, #32
 80a2728:	fa01 f102 	lsl.w	r1, r1, r2
 80a272c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2730:	bfdc      	itt	le
 80a2732:	ea41 010c 	orrle.w	r1, r1, ip
 80a2736:	4090      	lslle	r0, r2
 80a2738:	1ae4      	subs	r4, r4, r3
 80a273a:	bfa2      	ittt	ge
 80a273c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2740:	4329      	orrge	r1, r5
 80a2742:	bd30      	popge	{r4, r5, pc}
 80a2744:	ea6f 0404 	mvn.w	r4, r4
 80a2748:	3c1f      	subs	r4, #31
 80a274a:	da1c      	bge.n	80a2786 <__adddf3+0x1d2>
 80a274c:	340c      	adds	r4, #12
 80a274e:	dc0e      	bgt.n	80a276e <__adddf3+0x1ba>
 80a2750:	f104 0414 	add.w	r4, r4, #20
 80a2754:	f1c4 0220 	rsb	r2, r4, #32
 80a2758:	fa20 f004 	lsr.w	r0, r0, r4
 80a275c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2760:	ea40 0003 	orr.w	r0, r0, r3
 80a2764:	fa21 f304 	lsr.w	r3, r1, r4
 80a2768:	ea45 0103 	orr.w	r1, r5, r3
 80a276c:	bd30      	pop	{r4, r5, pc}
 80a276e:	f1c4 040c 	rsb	r4, r4, #12
 80a2772:	f1c4 0220 	rsb	r2, r4, #32
 80a2776:	fa20 f002 	lsr.w	r0, r0, r2
 80a277a:	fa01 f304 	lsl.w	r3, r1, r4
 80a277e:	ea40 0003 	orr.w	r0, r0, r3
 80a2782:	4629      	mov	r1, r5
 80a2784:	bd30      	pop	{r4, r5, pc}
 80a2786:	fa21 f004 	lsr.w	r0, r1, r4
 80a278a:	4629      	mov	r1, r5
 80a278c:	bd30      	pop	{r4, r5, pc}
 80a278e:	f094 0f00 	teq	r4, #0
 80a2792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2796:	bf06      	itte	eq
 80a2798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a279c:	3401      	addeq	r4, #1
 80a279e:	3d01      	subne	r5, #1
 80a27a0:	e74e      	b.n	80a2640 <__adddf3+0x8c>
 80a27a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a27a6:	bf18      	it	ne
 80a27a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a27ac:	d029      	beq.n	80a2802 <__adddf3+0x24e>
 80a27ae:	ea94 0f05 	teq	r4, r5
 80a27b2:	bf08      	it	eq
 80a27b4:	ea90 0f02 	teqeq	r0, r2
 80a27b8:	d005      	beq.n	80a27c6 <__adddf3+0x212>
 80a27ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80a27be:	bf04      	itt	eq
 80a27c0:	4619      	moveq	r1, r3
 80a27c2:	4610      	moveq	r0, r2
 80a27c4:	bd30      	pop	{r4, r5, pc}
 80a27c6:	ea91 0f03 	teq	r1, r3
 80a27ca:	bf1e      	ittt	ne
 80a27cc:	2100      	movne	r1, #0
 80a27ce:	2000      	movne	r0, #0
 80a27d0:	bd30      	popne	{r4, r5, pc}
 80a27d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a27d6:	d105      	bne.n	80a27e4 <__adddf3+0x230>
 80a27d8:	0040      	lsls	r0, r0, #1
 80a27da:	4149      	adcs	r1, r1
 80a27dc:	bf28      	it	cs
 80a27de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a27e2:	bd30      	pop	{r4, r5, pc}
 80a27e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a27e8:	bf3c      	itt	cc
 80a27ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a27ee:	bd30      	popcc	{r4, r5, pc}
 80a27f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a27f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a27fc:	f04f 0000 	mov.w	r0, #0
 80a2800:	bd30      	pop	{r4, r5, pc}
 80a2802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2806:	bf1a      	itte	ne
 80a2808:	4619      	movne	r1, r3
 80a280a:	4610      	movne	r0, r2
 80a280c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2810:	bf1c      	itt	ne
 80a2812:	460b      	movne	r3, r1
 80a2814:	4602      	movne	r2, r0
 80a2816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a281a:	bf06      	itte	eq
 80a281c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2820:	ea91 0f03 	teqeq	r1, r3
 80a2824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2828:	bd30      	pop	{r4, r5, pc}
 80a282a:	bf00      	nop

080a282c <__aeabi_ui2d>:
 80a282c:	f090 0f00 	teq	r0, #0
 80a2830:	bf04      	itt	eq
 80a2832:	2100      	moveq	r1, #0
 80a2834:	4770      	bxeq	lr
 80a2836:	b530      	push	{r4, r5, lr}
 80a2838:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a283c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2840:	f04f 0500 	mov.w	r5, #0
 80a2844:	f04f 0100 	mov.w	r1, #0
 80a2848:	e750      	b.n	80a26ec <__adddf3+0x138>
 80a284a:	bf00      	nop

080a284c <__aeabi_i2d>:
 80a284c:	f090 0f00 	teq	r0, #0
 80a2850:	bf04      	itt	eq
 80a2852:	2100      	moveq	r1, #0
 80a2854:	4770      	bxeq	lr
 80a2856:	b530      	push	{r4, r5, lr}
 80a2858:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a285c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2864:	bf48      	it	mi
 80a2866:	4240      	negmi	r0, r0
 80a2868:	f04f 0100 	mov.w	r1, #0
 80a286c:	e73e      	b.n	80a26ec <__adddf3+0x138>
 80a286e:	bf00      	nop

080a2870 <__aeabi_f2d>:
 80a2870:	0042      	lsls	r2, r0, #1
 80a2872:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2876:	ea4f 0131 	mov.w	r1, r1, rrx
 80a287a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a287e:	bf1f      	itttt	ne
 80a2880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a288c:	4770      	bxne	lr
 80a288e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2892:	bf08      	it	eq
 80a2894:	4770      	bxeq	lr
 80a2896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a289a:	bf04      	itt	eq
 80a289c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a28a0:	4770      	bxeq	lr
 80a28a2:	b530      	push	{r4, r5, lr}
 80a28a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a28a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a28b0:	e71c      	b.n	80a26ec <__adddf3+0x138>
 80a28b2:	bf00      	nop

080a28b4 <__aeabi_ul2d>:
 80a28b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a28b8:	bf08      	it	eq
 80a28ba:	4770      	bxeq	lr
 80a28bc:	b530      	push	{r4, r5, lr}
 80a28be:	f04f 0500 	mov.w	r5, #0
 80a28c2:	e00a      	b.n	80a28da <__aeabi_l2d+0x16>

080a28c4 <__aeabi_l2d>:
 80a28c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a28c8:	bf08      	it	eq
 80a28ca:	4770      	bxeq	lr
 80a28cc:	b530      	push	{r4, r5, lr}
 80a28ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a28d2:	d502      	bpl.n	80a28da <__aeabi_l2d+0x16>
 80a28d4:	4240      	negs	r0, r0
 80a28d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a28da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a28de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a28e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a28e6:	f43f aed8 	beq.w	80a269a <__adddf3+0xe6>
 80a28ea:	f04f 0203 	mov.w	r2, #3
 80a28ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a28f2:	bf18      	it	ne
 80a28f4:	3203      	addne	r2, #3
 80a28f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a28fa:	bf18      	it	ne
 80a28fc:	3203      	addne	r2, #3
 80a28fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2902:	f1c2 0320 	rsb	r3, r2, #32
 80a2906:	fa00 fc03 	lsl.w	ip, r0, r3
 80a290a:	fa20 f002 	lsr.w	r0, r0, r2
 80a290e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2912:	ea40 000e 	orr.w	r0, r0, lr
 80a2916:	fa21 f102 	lsr.w	r1, r1, r2
 80a291a:	4414      	add	r4, r2
 80a291c:	e6bd      	b.n	80a269a <__adddf3+0xe6>
 80a291e:	bf00      	nop

080a2920 <__aeabi_dmul>:
 80a2920:	b570      	push	{r4, r5, r6, lr}
 80a2922:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a292a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a292e:	bf1d      	ittte	ne
 80a2930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2934:	ea94 0f0c 	teqne	r4, ip
 80a2938:	ea95 0f0c 	teqne	r5, ip
 80a293c:	f000 f8de 	bleq	80a2afc <__aeabi_dmul+0x1dc>
 80a2940:	442c      	add	r4, r5
 80a2942:	ea81 0603 	eor.w	r6, r1, r3
 80a2946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a294a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a294e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2952:	bf18      	it	ne
 80a2954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a295c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2960:	d038      	beq.n	80a29d4 <__aeabi_dmul+0xb4>
 80a2962:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2966:	f04f 0500 	mov.w	r5, #0
 80a296a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a296e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2972:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2976:	f04f 0600 	mov.w	r6, #0
 80a297a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a297e:	f09c 0f00 	teq	ip, #0
 80a2982:	bf18      	it	ne
 80a2984:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a298c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2994:	d204      	bcs.n	80a29a0 <__aeabi_dmul+0x80>
 80a2996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a299a:	416d      	adcs	r5, r5
 80a299c:	eb46 0606 	adc.w	r6, r6, r6
 80a29a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a29a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a29a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a29ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a29b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a29b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a29b8:	bf88      	it	hi
 80a29ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a29be:	d81e      	bhi.n	80a29fe <__aeabi_dmul+0xde>
 80a29c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a29c4:	bf08      	it	eq
 80a29c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a29ca:	f150 0000 	adcs.w	r0, r0, #0
 80a29ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a29d2:	bd70      	pop	{r4, r5, r6, pc}
 80a29d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a29d8:	ea46 0101 	orr.w	r1, r6, r1
 80a29dc:	ea40 0002 	orr.w	r0, r0, r2
 80a29e0:	ea81 0103 	eor.w	r1, r1, r3
 80a29e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a29e8:	bfc2      	ittt	gt
 80a29ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a29ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a29f2:	bd70      	popgt	{r4, r5, r6, pc}
 80a29f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a29f8:	f04f 0e00 	mov.w	lr, #0
 80a29fc:	3c01      	subs	r4, #1
 80a29fe:	f300 80ab 	bgt.w	80a2b58 <__aeabi_dmul+0x238>
 80a2a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2a06:	bfde      	ittt	le
 80a2a08:	2000      	movle	r0, #0
 80a2a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2a0e:	bd70      	pople	{r4, r5, r6, pc}
 80a2a10:	f1c4 0400 	rsb	r4, r4, #0
 80a2a14:	3c20      	subs	r4, #32
 80a2a16:	da35      	bge.n	80a2a84 <__aeabi_dmul+0x164>
 80a2a18:	340c      	adds	r4, #12
 80a2a1a:	dc1b      	bgt.n	80a2a54 <__aeabi_dmul+0x134>
 80a2a1c:	f104 0414 	add.w	r4, r4, #20
 80a2a20:	f1c4 0520 	rsb	r5, r4, #32
 80a2a24:	fa00 f305 	lsl.w	r3, r0, r5
 80a2a28:	fa20 f004 	lsr.w	r0, r0, r4
 80a2a2c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2a30:	ea40 0002 	orr.w	r0, r0, r2
 80a2a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a40:	fa21 f604 	lsr.w	r6, r1, r4
 80a2a44:	eb42 0106 	adc.w	r1, r2, r6
 80a2a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a4c:	bf08      	it	eq
 80a2a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a52:	bd70      	pop	{r4, r5, r6, pc}
 80a2a54:	f1c4 040c 	rsb	r4, r4, #12
 80a2a58:	f1c4 0520 	rsb	r5, r4, #32
 80a2a5c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2a60:	fa20 f005 	lsr.w	r0, r0, r5
 80a2a64:	fa01 f204 	lsl.w	r2, r1, r4
 80a2a68:	ea40 0002 	orr.w	r0, r0, r2
 80a2a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a74:	f141 0100 	adc.w	r1, r1, #0
 80a2a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a7c:	bf08      	it	eq
 80a2a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a82:	bd70      	pop	{r4, r5, r6, pc}
 80a2a84:	f1c4 0520 	rsb	r5, r4, #32
 80a2a88:	fa00 f205 	lsl.w	r2, r0, r5
 80a2a8c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2a90:	fa20 f304 	lsr.w	r3, r0, r4
 80a2a94:	fa01 f205 	lsl.w	r2, r1, r5
 80a2a98:	ea43 0302 	orr.w	r3, r3, r2
 80a2a9c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2aa4:	fa21 f204 	lsr.w	r2, r1, r4
 80a2aa8:	ea20 0002 	bic.w	r0, r0, r2
 80a2aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2ab4:	bf08      	it	eq
 80a2ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2aba:	bd70      	pop	{r4, r5, r6, pc}
 80a2abc:	f094 0f00 	teq	r4, #0
 80a2ac0:	d10f      	bne.n	80a2ae2 <__aeabi_dmul+0x1c2>
 80a2ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2ac6:	0040      	lsls	r0, r0, #1
 80a2ac8:	eb41 0101 	adc.w	r1, r1, r1
 80a2acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ad0:	bf08      	it	eq
 80a2ad2:	3c01      	subeq	r4, #1
 80a2ad4:	d0f7      	beq.n	80a2ac6 <__aeabi_dmul+0x1a6>
 80a2ad6:	ea41 0106 	orr.w	r1, r1, r6
 80a2ada:	f095 0f00 	teq	r5, #0
 80a2ade:	bf18      	it	ne
 80a2ae0:	4770      	bxne	lr
 80a2ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2ae6:	0052      	lsls	r2, r2, #1
 80a2ae8:	eb43 0303 	adc.w	r3, r3, r3
 80a2aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2af0:	bf08      	it	eq
 80a2af2:	3d01      	subeq	r5, #1
 80a2af4:	d0f7      	beq.n	80a2ae6 <__aeabi_dmul+0x1c6>
 80a2af6:	ea43 0306 	orr.w	r3, r3, r6
 80a2afa:	4770      	bx	lr
 80a2afc:	ea94 0f0c 	teq	r4, ip
 80a2b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2b04:	bf18      	it	ne
 80a2b06:	ea95 0f0c 	teqne	r5, ip
 80a2b0a:	d00c      	beq.n	80a2b26 <__aeabi_dmul+0x206>
 80a2b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b10:	bf18      	it	ne
 80a2b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b16:	d1d1      	bne.n	80a2abc <__aeabi_dmul+0x19c>
 80a2b18:	ea81 0103 	eor.w	r1, r1, r3
 80a2b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b20:	f04f 0000 	mov.w	r0, #0
 80a2b24:	bd70      	pop	{r4, r5, r6, pc}
 80a2b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b2a:	bf06      	itte	eq
 80a2b2c:	4610      	moveq	r0, r2
 80a2b2e:	4619      	moveq	r1, r3
 80a2b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b34:	d019      	beq.n	80a2b6a <__aeabi_dmul+0x24a>
 80a2b36:	ea94 0f0c 	teq	r4, ip
 80a2b3a:	d102      	bne.n	80a2b42 <__aeabi_dmul+0x222>
 80a2b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2b40:	d113      	bne.n	80a2b6a <__aeabi_dmul+0x24a>
 80a2b42:	ea95 0f0c 	teq	r5, ip
 80a2b46:	d105      	bne.n	80a2b54 <__aeabi_dmul+0x234>
 80a2b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2b4c:	bf1c      	itt	ne
 80a2b4e:	4610      	movne	r0, r2
 80a2b50:	4619      	movne	r1, r3
 80a2b52:	d10a      	bne.n	80a2b6a <__aeabi_dmul+0x24a>
 80a2b54:	ea81 0103 	eor.w	r1, r1, r3
 80a2b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b64:	f04f 0000 	mov.w	r0, #0
 80a2b68:	bd70      	pop	{r4, r5, r6, pc}
 80a2b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2b72:	bd70      	pop	{r4, r5, r6, pc}

080a2b74 <__aeabi_ddiv>:
 80a2b74:	b570      	push	{r4, r5, r6, lr}
 80a2b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b82:	bf1d      	ittte	ne
 80a2b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b88:	ea94 0f0c 	teqne	r4, ip
 80a2b8c:	ea95 0f0c 	teqne	r5, ip
 80a2b90:	f000 f8a7 	bleq	80a2ce2 <__aeabi_ddiv+0x16e>
 80a2b94:	eba4 0405 	sub.w	r4, r4, r5
 80a2b98:	ea81 0e03 	eor.w	lr, r1, r3
 80a2b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ba4:	f000 8088 	beq.w	80a2cb8 <__aeabi_ddiv+0x144>
 80a2ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2bcc:	429d      	cmp	r5, r3
 80a2bce:	bf08      	it	eq
 80a2bd0:	4296      	cmpeq	r6, r2
 80a2bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2bda:	d202      	bcs.n	80a2be2 <__aeabi_ddiv+0x6e>
 80a2bdc:	085b      	lsrs	r3, r3, #1
 80a2bde:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2be2:	1ab6      	subs	r6, r6, r2
 80a2be4:	eb65 0503 	sbc.w	r5, r5, r3
 80a2be8:	085b      	lsrs	r3, r3, #1
 80a2bea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2bfe:	bf22      	ittt	cs
 80a2c00:	1ab6      	subcs	r6, r6, r2
 80a2c02:	4675      	movcs	r5, lr
 80a2c04:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c08:	085b      	lsrs	r3, r3, #1
 80a2c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c16:	bf22      	ittt	cs
 80a2c18:	1ab6      	subcs	r6, r6, r2
 80a2c1a:	4675      	movcs	r5, lr
 80a2c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2c20:	085b      	lsrs	r3, r3, #1
 80a2c22:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c26:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c2e:	bf22      	ittt	cs
 80a2c30:	1ab6      	subcs	r6, r6, r2
 80a2c32:	4675      	movcs	r5, lr
 80a2c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2c38:	085b      	lsrs	r3, r3, #1
 80a2c3a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c3e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c42:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c46:	bf22      	ittt	cs
 80a2c48:	1ab6      	subcs	r6, r6, r2
 80a2c4a:	4675      	movcs	r5, lr
 80a2c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c50:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2c54:	d018      	beq.n	80a2c88 <__aeabi_ddiv+0x114>
 80a2c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2c72:	d1c0      	bne.n	80a2bf6 <__aeabi_ddiv+0x82>
 80a2c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c78:	d10b      	bne.n	80a2c92 <__aeabi_ddiv+0x11e>
 80a2c7a:	ea41 0100 	orr.w	r1, r1, r0
 80a2c7e:	f04f 0000 	mov.w	r0, #0
 80a2c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2c86:	e7b6      	b.n	80a2bf6 <__aeabi_ddiv+0x82>
 80a2c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c8c:	bf04      	itt	eq
 80a2c8e:	4301      	orreq	r1, r0
 80a2c90:	2000      	moveq	r0, #0
 80a2c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2c96:	bf88      	it	hi
 80a2c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2c9c:	f63f aeaf 	bhi.w	80a29fe <__aeabi_dmul+0xde>
 80a2ca0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ca4:	bf04      	itt	eq
 80a2ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2cae:	f150 0000 	adcs.w	r0, r0, #0
 80a2cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2cb6:	bd70      	pop	{r4, r5, r6, pc}
 80a2cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2cc4:	bfc2      	ittt	gt
 80a2cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2cce:	bd70      	popgt	{r4, r5, r6, pc}
 80a2cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2cd4:	f04f 0e00 	mov.w	lr, #0
 80a2cd8:	3c01      	subs	r4, #1
 80a2cda:	e690      	b.n	80a29fe <__aeabi_dmul+0xde>
 80a2cdc:	ea45 0e06 	orr.w	lr, r5, r6
 80a2ce0:	e68d      	b.n	80a29fe <__aeabi_dmul+0xde>
 80a2ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ce6:	ea94 0f0c 	teq	r4, ip
 80a2cea:	bf08      	it	eq
 80a2cec:	ea95 0f0c 	teqeq	r5, ip
 80a2cf0:	f43f af3b 	beq.w	80a2b6a <__aeabi_dmul+0x24a>
 80a2cf4:	ea94 0f0c 	teq	r4, ip
 80a2cf8:	d10a      	bne.n	80a2d10 <__aeabi_ddiv+0x19c>
 80a2cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2cfe:	f47f af34 	bne.w	80a2b6a <__aeabi_dmul+0x24a>
 80a2d02:	ea95 0f0c 	teq	r5, ip
 80a2d06:	f47f af25 	bne.w	80a2b54 <__aeabi_dmul+0x234>
 80a2d0a:	4610      	mov	r0, r2
 80a2d0c:	4619      	mov	r1, r3
 80a2d0e:	e72c      	b.n	80a2b6a <__aeabi_dmul+0x24a>
 80a2d10:	ea95 0f0c 	teq	r5, ip
 80a2d14:	d106      	bne.n	80a2d24 <__aeabi_ddiv+0x1b0>
 80a2d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2d1a:	f43f aefd 	beq.w	80a2b18 <__aeabi_dmul+0x1f8>
 80a2d1e:	4610      	mov	r0, r2
 80a2d20:	4619      	mov	r1, r3
 80a2d22:	e722      	b.n	80a2b6a <__aeabi_dmul+0x24a>
 80a2d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d28:	bf18      	it	ne
 80a2d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d2e:	f47f aec5 	bne.w	80a2abc <__aeabi_dmul+0x19c>
 80a2d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2d36:	f47f af0d 	bne.w	80a2b54 <__aeabi_dmul+0x234>
 80a2d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2d3e:	f47f aeeb 	bne.w	80a2b18 <__aeabi_dmul+0x1f8>
 80a2d42:	e712      	b.n	80a2b6a <__aeabi_dmul+0x24a>

080a2d44 <__aeabi_d2uiz>:
 80a2d44:	004a      	lsls	r2, r1, #1
 80a2d46:	d211      	bcs.n	80a2d6c <__aeabi_d2uiz+0x28>
 80a2d48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2d4c:	d211      	bcs.n	80a2d72 <__aeabi_d2uiz+0x2e>
 80a2d4e:	d50d      	bpl.n	80a2d6c <__aeabi_d2uiz+0x28>
 80a2d50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2d54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2d58:	d40e      	bmi.n	80a2d78 <__aeabi_d2uiz+0x34>
 80a2d5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d66:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d6a:	4770      	bx	lr
 80a2d6c:	f04f 0000 	mov.w	r0, #0
 80a2d70:	4770      	bx	lr
 80a2d72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2d76:	d102      	bne.n	80a2d7e <__aeabi_d2uiz+0x3a>
 80a2d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2d7c:	4770      	bx	lr
 80a2d7e:	f04f 0000 	mov.w	r0, #0
 80a2d82:	4770      	bx	lr

080a2d84 <__aeabi_fmul>:
 80a2d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2d8c:	bf1e      	ittt	ne
 80a2d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2d92:	ea92 0f0c 	teqne	r2, ip
 80a2d96:	ea93 0f0c 	teqne	r3, ip
 80a2d9a:	d06f      	beq.n	80a2e7c <__aeabi_fmul+0xf8>
 80a2d9c:	441a      	add	r2, r3
 80a2d9e:	ea80 0c01 	eor.w	ip, r0, r1
 80a2da2:	0240      	lsls	r0, r0, #9
 80a2da4:	bf18      	it	ne
 80a2da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2daa:	d01e      	beq.n	80a2dea <__aeabi_fmul+0x66>
 80a2dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2db8:	fba0 3101 	umull	r3, r1, r0, r1
 80a2dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2dc4:	bf3e      	ittt	cc
 80a2dc6:	0049      	lslcc	r1, r1, #1
 80a2dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2dcc:	005b      	lslcc	r3, r3, #1
 80a2dce:	ea40 0001 	orr.w	r0, r0, r1
 80a2dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2dd6:	2afd      	cmp	r2, #253	; 0xfd
 80a2dd8:	d81d      	bhi.n	80a2e16 <__aeabi_fmul+0x92>
 80a2dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2de2:	bf08      	it	eq
 80a2de4:	f020 0001 	biceq.w	r0, r0, #1
 80a2de8:	4770      	bx	lr
 80a2dea:	f090 0f00 	teq	r0, #0
 80a2dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2df2:	bf08      	it	eq
 80a2df4:	0249      	lsleq	r1, r1, #9
 80a2df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2dfe:	3a7f      	subs	r2, #127	; 0x7f
 80a2e00:	bfc2      	ittt	gt
 80a2e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2e0a:	4770      	bxgt	lr
 80a2e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2e10:	f04f 0300 	mov.w	r3, #0
 80a2e14:	3a01      	subs	r2, #1
 80a2e16:	dc5d      	bgt.n	80a2ed4 <__aeabi_fmul+0x150>
 80a2e18:	f112 0f19 	cmn.w	r2, #25
 80a2e1c:	bfdc      	itt	le
 80a2e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2e22:	4770      	bxle	lr
 80a2e24:	f1c2 0200 	rsb	r2, r2, #0
 80a2e28:	0041      	lsls	r1, r0, #1
 80a2e2a:	fa21 f102 	lsr.w	r1, r1, r2
 80a2e2e:	f1c2 0220 	rsb	r2, r2, #32
 80a2e32:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2e36:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2e3a:	f140 0000 	adc.w	r0, r0, #0
 80a2e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2e42:	bf08      	it	eq
 80a2e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2e48:	4770      	bx	lr
 80a2e4a:	f092 0f00 	teq	r2, #0
 80a2e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2e52:	bf02      	ittt	eq
 80a2e54:	0040      	lsleq	r0, r0, #1
 80a2e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2e5a:	3a01      	subeq	r2, #1
 80a2e5c:	d0f9      	beq.n	80a2e52 <__aeabi_fmul+0xce>
 80a2e5e:	ea40 000c 	orr.w	r0, r0, ip
 80a2e62:	f093 0f00 	teq	r3, #0
 80a2e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2e6a:	bf02      	ittt	eq
 80a2e6c:	0049      	lsleq	r1, r1, #1
 80a2e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2e72:	3b01      	subeq	r3, #1
 80a2e74:	d0f9      	beq.n	80a2e6a <__aeabi_fmul+0xe6>
 80a2e76:	ea41 010c 	orr.w	r1, r1, ip
 80a2e7a:	e78f      	b.n	80a2d9c <__aeabi_fmul+0x18>
 80a2e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2e80:	ea92 0f0c 	teq	r2, ip
 80a2e84:	bf18      	it	ne
 80a2e86:	ea93 0f0c 	teqne	r3, ip
 80a2e8a:	d00a      	beq.n	80a2ea2 <__aeabi_fmul+0x11e>
 80a2e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2e90:	bf18      	it	ne
 80a2e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2e96:	d1d8      	bne.n	80a2e4a <__aeabi_fmul+0xc6>
 80a2e98:	ea80 0001 	eor.w	r0, r0, r1
 80a2e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2ea0:	4770      	bx	lr
 80a2ea2:	f090 0f00 	teq	r0, #0
 80a2ea6:	bf17      	itett	ne
 80a2ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2eac:	4608      	moveq	r0, r1
 80a2eae:	f091 0f00 	teqne	r1, #0
 80a2eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2eb6:	d014      	beq.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a2eb8:	ea92 0f0c 	teq	r2, ip
 80a2ebc:	d101      	bne.n	80a2ec2 <__aeabi_fmul+0x13e>
 80a2ebe:	0242      	lsls	r2, r0, #9
 80a2ec0:	d10f      	bne.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a2ec2:	ea93 0f0c 	teq	r3, ip
 80a2ec6:	d103      	bne.n	80a2ed0 <__aeabi_fmul+0x14c>
 80a2ec8:	024b      	lsls	r3, r1, #9
 80a2eca:	bf18      	it	ne
 80a2ecc:	4608      	movne	r0, r1
 80a2ece:	d108      	bne.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a2ed0:	ea80 0001 	eor.w	r0, r0, r1
 80a2ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ee0:	4770      	bx	lr
 80a2ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2eea:	4770      	bx	lr

080a2eec <__aeabi_fdiv>:
 80a2eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2ef4:	bf1e      	ittt	ne
 80a2ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2efa:	ea92 0f0c 	teqne	r2, ip
 80a2efe:	ea93 0f0c 	teqne	r3, ip
 80a2f02:	d069      	beq.n	80a2fd8 <__aeabi_fdiv+0xec>
 80a2f04:	eba2 0203 	sub.w	r2, r2, r3
 80a2f08:	ea80 0c01 	eor.w	ip, r0, r1
 80a2f0c:	0249      	lsls	r1, r1, #9
 80a2f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2f12:	d037      	beq.n	80a2f84 <__aeabi_fdiv+0x98>
 80a2f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2f24:	428b      	cmp	r3, r1
 80a2f26:	bf38      	it	cc
 80a2f28:	005b      	lslcc	r3, r3, #1
 80a2f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2f32:	428b      	cmp	r3, r1
 80a2f34:	bf24      	itt	cs
 80a2f36:	1a5b      	subcs	r3, r3, r1
 80a2f38:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2f40:	bf24      	itt	cs
 80a2f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2f4e:	bf24      	itt	cs
 80a2f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2f5c:	bf24      	itt	cs
 80a2f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2f66:	011b      	lsls	r3, r3, #4
 80a2f68:	bf18      	it	ne
 80a2f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2f6e:	d1e0      	bne.n	80a2f32 <__aeabi_fdiv+0x46>
 80a2f70:	2afd      	cmp	r2, #253	; 0xfd
 80a2f72:	f63f af50 	bhi.w	80a2e16 <__aeabi_fmul+0x92>
 80a2f76:	428b      	cmp	r3, r1
 80a2f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2f7c:	bf08      	it	eq
 80a2f7e:	f020 0001 	biceq.w	r0, r0, #1
 80a2f82:	4770      	bx	lr
 80a2f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2f8c:	327f      	adds	r2, #127	; 0x7f
 80a2f8e:	bfc2      	ittt	gt
 80a2f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2f98:	4770      	bxgt	lr
 80a2f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2f9e:	f04f 0300 	mov.w	r3, #0
 80a2fa2:	3a01      	subs	r2, #1
 80a2fa4:	e737      	b.n	80a2e16 <__aeabi_fmul+0x92>
 80a2fa6:	f092 0f00 	teq	r2, #0
 80a2faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2fae:	bf02      	ittt	eq
 80a2fb0:	0040      	lsleq	r0, r0, #1
 80a2fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2fb6:	3a01      	subeq	r2, #1
 80a2fb8:	d0f9      	beq.n	80a2fae <__aeabi_fdiv+0xc2>
 80a2fba:	ea40 000c 	orr.w	r0, r0, ip
 80a2fbe:	f093 0f00 	teq	r3, #0
 80a2fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2fc6:	bf02      	ittt	eq
 80a2fc8:	0049      	lsleq	r1, r1, #1
 80a2fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2fce:	3b01      	subeq	r3, #1
 80a2fd0:	d0f9      	beq.n	80a2fc6 <__aeabi_fdiv+0xda>
 80a2fd2:	ea41 010c 	orr.w	r1, r1, ip
 80a2fd6:	e795      	b.n	80a2f04 <__aeabi_fdiv+0x18>
 80a2fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2fdc:	ea92 0f0c 	teq	r2, ip
 80a2fe0:	d108      	bne.n	80a2ff4 <__aeabi_fdiv+0x108>
 80a2fe2:	0242      	lsls	r2, r0, #9
 80a2fe4:	f47f af7d 	bne.w	80a2ee2 <__aeabi_fmul+0x15e>
 80a2fe8:	ea93 0f0c 	teq	r3, ip
 80a2fec:	f47f af70 	bne.w	80a2ed0 <__aeabi_fmul+0x14c>
 80a2ff0:	4608      	mov	r0, r1
 80a2ff2:	e776      	b.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a2ff4:	ea93 0f0c 	teq	r3, ip
 80a2ff8:	d104      	bne.n	80a3004 <__aeabi_fdiv+0x118>
 80a2ffa:	024b      	lsls	r3, r1, #9
 80a2ffc:	f43f af4c 	beq.w	80a2e98 <__aeabi_fmul+0x114>
 80a3000:	4608      	mov	r0, r1
 80a3002:	e76e      	b.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a3004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3008:	bf18      	it	ne
 80a300a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a300e:	d1ca      	bne.n	80a2fa6 <__aeabi_fdiv+0xba>
 80a3010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3014:	f47f af5c 	bne.w	80a2ed0 <__aeabi_fmul+0x14c>
 80a3018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a301c:	f47f af3c 	bne.w	80a2e98 <__aeabi_fmul+0x114>
 80a3020:	e75f      	b.n	80a2ee2 <__aeabi_fmul+0x15e>
 80a3022:	bf00      	nop

080a3024 <__gesf2>:
 80a3024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3028:	e006      	b.n	80a3038 <__cmpsf2+0x4>
 80a302a:	bf00      	nop

080a302c <__lesf2>:
 80a302c:	f04f 0c01 	mov.w	ip, #1
 80a3030:	e002      	b.n	80a3038 <__cmpsf2+0x4>
 80a3032:	bf00      	nop

080a3034 <__cmpsf2>:
 80a3034:	f04f 0c01 	mov.w	ip, #1
 80a3038:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a303c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3048:	bf18      	it	ne
 80a304a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a304e:	d011      	beq.n	80a3074 <__cmpsf2+0x40>
 80a3050:	b001      	add	sp, #4
 80a3052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3056:	bf18      	it	ne
 80a3058:	ea90 0f01 	teqne	r0, r1
 80a305c:	bf58      	it	pl
 80a305e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3062:	bf88      	it	hi
 80a3064:	17c8      	asrhi	r0, r1, #31
 80a3066:	bf38      	it	cc
 80a3068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a306c:	bf18      	it	ne
 80a306e:	f040 0001 	orrne.w	r0, r0, #1
 80a3072:	4770      	bx	lr
 80a3074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3078:	d102      	bne.n	80a3080 <__cmpsf2+0x4c>
 80a307a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a307e:	d105      	bne.n	80a308c <__cmpsf2+0x58>
 80a3080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3084:	d1e4      	bne.n	80a3050 <__cmpsf2+0x1c>
 80a3086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a308a:	d0e1      	beq.n	80a3050 <__cmpsf2+0x1c>
 80a308c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3090:	4770      	bx	lr
 80a3092:	bf00      	nop

080a3094 <__aeabi_cfrcmple>:
 80a3094:	4684      	mov	ip, r0
 80a3096:	4608      	mov	r0, r1
 80a3098:	4661      	mov	r1, ip
 80a309a:	e7ff      	b.n	80a309c <__aeabi_cfcmpeq>

080a309c <__aeabi_cfcmpeq>:
 80a309c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a309e:	f7ff ffc9 	bl	80a3034 <__cmpsf2>
 80a30a2:	2800      	cmp	r0, #0
 80a30a4:	bf48      	it	mi
 80a30a6:	f110 0f00 	cmnmi.w	r0, #0
 80a30aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a30ac <__aeabi_fcmpeq>:
 80a30ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30b0:	f7ff fff4 	bl	80a309c <__aeabi_cfcmpeq>
 80a30b4:	bf0c      	ite	eq
 80a30b6:	2001      	moveq	r0, #1
 80a30b8:	2000      	movne	r0, #0
 80a30ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30be:	bf00      	nop

080a30c0 <__aeabi_fcmplt>:
 80a30c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30c4:	f7ff ffea 	bl	80a309c <__aeabi_cfcmpeq>
 80a30c8:	bf34      	ite	cc
 80a30ca:	2001      	movcc	r0, #1
 80a30cc:	2000      	movcs	r0, #0
 80a30ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30d2:	bf00      	nop

080a30d4 <__aeabi_fcmple>:
 80a30d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30d8:	f7ff ffe0 	bl	80a309c <__aeabi_cfcmpeq>
 80a30dc:	bf94      	ite	ls
 80a30de:	2001      	movls	r0, #1
 80a30e0:	2000      	movhi	r0, #0
 80a30e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30e6:	bf00      	nop

080a30e8 <__aeabi_fcmpge>:
 80a30e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30ec:	f7ff ffd2 	bl	80a3094 <__aeabi_cfrcmple>
 80a30f0:	bf94      	ite	ls
 80a30f2:	2001      	movls	r0, #1
 80a30f4:	2000      	movhi	r0, #0
 80a30f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30fa:	bf00      	nop

080a30fc <__aeabi_fcmpgt>:
 80a30fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3100:	f7ff ffc8 	bl	80a3094 <__aeabi_cfrcmple>
 80a3104:	bf34      	ite	cc
 80a3106:	2001      	movcc	r0, #1
 80a3108:	2000      	movcs	r0, #0
 80a310a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a310e:	bf00      	nop

080a3110 <__aeabi_f2lz>:
 80a3110:	b510      	push	{r4, lr}
 80a3112:	2100      	movs	r1, #0
 80a3114:	4604      	mov	r4, r0
 80a3116:	f7ff ffd3 	bl	80a30c0 <__aeabi_fcmplt>
 80a311a:	b920      	cbnz	r0, 80a3126 <__aeabi_f2lz+0x16>
 80a311c:	4620      	mov	r0, r4
 80a311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3122:	f000 b809 	b.w	80a3138 <__aeabi_f2ulz>
 80a3126:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a312a:	f000 f805 	bl	80a3138 <__aeabi_f2ulz>
 80a312e:	4240      	negs	r0, r0
 80a3130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3134:	bd10      	pop	{r4, pc}
 80a3136:	bf00      	nop

080a3138 <__aeabi_f2ulz>:
 80a3138:	b5d0      	push	{r4, r6, r7, lr}
 80a313a:	f7ff fb99 	bl	80a2870 <__aeabi_f2d>
 80a313e:	2200      	movs	r2, #0
 80a3140:	4b0b      	ldr	r3, [pc, #44]	; (80a3170 <__aeabi_f2ulz+0x38>)
 80a3142:	4606      	mov	r6, r0
 80a3144:	460f      	mov	r7, r1
 80a3146:	f7ff fbeb 	bl	80a2920 <__aeabi_dmul>
 80a314a:	f7ff fdfb 	bl	80a2d44 <__aeabi_d2uiz>
 80a314e:	4604      	mov	r4, r0
 80a3150:	f7ff fb6c 	bl	80a282c <__aeabi_ui2d>
 80a3154:	2200      	movs	r2, #0
 80a3156:	4b07      	ldr	r3, [pc, #28]	; (80a3174 <__aeabi_f2ulz+0x3c>)
 80a3158:	f7ff fbe2 	bl	80a2920 <__aeabi_dmul>
 80a315c:	4602      	mov	r2, r0
 80a315e:	460b      	mov	r3, r1
 80a3160:	4630      	mov	r0, r6
 80a3162:	4639      	mov	r1, r7
 80a3164:	f7ff fa24 	bl	80a25b0 <__aeabi_dsub>
 80a3168:	f7ff fdec 	bl	80a2d44 <__aeabi_d2uiz>
 80a316c:	4621      	mov	r1, r4
 80a316e:	bdd0      	pop	{r4, r6, r7, pc}
 80a3170:	3df00000 	.word	0x3df00000
 80a3174:	41f00000 	.word	0x41f00000

080a3178 <__udivmoddi4>:
 80a3178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a317c:	9e08      	ldr	r6, [sp, #32]
 80a317e:	460d      	mov	r5, r1
 80a3180:	4604      	mov	r4, r0
 80a3182:	468e      	mov	lr, r1
 80a3184:	2b00      	cmp	r3, #0
 80a3186:	f040 8083 	bne.w	80a3290 <__udivmoddi4+0x118>
 80a318a:	428a      	cmp	r2, r1
 80a318c:	4617      	mov	r7, r2
 80a318e:	d947      	bls.n	80a3220 <__udivmoddi4+0xa8>
 80a3190:	fab2 f382 	clz	r3, r2
 80a3194:	b14b      	cbz	r3, 80a31aa <__udivmoddi4+0x32>
 80a3196:	f1c3 0120 	rsb	r1, r3, #32
 80a319a:	fa05 fe03 	lsl.w	lr, r5, r3
 80a319e:	fa20 f101 	lsr.w	r1, r0, r1
 80a31a2:	409f      	lsls	r7, r3
 80a31a4:	ea41 0e0e 	orr.w	lr, r1, lr
 80a31a8:	409c      	lsls	r4, r3
 80a31aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a31ae:	fbbe fcf8 	udiv	ip, lr, r8
 80a31b2:	fa1f f987 	uxth.w	r9, r7
 80a31b6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a31ba:	fb0c f009 	mul.w	r0, ip, r9
 80a31be:	0c21      	lsrs	r1, r4, #16
 80a31c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a31c4:	4290      	cmp	r0, r2
 80a31c6:	d90a      	bls.n	80a31de <__udivmoddi4+0x66>
 80a31c8:	18ba      	adds	r2, r7, r2
 80a31ca:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a31ce:	f080 8118 	bcs.w	80a3402 <__udivmoddi4+0x28a>
 80a31d2:	4290      	cmp	r0, r2
 80a31d4:	f240 8115 	bls.w	80a3402 <__udivmoddi4+0x28a>
 80a31d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a31dc:	443a      	add	r2, r7
 80a31de:	1a12      	subs	r2, r2, r0
 80a31e0:	fbb2 f0f8 	udiv	r0, r2, r8
 80a31e4:	fb08 2210 	mls	r2, r8, r0, r2
 80a31e8:	fb00 f109 	mul.w	r1, r0, r9
 80a31ec:	b2a4      	uxth	r4, r4
 80a31ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a31f2:	42a1      	cmp	r1, r4
 80a31f4:	d909      	bls.n	80a320a <__udivmoddi4+0x92>
 80a31f6:	193c      	adds	r4, r7, r4
 80a31f8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a31fc:	f080 8103 	bcs.w	80a3406 <__udivmoddi4+0x28e>
 80a3200:	42a1      	cmp	r1, r4
 80a3202:	f240 8100 	bls.w	80a3406 <__udivmoddi4+0x28e>
 80a3206:	3802      	subs	r0, #2
 80a3208:	443c      	add	r4, r7
 80a320a:	1a64      	subs	r4, r4, r1
 80a320c:	2100      	movs	r1, #0
 80a320e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3212:	b11e      	cbz	r6, 80a321c <__udivmoddi4+0xa4>
 80a3214:	2200      	movs	r2, #0
 80a3216:	40dc      	lsrs	r4, r3
 80a3218:	e9c6 4200 	strd	r4, r2, [r6]
 80a321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3220:	b902      	cbnz	r2, 80a3224 <__udivmoddi4+0xac>
 80a3222:	deff      	udf	#255	; 0xff
 80a3224:	fab2 f382 	clz	r3, r2
 80a3228:	2b00      	cmp	r3, #0
 80a322a:	d14f      	bne.n	80a32cc <__udivmoddi4+0x154>
 80a322c:	1a8d      	subs	r5, r1, r2
 80a322e:	2101      	movs	r1, #1
 80a3230:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3234:	fa1f f882 	uxth.w	r8, r2
 80a3238:	fbb5 fcfe 	udiv	ip, r5, lr
 80a323c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3240:	fb08 f00c 	mul.w	r0, r8, ip
 80a3244:	0c22      	lsrs	r2, r4, #16
 80a3246:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a324a:	42a8      	cmp	r0, r5
 80a324c:	d907      	bls.n	80a325e <__udivmoddi4+0xe6>
 80a324e:	197d      	adds	r5, r7, r5
 80a3250:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80a3254:	d202      	bcs.n	80a325c <__udivmoddi4+0xe4>
 80a3256:	42a8      	cmp	r0, r5
 80a3258:	f200 80e9 	bhi.w	80a342e <__udivmoddi4+0x2b6>
 80a325c:	4694      	mov	ip, r2
 80a325e:	1a2d      	subs	r5, r5, r0
 80a3260:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3264:	fb0e 5510 	mls	r5, lr, r0, r5
 80a3268:	fb08 f800 	mul.w	r8, r8, r0
 80a326c:	b2a4      	uxth	r4, r4
 80a326e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3272:	45a0      	cmp	r8, r4
 80a3274:	d907      	bls.n	80a3286 <__udivmoddi4+0x10e>
 80a3276:	193c      	adds	r4, r7, r4
 80a3278:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a327c:	d202      	bcs.n	80a3284 <__udivmoddi4+0x10c>
 80a327e:	45a0      	cmp	r8, r4
 80a3280:	f200 80d9 	bhi.w	80a3436 <__udivmoddi4+0x2be>
 80a3284:	4610      	mov	r0, r2
 80a3286:	eba4 0408 	sub.w	r4, r4, r8
 80a328a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a328e:	e7c0      	b.n	80a3212 <__udivmoddi4+0x9a>
 80a3290:	428b      	cmp	r3, r1
 80a3292:	d908      	bls.n	80a32a6 <__udivmoddi4+0x12e>
 80a3294:	2e00      	cmp	r6, #0
 80a3296:	f000 80b1 	beq.w	80a33fc <__udivmoddi4+0x284>
 80a329a:	2100      	movs	r1, #0
 80a329c:	e9c6 0500 	strd	r0, r5, [r6]
 80a32a0:	4608      	mov	r0, r1
 80a32a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a32a6:	fab3 f183 	clz	r1, r3
 80a32aa:	2900      	cmp	r1, #0
 80a32ac:	d14b      	bne.n	80a3346 <__udivmoddi4+0x1ce>
 80a32ae:	42ab      	cmp	r3, r5
 80a32b0:	d302      	bcc.n	80a32b8 <__udivmoddi4+0x140>
 80a32b2:	4282      	cmp	r2, r0
 80a32b4:	f200 80b9 	bhi.w	80a342a <__udivmoddi4+0x2b2>
 80a32b8:	1a84      	subs	r4, r0, r2
 80a32ba:	eb65 0303 	sbc.w	r3, r5, r3
 80a32be:	2001      	movs	r0, #1
 80a32c0:	469e      	mov	lr, r3
 80a32c2:	2e00      	cmp	r6, #0
 80a32c4:	d0aa      	beq.n	80a321c <__udivmoddi4+0xa4>
 80a32c6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a32ca:	e7a7      	b.n	80a321c <__udivmoddi4+0xa4>
 80a32cc:	409f      	lsls	r7, r3
 80a32ce:	f1c3 0220 	rsb	r2, r3, #32
 80a32d2:	40d1      	lsrs	r1, r2
 80a32d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a32d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a32dc:	fa1f f887 	uxth.w	r8, r7
 80a32e0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a32e4:	fa24 f202 	lsr.w	r2, r4, r2
 80a32e8:	409d      	lsls	r5, r3
 80a32ea:	fb00 fc08 	mul.w	ip, r0, r8
 80a32ee:	432a      	orrs	r2, r5
 80a32f0:	0c15      	lsrs	r5, r2, #16
 80a32f2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a32f6:	45ac      	cmp	ip, r5
 80a32f8:	fa04 f403 	lsl.w	r4, r4, r3
 80a32fc:	d909      	bls.n	80a3312 <__udivmoddi4+0x19a>
 80a32fe:	197d      	adds	r5, r7, r5
 80a3300:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a3304:	f080 808f 	bcs.w	80a3426 <__udivmoddi4+0x2ae>
 80a3308:	45ac      	cmp	ip, r5
 80a330a:	f240 808c 	bls.w	80a3426 <__udivmoddi4+0x2ae>
 80a330e:	3802      	subs	r0, #2
 80a3310:	443d      	add	r5, r7
 80a3312:	eba5 050c 	sub.w	r5, r5, ip
 80a3316:	fbb5 f1fe 	udiv	r1, r5, lr
 80a331a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a331e:	fb01 f908 	mul.w	r9, r1, r8
 80a3322:	b295      	uxth	r5, r2
 80a3324:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a3328:	45a9      	cmp	r9, r5
 80a332a:	d907      	bls.n	80a333c <__udivmoddi4+0x1c4>
 80a332c:	197d      	adds	r5, r7, r5
 80a332e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80a3332:	d274      	bcs.n	80a341e <__udivmoddi4+0x2a6>
 80a3334:	45a9      	cmp	r9, r5
 80a3336:	d972      	bls.n	80a341e <__udivmoddi4+0x2a6>
 80a3338:	3902      	subs	r1, #2
 80a333a:	443d      	add	r5, r7
 80a333c:	eba5 0509 	sub.w	r5, r5, r9
 80a3340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3344:	e778      	b.n	80a3238 <__udivmoddi4+0xc0>
 80a3346:	f1c1 0720 	rsb	r7, r1, #32
 80a334a:	408b      	lsls	r3, r1
 80a334c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3350:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3354:	fa25 f407 	lsr.w	r4, r5, r7
 80a3358:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a335c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a3360:	fa1f f88c 	uxth.w	r8, ip
 80a3364:	fb0e 4419 	mls	r4, lr, r9, r4
 80a3368:	fa20 f307 	lsr.w	r3, r0, r7
 80a336c:	fb09 fa08 	mul.w	sl, r9, r8
 80a3370:	408d      	lsls	r5, r1
 80a3372:	431d      	orrs	r5, r3
 80a3374:	0c2b      	lsrs	r3, r5, #16
 80a3376:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a337a:	45a2      	cmp	sl, r4
 80a337c:	fa02 f201 	lsl.w	r2, r2, r1
 80a3380:	fa00 f301 	lsl.w	r3, r0, r1
 80a3384:	d909      	bls.n	80a339a <__udivmoddi4+0x222>
 80a3386:	eb1c 0404 	adds.w	r4, ip, r4
 80a338a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a338e:	d248      	bcs.n	80a3422 <__udivmoddi4+0x2aa>
 80a3390:	45a2      	cmp	sl, r4
 80a3392:	d946      	bls.n	80a3422 <__udivmoddi4+0x2aa>
 80a3394:	f1a9 0902 	sub.w	r9, r9, #2
 80a3398:	4464      	add	r4, ip
 80a339a:	eba4 040a 	sub.w	r4, r4, sl
 80a339e:	fbb4 f0fe 	udiv	r0, r4, lr
 80a33a2:	fb0e 4410 	mls	r4, lr, r0, r4
 80a33a6:	fb00 fa08 	mul.w	sl, r0, r8
 80a33aa:	b2ad      	uxth	r5, r5
 80a33ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a33b0:	45a2      	cmp	sl, r4
 80a33b2:	d908      	bls.n	80a33c6 <__udivmoddi4+0x24e>
 80a33b4:	eb1c 0404 	adds.w	r4, ip, r4
 80a33b8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a33bc:	d22d      	bcs.n	80a341a <__udivmoddi4+0x2a2>
 80a33be:	45a2      	cmp	sl, r4
 80a33c0:	d92b      	bls.n	80a341a <__udivmoddi4+0x2a2>
 80a33c2:	3802      	subs	r0, #2
 80a33c4:	4464      	add	r4, ip
 80a33c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a33ca:	fba0 8902 	umull	r8, r9, r0, r2
 80a33ce:	eba4 040a 	sub.w	r4, r4, sl
 80a33d2:	454c      	cmp	r4, r9
 80a33d4:	46c6      	mov	lr, r8
 80a33d6:	464d      	mov	r5, r9
 80a33d8:	d319      	bcc.n	80a340e <__udivmoddi4+0x296>
 80a33da:	d016      	beq.n	80a340a <__udivmoddi4+0x292>
 80a33dc:	b15e      	cbz	r6, 80a33f6 <__udivmoddi4+0x27e>
 80a33de:	ebb3 020e 	subs.w	r2, r3, lr
 80a33e2:	eb64 0405 	sbc.w	r4, r4, r5
 80a33e6:	fa04 f707 	lsl.w	r7, r4, r7
 80a33ea:	fa22 f301 	lsr.w	r3, r2, r1
 80a33ee:	431f      	orrs	r7, r3
 80a33f0:	40cc      	lsrs	r4, r1
 80a33f2:	e9c6 7400 	strd	r7, r4, [r6]
 80a33f6:	2100      	movs	r1, #0
 80a33f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a33fc:	4631      	mov	r1, r6
 80a33fe:	4630      	mov	r0, r6
 80a3400:	e70c      	b.n	80a321c <__udivmoddi4+0xa4>
 80a3402:	468c      	mov	ip, r1
 80a3404:	e6eb      	b.n	80a31de <__udivmoddi4+0x66>
 80a3406:	4610      	mov	r0, r2
 80a3408:	e6ff      	b.n	80a320a <__udivmoddi4+0x92>
 80a340a:	4543      	cmp	r3, r8
 80a340c:	d2e6      	bcs.n	80a33dc <__udivmoddi4+0x264>
 80a340e:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3412:	eb69 050c 	sbc.w	r5, r9, ip
 80a3416:	3801      	subs	r0, #1
 80a3418:	e7e0      	b.n	80a33dc <__udivmoddi4+0x264>
 80a341a:	4628      	mov	r0, r5
 80a341c:	e7d3      	b.n	80a33c6 <__udivmoddi4+0x24e>
 80a341e:	4611      	mov	r1, r2
 80a3420:	e78c      	b.n	80a333c <__udivmoddi4+0x1c4>
 80a3422:	4681      	mov	r9, r0
 80a3424:	e7b9      	b.n	80a339a <__udivmoddi4+0x222>
 80a3426:	4608      	mov	r0, r1
 80a3428:	e773      	b.n	80a3312 <__udivmoddi4+0x19a>
 80a342a:	4608      	mov	r0, r1
 80a342c:	e749      	b.n	80a32c2 <__udivmoddi4+0x14a>
 80a342e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3432:	443d      	add	r5, r7
 80a3434:	e713      	b.n	80a325e <__udivmoddi4+0xe6>
 80a3436:	3802      	subs	r0, #2
 80a3438:	443c      	add	r4, r7
 80a343a:	e724      	b.n	80a3286 <__udivmoddi4+0x10e>

080a343c <__aeabi_idiv0>:
 80a343c:	4770      	bx	lr
 80a343e:	bf00      	nop

080a3440 <asctime_r>:
 80a3440:	b510      	push	{r4, lr}
 80a3442:	460c      	mov	r4, r1
 80a3444:	6941      	ldr	r1, [r0, #20]
 80a3446:	b086      	sub	sp, #24
 80a3448:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a344c:	6903      	ldr	r3, [r0, #16]
 80a344e:	6982      	ldr	r2, [r0, #24]
 80a3450:	9104      	str	r1, [sp, #16]
 80a3452:	6801      	ldr	r1, [r0, #0]
 80a3454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a3458:	9103      	str	r1, [sp, #12]
 80a345a:	6841      	ldr	r1, [r0, #4]
 80a345c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a3460:	9102      	str	r1, [sp, #8]
 80a3462:	6881      	ldr	r1, [r0, #8]
 80a3464:	9101      	str	r1, [sp, #4]
 80a3466:	68c1      	ldr	r1, [r0, #12]
 80a3468:	4620      	mov	r0, r4
 80a346a:	9100      	str	r1, [sp, #0]
 80a346c:	4904      	ldr	r1, [pc, #16]	; (80a3480 <asctime_r+0x40>)
 80a346e:	440b      	add	r3, r1
 80a3470:	4904      	ldr	r1, [pc, #16]	; (80a3484 <asctime_r+0x44>)
 80a3472:	440a      	add	r2, r1
 80a3474:	4904      	ldr	r1, [pc, #16]	; (80a3488 <asctime_r+0x48>)
 80a3476:	f7fd fed5 	bl	80a1224 <siprintf>
 80a347a:	4620      	mov	r0, r4
 80a347c:	b006      	add	sp, #24
 80a347e:	bd10      	pop	{r4, pc}
 80a3480:	080a43d6 	.word	0x080a43d6
 80a3484:	080a43c1 	.word	0x080a43c1
 80a3488:	080a43a1 	.word	0x080a43a1

080a348c <atexit>:
 80a348c:	2300      	movs	r3, #0
 80a348e:	4601      	mov	r1, r0
 80a3490:	461a      	mov	r2, r3
 80a3492:	4618      	mov	r0, r3
 80a3494:	f000 bc4c 	b.w	80a3d30 <__register_exitproc>

080a3498 <localtime_r>:
 80a3498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a349c:	460c      	mov	r4, r1
 80a349e:	4607      	mov	r7, r0
 80a34a0:	f000 fcec 	bl	80a3e7c <__gettzinfo>
 80a34a4:	4621      	mov	r1, r4
 80a34a6:	4680      	mov	r8, r0
 80a34a8:	4638      	mov	r0, r7
 80a34aa:	f000 fceb 	bl	80a3e84 <gmtime_r>
 80a34ae:	6943      	ldr	r3, [r0, #20]
 80a34b0:	4604      	mov	r4, r0
 80a34b2:	079a      	lsls	r2, r3, #30
 80a34b4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a34b8:	d105      	bne.n	80a34c6 <localtime_r+0x2e>
 80a34ba:	2264      	movs	r2, #100	; 0x64
 80a34bc:	fb96 f3f2 	sdiv	r3, r6, r2
 80a34c0:	fb02 6313 	mls	r3, r2, r3, r6
 80a34c4:	bb7b      	cbnz	r3, 80a3526 <localtime_r+0x8e>
 80a34c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a34ca:	fb96 f5f3 	sdiv	r5, r6, r3
 80a34ce:	fb03 6515 	mls	r5, r3, r5, r6
 80a34d2:	fab5 f585 	clz	r5, r5
 80a34d6:	096d      	lsrs	r5, r5, #5
 80a34d8:	2230      	movs	r2, #48	; 0x30
 80a34da:	4b68      	ldr	r3, [pc, #416]	; (80a367c <localtime_r+0x1e4>)
 80a34dc:	fb02 3505 	mla	r5, r2, r5, r3
 80a34e0:	f000 fa94 	bl	80a3a0c <__tz_lock>
 80a34e4:	f000 fa9e 	bl	80a3a24 <_tzset_unlocked>
 80a34e8:	4b65      	ldr	r3, [pc, #404]	; (80a3680 <localtime_r+0x1e8>)
 80a34ea:	681b      	ldr	r3, [r3, #0]
 80a34ec:	b353      	cbz	r3, 80a3544 <localtime_r+0xac>
 80a34ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a34f2:	42b3      	cmp	r3, r6
 80a34f4:	d119      	bne.n	80a352a <localtime_r+0x92>
 80a34f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a34fa:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a34fe:	f8d8 1000 	ldr.w	r1, [r8]
 80a3502:	b9d1      	cbnz	r1, 80a353a <localtime_r+0xa2>
 80a3504:	4296      	cmp	r6, r2
 80a3506:	eb77 0303 	sbcs.w	r3, r7, r3
 80a350a:	da23      	bge.n	80a3554 <localtime_r+0xbc>
 80a350c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a3510:	4296      	cmp	r6, r2
 80a3512:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3516:	bfb4      	ite	lt
 80a3518:	2301      	movlt	r3, #1
 80a351a:	2300      	movge	r3, #0
 80a351c:	6223      	str	r3, [r4, #32]
 80a351e:	db1b      	blt.n	80a3558 <localtime_r+0xc0>
 80a3520:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a3524:	e01a      	b.n	80a355c <localtime_r+0xc4>
 80a3526:	2501      	movs	r5, #1
 80a3528:	e7d6      	b.n	80a34d8 <localtime_r+0x40>
 80a352a:	4630      	mov	r0, r6
 80a352c:	f000 f9c6 	bl	80a38bc <__tzcalc_limits>
 80a3530:	2800      	cmp	r0, #0
 80a3532:	d1e0      	bne.n	80a34f6 <localtime_r+0x5e>
 80a3534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a3538:	e004      	b.n	80a3544 <localtime_r+0xac>
 80a353a:	4296      	cmp	r6, r2
 80a353c:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3540:	da02      	bge.n	80a3548 <localtime_r+0xb0>
 80a3542:	2300      	movs	r3, #0
 80a3544:	6223      	str	r3, [r4, #32]
 80a3546:	e7eb      	b.n	80a3520 <localtime_r+0x88>
 80a3548:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a354c:	4296      	cmp	r6, r2
 80a354e:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3552:	daf6      	bge.n	80a3542 <localtime_r+0xaa>
 80a3554:	2301      	movs	r3, #1
 80a3556:	6223      	str	r3, [r4, #32]
 80a3558:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a355c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a3560:	fb91 f6f3 	sdiv	r6, r1, r3
 80a3564:	203c      	movs	r0, #60	; 0x3c
 80a3566:	fb03 1316 	mls	r3, r3, r6, r1
 80a356a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a356e:	fb00 3012 	mls	r0, r0, r2, r3
 80a3572:	6861      	ldr	r1, [r4, #4]
 80a3574:	6823      	ldr	r3, [r4, #0]
 80a3576:	1a89      	subs	r1, r1, r2
 80a3578:	68a2      	ldr	r2, [r4, #8]
 80a357a:	1a1b      	subs	r3, r3, r0
 80a357c:	1b92      	subs	r2, r2, r6
 80a357e:	2b3b      	cmp	r3, #59	; 0x3b
 80a3580:	6023      	str	r3, [r4, #0]
 80a3582:	6061      	str	r1, [r4, #4]
 80a3584:	60a2      	str	r2, [r4, #8]
 80a3586:	dd34      	ble.n	80a35f2 <localtime_r+0x15a>
 80a3588:	3101      	adds	r1, #1
 80a358a:	6061      	str	r1, [r4, #4]
 80a358c:	3b3c      	subs	r3, #60	; 0x3c
 80a358e:	6023      	str	r3, [r4, #0]
 80a3590:	6863      	ldr	r3, [r4, #4]
 80a3592:	2b3b      	cmp	r3, #59	; 0x3b
 80a3594:	dd33      	ble.n	80a35fe <localtime_r+0x166>
 80a3596:	3201      	adds	r2, #1
 80a3598:	60a2      	str	r2, [r4, #8]
 80a359a:	3b3c      	subs	r3, #60	; 0x3c
 80a359c:	6063      	str	r3, [r4, #4]
 80a359e:	68a3      	ldr	r3, [r4, #8]
 80a35a0:	2b17      	cmp	r3, #23
 80a35a2:	dd32      	ble.n	80a360a <localtime_r+0x172>
 80a35a4:	69e2      	ldr	r2, [r4, #28]
 80a35a6:	3b18      	subs	r3, #24
 80a35a8:	3201      	adds	r2, #1
 80a35aa:	61e2      	str	r2, [r4, #28]
 80a35ac:	69a2      	ldr	r2, [r4, #24]
 80a35ae:	60a3      	str	r3, [r4, #8]
 80a35b0:	3201      	adds	r2, #1
 80a35b2:	2a06      	cmp	r2, #6
 80a35b4:	bfc8      	it	gt
 80a35b6:	2200      	movgt	r2, #0
 80a35b8:	61a2      	str	r2, [r4, #24]
 80a35ba:	68e2      	ldr	r2, [r4, #12]
 80a35bc:	6923      	ldr	r3, [r4, #16]
 80a35be:	3201      	adds	r2, #1
 80a35c0:	60e2      	str	r2, [r4, #12]
 80a35c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a35c6:	428a      	cmp	r2, r1
 80a35c8:	dd0e      	ble.n	80a35e8 <localtime_r+0x150>
 80a35ca:	2b0b      	cmp	r3, #11
 80a35cc:	eba2 0201 	sub.w	r2, r2, r1
 80a35d0:	60e2      	str	r2, [r4, #12]
 80a35d2:	f103 0201 	add.w	r2, r3, #1
 80a35d6:	bf05      	ittet	eq
 80a35d8:	2200      	moveq	r2, #0
 80a35da:	6963      	ldreq	r3, [r4, #20]
 80a35dc:	6122      	strne	r2, [r4, #16]
 80a35de:	3301      	addeq	r3, #1
 80a35e0:	bf02      	ittt	eq
 80a35e2:	6122      	streq	r2, [r4, #16]
 80a35e4:	6163      	streq	r3, [r4, #20]
 80a35e6:	61e2      	streq	r2, [r4, #28]
 80a35e8:	f000 fa16 	bl	80a3a18 <__tz_unlock>
 80a35ec:	4620      	mov	r0, r4
 80a35ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a35f2:	2b00      	cmp	r3, #0
 80a35f4:	dacc      	bge.n	80a3590 <localtime_r+0xf8>
 80a35f6:	3901      	subs	r1, #1
 80a35f8:	6061      	str	r1, [r4, #4]
 80a35fa:	333c      	adds	r3, #60	; 0x3c
 80a35fc:	e7c7      	b.n	80a358e <localtime_r+0xf6>
 80a35fe:	2b00      	cmp	r3, #0
 80a3600:	dacd      	bge.n	80a359e <localtime_r+0x106>
 80a3602:	3a01      	subs	r2, #1
 80a3604:	60a2      	str	r2, [r4, #8]
 80a3606:	333c      	adds	r3, #60	; 0x3c
 80a3608:	e7c8      	b.n	80a359c <localtime_r+0x104>
 80a360a:	2b00      	cmp	r3, #0
 80a360c:	daec      	bge.n	80a35e8 <localtime_r+0x150>
 80a360e:	69e2      	ldr	r2, [r4, #28]
 80a3610:	3318      	adds	r3, #24
 80a3612:	3a01      	subs	r2, #1
 80a3614:	61e2      	str	r2, [r4, #28]
 80a3616:	69a2      	ldr	r2, [r4, #24]
 80a3618:	60a3      	str	r3, [r4, #8]
 80a361a:	3a01      	subs	r2, #1
 80a361c:	bf48      	it	mi
 80a361e:	2206      	movmi	r2, #6
 80a3620:	61a2      	str	r2, [r4, #24]
 80a3622:	68e2      	ldr	r2, [r4, #12]
 80a3624:	3a01      	subs	r2, #1
 80a3626:	60e2      	str	r2, [r4, #12]
 80a3628:	2a00      	cmp	r2, #0
 80a362a:	d1dd      	bne.n	80a35e8 <localtime_r+0x150>
 80a362c:	6923      	ldr	r3, [r4, #16]
 80a362e:	3b01      	subs	r3, #1
 80a3630:	d405      	bmi.n	80a363e <localtime_r+0x1a6>
 80a3632:	6123      	str	r3, [r4, #16]
 80a3634:	6923      	ldr	r3, [r4, #16]
 80a3636:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a363a:	60e3      	str	r3, [r4, #12]
 80a363c:	e7d4      	b.n	80a35e8 <localtime_r+0x150>
 80a363e:	230b      	movs	r3, #11
 80a3640:	6123      	str	r3, [r4, #16]
 80a3642:	6963      	ldr	r3, [r4, #20]
 80a3644:	1e5a      	subs	r2, r3, #1
 80a3646:	6162      	str	r2, [r4, #20]
 80a3648:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a364c:	0793      	lsls	r3, r2, #30
 80a364e:	d105      	bne.n	80a365c <localtime_r+0x1c4>
 80a3650:	2164      	movs	r1, #100	; 0x64
 80a3652:	fb92 f3f1 	sdiv	r3, r2, r1
 80a3656:	fb01 2313 	mls	r3, r1, r3, r2
 80a365a:	b963      	cbnz	r3, 80a3676 <localtime_r+0x1de>
 80a365c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a3660:	fb92 f3f1 	sdiv	r3, r2, r1
 80a3664:	fb01 2313 	mls	r3, r1, r3, r2
 80a3668:	fab3 f383 	clz	r3, r3
 80a366c:	095b      	lsrs	r3, r3, #5
 80a366e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a3672:	61e3      	str	r3, [r4, #28]
 80a3674:	e7de      	b.n	80a3634 <localtime_r+0x19c>
 80a3676:	2301      	movs	r3, #1
 80a3678:	e7f9      	b.n	80a366e <localtime_r+0x1d6>
 80a367a:	bf00      	nop
 80a367c:	080a43fc 	.word	0x080a43fc
 80a3680:	20000c84 	.word	0x20000c84

080a3684 <ldiv>:
 80a3684:	b510      	push	{r4, lr}
 80a3686:	fb91 f4f2 	sdiv	r4, r1, r2
 80a368a:	2900      	cmp	r1, #0
 80a368c:	fb02 1314 	mls	r3, r2, r4, r1
 80a3690:	db06      	blt.n	80a36a0 <ldiv+0x1c>
 80a3692:	2b00      	cmp	r3, #0
 80a3694:	da01      	bge.n	80a369a <ldiv+0x16>
 80a3696:	3401      	adds	r4, #1
 80a3698:	1a9b      	subs	r3, r3, r2
 80a369a:	e9c0 4300 	strd	r4, r3, [r0]
 80a369e:	bd10      	pop	{r4, pc}
 80a36a0:	2b00      	cmp	r3, #0
 80a36a2:	bfc4      	itt	gt
 80a36a4:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a36a8:	189b      	addgt	r3, r3, r2
 80a36aa:	e7f6      	b.n	80a369a <ldiv+0x16>

080a36ac <memcpy>:
 80a36ac:	440a      	add	r2, r1
 80a36ae:	4291      	cmp	r1, r2
 80a36b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a36b4:	d100      	bne.n	80a36b8 <memcpy+0xc>
 80a36b6:	4770      	bx	lr
 80a36b8:	b510      	push	{r4, lr}
 80a36ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a36be:	4291      	cmp	r1, r2
 80a36c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a36c4:	d1f9      	bne.n	80a36ba <memcpy+0xe>
 80a36c6:	bd10      	pop	{r4, pc}

080a36c8 <memset>:
 80a36c8:	4603      	mov	r3, r0
 80a36ca:	4402      	add	r2, r0
 80a36cc:	4293      	cmp	r3, r2
 80a36ce:	d100      	bne.n	80a36d2 <memset+0xa>
 80a36d0:	4770      	bx	lr
 80a36d2:	f803 1b01 	strb.w	r1, [r3], #1
 80a36d6:	e7f9      	b.n	80a36cc <memset+0x4>

080a36d8 <srand>:
 80a36d8:	b538      	push	{r3, r4, r5, lr}
 80a36da:	4b0d      	ldr	r3, [pc, #52]	; (80a3710 <srand+0x38>)
 80a36dc:	4604      	mov	r4, r0
 80a36de:	681d      	ldr	r5, [r3, #0]
 80a36e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a36e2:	b97b      	cbnz	r3, 80a3704 <srand+0x2c>
 80a36e4:	2018      	movs	r0, #24
 80a36e6:	f7fd fd85 	bl	80a11f4 <malloc>
 80a36ea:	4a0a      	ldr	r2, [pc, #40]	; (80a3714 <srand+0x3c>)
 80a36ec:	4b0a      	ldr	r3, [pc, #40]	; (80a3718 <srand+0x40>)
 80a36ee:	63a8      	str	r0, [r5, #56]	; 0x38
 80a36f0:	e9c0 2300 	strd	r2, r3, [r0]
 80a36f4:	4b09      	ldr	r3, [pc, #36]	; (80a371c <srand+0x44>)
 80a36f6:	2201      	movs	r2, #1
 80a36f8:	6083      	str	r3, [r0, #8]
 80a36fa:	230b      	movs	r3, #11
 80a36fc:	8183      	strh	r3, [r0, #12]
 80a36fe:	2300      	movs	r3, #0
 80a3700:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3704:	2200      	movs	r2, #0
 80a3706:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3708:	611c      	str	r4, [r3, #16]
 80a370a:	615a      	str	r2, [r3, #20]
 80a370c:	bd38      	pop	{r3, r4, r5, pc}
 80a370e:	bf00      	nop
 80a3710:	20000014 	.word	0x20000014
 80a3714:	abcd330e 	.word	0xabcd330e
 80a3718:	e66d1234 	.word	0xe66d1234
 80a371c:	0005deec 	.word	0x0005deec

080a3720 <strcmp>:
 80a3720:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3724:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3728:	2a01      	cmp	r2, #1
 80a372a:	bf28      	it	cs
 80a372c:	429a      	cmpcs	r2, r3
 80a372e:	d0f7      	beq.n	80a3720 <strcmp>
 80a3730:	1ad0      	subs	r0, r2, r3
 80a3732:	4770      	bx	lr

080a3734 <strcpy>:
 80a3734:	4603      	mov	r3, r0
 80a3736:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a373a:	f803 2b01 	strb.w	r2, [r3], #1
 80a373e:	2a00      	cmp	r2, #0
 80a3740:	d1f9      	bne.n	80a3736 <strcpy+0x2>
 80a3742:	4770      	bx	lr

080a3744 <strdup>:
 80a3744:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <strdup+0xc>)
 80a3746:	4601      	mov	r1, r0
 80a3748:	6818      	ldr	r0, [r3, #0]
 80a374a:	f000 b803 	b.w	80a3754 <_strdup_r>
 80a374e:	bf00      	nop
 80a3750:	20000014 	.word	0x20000014

080a3754 <_strdup_r>:
 80a3754:	b570      	push	{r4, r5, r6, lr}
 80a3756:	4604      	mov	r4, r0
 80a3758:	4608      	mov	r0, r1
 80a375a:	460d      	mov	r5, r1
 80a375c:	f000 f80d 	bl	80a377a <strlen>
 80a3760:	1c46      	adds	r6, r0, #1
 80a3762:	4631      	mov	r1, r6
 80a3764:	4620      	mov	r0, r4
 80a3766:	f7fd fd75 	bl	80a1254 <_malloc_r>
 80a376a:	4604      	mov	r4, r0
 80a376c:	b118      	cbz	r0, 80a3776 <_strdup_r+0x22>
 80a376e:	4632      	mov	r2, r6
 80a3770:	4629      	mov	r1, r5
 80a3772:	f7ff ff9b 	bl	80a36ac <memcpy>
 80a3776:	4620      	mov	r0, r4
 80a3778:	bd70      	pop	{r4, r5, r6, pc}

080a377a <strlen>:
 80a377a:	4603      	mov	r3, r0
 80a377c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3780:	2a00      	cmp	r2, #0
 80a3782:	d1fb      	bne.n	80a377c <strlen+0x2>
 80a3784:	1a18      	subs	r0, r3, r0
 80a3786:	3801      	subs	r0, #1
 80a3788:	4770      	bx	lr

080a378a <strncmp>:
 80a378a:	b510      	push	{r4, lr}
 80a378c:	b16a      	cbz	r2, 80a37aa <strncmp+0x20>
 80a378e:	3901      	subs	r1, #1
 80a3790:	1884      	adds	r4, r0, r2
 80a3792:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a3796:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a379a:	4293      	cmp	r3, r2
 80a379c:	d103      	bne.n	80a37a6 <strncmp+0x1c>
 80a379e:	42a0      	cmp	r0, r4
 80a37a0:	d001      	beq.n	80a37a6 <strncmp+0x1c>
 80a37a2:	2b00      	cmp	r3, #0
 80a37a4:	d1f5      	bne.n	80a3792 <strncmp+0x8>
 80a37a6:	1a98      	subs	r0, r3, r2
 80a37a8:	bd10      	pop	{r4, pc}
 80a37aa:	4610      	mov	r0, r2
 80a37ac:	e7fc      	b.n	80a37a8 <strncmp+0x1e>
	...

080a37b0 <_strtoul_l.isra.0>:
 80a37b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a37b4:	468c      	mov	ip, r1
 80a37b6:	4686      	mov	lr, r0
 80a37b8:	4e3a      	ldr	r6, [pc, #232]	; (80a38a4 <_strtoul_l.isra.0+0xf4>)
 80a37ba:	4660      	mov	r0, ip
 80a37bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a37c0:	5da5      	ldrb	r5, [r4, r6]
 80a37c2:	f015 0508 	ands.w	r5, r5, #8
 80a37c6:	d1f8      	bne.n	80a37ba <_strtoul_l.isra.0+0xa>
 80a37c8:	2c2d      	cmp	r4, #45	; 0x2d
 80a37ca:	d134      	bne.n	80a3836 <_strtoul_l.isra.0+0x86>
 80a37cc:	f04f 0801 	mov.w	r8, #1
 80a37d0:	f89c 4000 	ldrb.w	r4, [ip]
 80a37d4:	f100 0c02 	add.w	ip, r0, #2
 80a37d8:	2b00      	cmp	r3, #0
 80a37da:	d05e      	beq.n	80a389a <_strtoul_l.isra.0+0xea>
 80a37dc:	2b10      	cmp	r3, #16
 80a37de:	d10c      	bne.n	80a37fa <_strtoul_l.isra.0+0x4a>
 80a37e0:	2c30      	cmp	r4, #48	; 0x30
 80a37e2:	d10a      	bne.n	80a37fa <_strtoul_l.isra.0+0x4a>
 80a37e4:	f89c 0000 	ldrb.w	r0, [ip]
 80a37e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a37ec:	2858      	cmp	r0, #88	; 0x58
 80a37ee:	d14f      	bne.n	80a3890 <_strtoul_l.isra.0+0xe0>
 80a37f0:	2310      	movs	r3, #16
 80a37f2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a37f6:	f10c 0c02 	add.w	ip, ip, #2
 80a37fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a37fe:	fbb7 f7f3 	udiv	r7, r7, r3
 80a3802:	2500      	movs	r5, #0
 80a3804:	fb03 f907 	mul.w	r9, r3, r7
 80a3808:	4628      	mov	r0, r5
 80a380a:	ea6f 0909 	mvn.w	r9, r9
 80a380e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a3812:	2e09      	cmp	r6, #9
 80a3814:	d818      	bhi.n	80a3848 <_strtoul_l.isra.0+0x98>
 80a3816:	4634      	mov	r4, r6
 80a3818:	42a3      	cmp	r3, r4
 80a381a:	dd24      	ble.n	80a3866 <_strtoul_l.isra.0+0xb6>
 80a381c:	2d00      	cmp	r5, #0
 80a381e:	db1f      	blt.n	80a3860 <_strtoul_l.isra.0+0xb0>
 80a3820:	4287      	cmp	r7, r0
 80a3822:	d31d      	bcc.n	80a3860 <_strtoul_l.isra.0+0xb0>
 80a3824:	d101      	bne.n	80a382a <_strtoul_l.isra.0+0x7a>
 80a3826:	45a1      	cmp	r9, r4
 80a3828:	db1a      	blt.n	80a3860 <_strtoul_l.isra.0+0xb0>
 80a382a:	2501      	movs	r5, #1
 80a382c:	fb00 4003 	mla	r0, r0, r3, r4
 80a3830:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3834:	e7eb      	b.n	80a380e <_strtoul_l.isra.0+0x5e>
 80a3836:	2c2b      	cmp	r4, #43	; 0x2b
 80a3838:	bf08      	it	eq
 80a383a:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a383e:	46a8      	mov	r8, r5
 80a3840:	bf08      	it	eq
 80a3842:	f100 0c02 	addeq.w	ip, r0, #2
 80a3846:	e7c7      	b.n	80a37d8 <_strtoul_l.isra.0+0x28>
 80a3848:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a384c:	2e19      	cmp	r6, #25
 80a384e:	d801      	bhi.n	80a3854 <_strtoul_l.isra.0+0xa4>
 80a3850:	3c37      	subs	r4, #55	; 0x37
 80a3852:	e7e1      	b.n	80a3818 <_strtoul_l.isra.0+0x68>
 80a3854:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a3858:	2e19      	cmp	r6, #25
 80a385a:	d804      	bhi.n	80a3866 <_strtoul_l.isra.0+0xb6>
 80a385c:	3c57      	subs	r4, #87	; 0x57
 80a385e:	e7db      	b.n	80a3818 <_strtoul_l.isra.0+0x68>
 80a3860:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a3864:	e7e4      	b.n	80a3830 <_strtoul_l.isra.0+0x80>
 80a3866:	2d00      	cmp	r5, #0
 80a3868:	da07      	bge.n	80a387a <_strtoul_l.isra.0+0xca>
 80a386a:	2322      	movs	r3, #34	; 0x22
 80a386c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3870:	f8ce 3000 	str.w	r3, [lr]
 80a3874:	b942      	cbnz	r2, 80a3888 <_strtoul_l.isra.0+0xd8>
 80a3876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a387a:	f1b8 0f00 	cmp.w	r8, #0
 80a387e:	d000      	beq.n	80a3882 <_strtoul_l.isra.0+0xd2>
 80a3880:	4240      	negs	r0, r0
 80a3882:	2a00      	cmp	r2, #0
 80a3884:	d0f7      	beq.n	80a3876 <_strtoul_l.isra.0+0xc6>
 80a3886:	b10d      	cbz	r5, 80a388c <_strtoul_l.isra.0+0xdc>
 80a3888:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a388c:	6011      	str	r1, [r2, #0]
 80a388e:	e7f2      	b.n	80a3876 <_strtoul_l.isra.0+0xc6>
 80a3890:	2430      	movs	r4, #48	; 0x30
 80a3892:	2b00      	cmp	r3, #0
 80a3894:	d1b1      	bne.n	80a37fa <_strtoul_l.isra.0+0x4a>
 80a3896:	2308      	movs	r3, #8
 80a3898:	e7af      	b.n	80a37fa <_strtoul_l.isra.0+0x4a>
 80a389a:	2c30      	cmp	r4, #48	; 0x30
 80a389c:	d0a2      	beq.n	80a37e4 <_strtoul_l.isra.0+0x34>
 80a389e:	230a      	movs	r3, #10
 80a38a0:	e7ab      	b.n	80a37fa <_strtoul_l.isra.0+0x4a>
 80a38a2:	bf00      	nop
 80a38a4:	080a4499 	.word	0x080a4499

080a38a8 <strtoul>:
 80a38a8:	4613      	mov	r3, r2
 80a38aa:	460a      	mov	r2, r1
 80a38ac:	4601      	mov	r1, r0
 80a38ae:	4802      	ldr	r0, [pc, #8]	; (80a38b8 <strtoul+0x10>)
 80a38b0:	6800      	ldr	r0, [r0, #0]
 80a38b2:	f7ff bf7d 	b.w	80a37b0 <_strtoul_l.isra.0>
 80a38b6:	bf00      	nop
 80a38b8:	20000014 	.word	0x20000014

080a38bc <__tzcalc_limits>:
 80a38bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38c0:	4680      	mov	r8, r0
 80a38c2:	f000 fadb 	bl	80a3e7c <__gettzinfo>
 80a38c6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a38ca:	4598      	cmp	r8, r3
 80a38cc:	f340 8097 	ble.w	80a39fe <__tzcalc_limits+0x142>
 80a38d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a38d4:	f240 126d 	movw	r2, #365	; 0x16d
 80a38d8:	4443      	add	r3, r8
 80a38da:	109b      	asrs	r3, r3, #2
 80a38dc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a38e0:	fb02 3505 	mla	r5, r2, r5, r3
 80a38e4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a38e8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a38ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80a38f0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a38f4:	441d      	add	r5, r3
 80a38f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a38fa:	4442      	add	r2, r8
 80a38fc:	fbb2 f2f3 	udiv	r2, r2, r3
 80a3900:	fb98 f7f3 	sdiv	r7, r8, r3
 80a3904:	4415      	add	r5, r2
 80a3906:	2264      	movs	r2, #100	; 0x64
 80a3908:	fb03 8717 	mls	r7, r3, r7, r8
 80a390c:	fb98 f6f2 	sdiv	r6, r8, r2
 80a3910:	fab7 fc87 	clz	ip, r7
 80a3914:	4604      	mov	r4, r0
 80a3916:	f04f 0e07 	mov.w	lr, #7
 80a391a:	fb02 8616 	mls	r6, r2, r6, r8
 80a391e:	f008 0303 	and.w	r3, r8, #3
 80a3922:	f8c0 8004 	str.w	r8, [r0, #4]
 80a3926:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a392a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a392e:	9300      	str	r3, [sp, #0]
 80a3930:	7a22      	ldrb	r2, [r4, #8]
 80a3932:	6963      	ldr	r3, [r4, #20]
 80a3934:	2a4a      	cmp	r2, #74	; 0x4a
 80a3936:	d128      	bne.n	80a398a <__tzcalc_limits+0xce>
 80a3938:	9900      	ldr	r1, [sp, #0]
 80a393a:	18ea      	adds	r2, r5, r3
 80a393c:	b901      	cbnz	r1, 80a3940 <__tzcalc_limits+0x84>
 80a393e:	b906      	cbnz	r6, 80a3942 <__tzcalc_limits+0x86>
 80a3940:	bb0f      	cbnz	r7, 80a3986 <__tzcalc_limits+0xca>
 80a3942:	2b3b      	cmp	r3, #59	; 0x3b
 80a3944:	bfd4      	ite	le
 80a3946:	2300      	movle	r3, #0
 80a3948:	2301      	movgt	r3, #1
 80a394a:	4413      	add	r3, r2
 80a394c:	1e5a      	subs	r2, r3, #1
 80a394e:	69a3      	ldr	r3, [r4, #24]
 80a3950:	492c      	ldr	r1, [pc, #176]	; (80a3a04 <__tzcalc_limits+0x148>)
 80a3952:	3428      	adds	r4, #40	; 0x28
 80a3954:	fb01 3202 	mla	r2, r1, r2, r3
 80a3958:	6823      	ldr	r3, [r4, #0]
 80a395a:	4413      	add	r3, r2
 80a395c:	461a      	mov	r2, r3
 80a395e:	17db      	asrs	r3, r3, #31
 80a3960:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a3964:	45a3      	cmp	fp, r4
 80a3966:	d1e3      	bne.n	80a3930 <__tzcalc_limits+0x74>
 80a3968:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a396c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a3970:	4294      	cmp	r4, r2
 80a3972:	eb75 0303 	sbcs.w	r3, r5, r3
 80a3976:	bfb4      	ite	lt
 80a3978:	2301      	movlt	r3, #1
 80a397a:	2300      	movge	r3, #0
 80a397c:	6003      	str	r3, [r0, #0]
 80a397e:	2001      	movs	r0, #1
 80a3980:	b003      	add	sp, #12
 80a3982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3986:	2300      	movs	r3, #0
 80a3988:	e7df      	b.n	80a394a <__tzcalc_limits+0x8e>
 80a398a:	2a44      	cmp	r2, #68	; 0x44
 80a398c:	d101      	bne.n	80a3992 <__tzcalc_limits+0xd6>
 80a398e:	18ea      	adds	r2, r5, r3
 80a3990:	e7dd      	b.n	80a394e <__tzcalc_limits+0x92>
 80a3992:	9a00      	ldr	r2, [sp, #0]
 80a3994:	bb6a      	cbnz	r2, 80a39f2 <__tzcalc_limits+0x136>
 80a3996:	2e00      	cmp	r6, #0
 80a3998:	bf0c      	ite	eq
 80a399a:	46e0      	moveq	r8, ip
 80a399c:	f04f 0801 	movne.w	r8, #1
 80a39a0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a39a4:	68e2      	ldr	r2, [r4, #12]
 80a39a6:	f04f 0900 	mov.w	r9, #0
 80a39aa:	9201      	str	r2, [sp, #4]
 80a39ac:	462a      	mov	r2, r5
 80a39ae:	4916      	ldr	r1, [pc, #88]	; (80a3a08 <__tzcalc_limits+0x14c>)
 80a39b0:	fb0a 1808 	mla	r8, sl, r8, r1
 80a39b4:	f1a8 0804 	sub.w	r8, r8, #4
 80a39b8:	9901      	ldr	r1, [sp, #4]
 80a39ba:	f109 0901 	add.w	r9, r9, #1
 80a39be:	4549      	cmp	r1, r9
 80a39c0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a39c4:	dc17      	bgt.n	80a39f6 <__tzcalc_limits+0x13a>
 80a39c6:	f102 0804 	add.w	r8, r2, #4
 80a39ca:	fb98 f9fe 	sdiv	r9, r8, lr
 80a39ce:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a39d2:	eba8 0909 	sub.w	r9, r8, r9
 80a39d6:	ebb3 0909 	subs.w	r9, r3, r9
 80a39da:	6923      	ldr	r3, [r4, #16]
 80a39dc:	bf48      	it	mi
 80a39de:	f109 0907 	addmi.w	r9, r9, #7
 80a39e2:	3b01      	subs	r3, #1
 80a39e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a39e8:	444b      	add	r3, r9
 80a39ea:	4553      	cmp	r3, sl
 80a39ec:	da05      	bge.n	80a39fa <__tzcalc_limits+0x13e>
 80a39ee:	441a      	add	r2, r3
 80a39f0:	e7ad      	b.n	80a394e <__tzcalc_limits+0x92>
 80a39f2:	46e0      	mov	r8, ip
 80a39f4:	e7d4      	b.n	80a39a0 <__tzcalc_limits+0xe4>
 80a39f6:	4452      	add	r2, sl
 80a39f8:	e7de      	b.n	80a39b8 <__tzcalc_limits+0xfc>
 80a39fa:	3b07      	subs	r3, #7
 80a39fc:	e7f5      	b.n	80a39ea <__tzcalc_limits+0x12e>
 80a39fe:	2000      	movs	r0, #0
 80a3a00:	e7be      	b.n	80a3980 <__tzcalc_limits+0xc4>
 80a3a02:	bf00      	nop
 80a3a04:	00015180 	.word	0x00015180
 80a3a08:	080a43fc 	.word	0x080a43fc

080a3a0c <__tz_lock>:
 80a3a0c:	4801      	ldr	r0, [pc, #4]	; (80a3a14 <__tz_lock+0x8>)
 80a3a0e:	f000 bae9 	b.w	80a3fe4 <__retarget_lock_acquire>
 80a3a12:	bf00      	nop
 80a3a14:	20000d27 	.word	0x20000d27

080a3a18 <__tz_unlock>:
 80a3a18:	4801      	ldr	r0, [pc, #4]	; (80a3a20 <__tz_unlock+0x8>)
 80a3a1a:	f000 bae5 	b.w	80a3fe8 <__retarget_lock_release>
 80a3a1e:	bf00      	nop
 80a3a20:	20000d27 	.word	0x20000d27

080a3a24 <_tzset_unlocked>:
 80a3a24:	4b01      	ldr	r3, [pc, #4]	; (80a3a2c <_tzset_unlocked+0x8>)
 80a3a26:	6818      	ldr	r0, [r3, #0]
 80a3a28:	f000 b802 	b.w	80a3a30 <_tzset_unlocked_r>
 80a3a2c:	20000014 	.word	0x20000014

080a3a30 <_tzset_unlocked_r>:
 80a3a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3a34:	b08d      	sub	sp, #52	; 0x34
 80a3a36:	4607      	mov	r7, r0
 80a3a38:	f000 fa20 	bl	80a3e7c <__gettzinfo>
 80a3a3c:	49b0      	ldr	r1, [pc, #704]	; (80a3d00 <_tzset_unlocked_r+0x2d0>)
 80a3a3e:	4605      	mov	r5, r0
 80a3a40:	4638      	mov	r0, r7
 80a3a42:	f000 fa13 	bl	80a3e6c <_getenv_r>
 80a3a46:	4eaf      	ldr	r6, [pc, #700]	; (80a3d04 <_tzset_unlocked_r+0x2d4>)
 80a3a48:	4604      	mov	r4, r0
 80a3a4a:	b970      	cbnz	r0, 80a3a6a <_tzset_unlocked_r+0x3a>
 80a3a4c:	4bae      	ldr	r3, [pc, #696]	; (80a3d08 <_tzset_unlocked_r+0x2d8>)
 80a3a4e:	4aaf      	ldr	r2, [pc, #700]	; (80a3d0c <_tzset_unlocked_r+0x2dc>)
 80a3a50:	6018      	str	r0, [r3, #0]
 80a3a52:	4baf      	ldr	r3, [pc, #700]	; (80a3d10 <_tzset_unlocked_r+0x2e0>)
 80a3a54:	6018      	str	r0, [r3, #0]
 80a3a56:	4baf      	ldr	r3, [pc, #700]	; (80a3d14 <_tzset_unlocked_r+0x2e4>)
 80a3a58:	6830      	ldr	r0, [r6, #0]
 80a3a5a:	e9c3 2200 	strd	r2, r2, [r3]
 80a3a5e:	f7fd fbd1 	bl	80a1204 <free>
 80a3a62:	6034      	str	r4, [r6, #0]
 80a3a64:	b00d      	add	sp, #52	; 0x34
 80a3a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a6a:	6831      	ldr	r1, [r6, #0]
 80a3a6c:	2900      	cmp	r1, #0
 80a3a6e:	d15f      	bne.n	80a3b30 <_tzset_unlocked_r+0x100>
 80a3a70:	6830      	ldr	r0, [r6, #0]
 80a3a72:	f7fd fbc7 	bl	80a1204 <free>
 80a3a76:	4620      	mov	r0, r4
 80a3a78:	f7ff fe7f 	bl	80a377a <strlen>
 80a3a7c:	1c41      	adds	r1, r0, #1
 80a3a7e:	4638      	mov	r0, r7
 80a3a80:	f7fd fbe8 	bl	80a1254 <_malloc_r>
 80a3a84:	6030      	str	r0, [r6, #0]
 80a3a86:	2800      	cmp	r0, #0
 80a3a88:	d157      	bne.n	80a3b3a <_tzset_unlocked_r+0x10a>
 80a3a8a:	7823      	ldrb	r3, [r4, #0]
 80a3a8c:	ae0a      	add	r6, sp, #40	; 0x28
 80a3a8e:	2b3a      	cmp	r3, #58	; 0x3a
 80a3a90:	bf08      	it	eq
 80a3a92:	3401      	addeq	r4, #1
 80a3a94:	4633      	mov	r3, r6
 80a3a96:	4620      	mov	r0, r4
 80a3a98:	4a9f      	ldr	r2, [pc, #636]	; (80a3d18 <_tzset_unlocked_r+0x2e8>)
 80a3a9a:	49a0      	ldr	r1, [pc, #640]	; (80a3d1c <_tzset_unlocked_r+0x2ec>)
 80a3a9c:	f7fd fbca 	bl	80a1234 <siscanf>
 80a3aa0:	2800      	cmp	r0, #0
 80a3aa2:	dddf      	ble.n	80a3a64 <_tzset_unlocked_r+0x34>
 80a3aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3aa6:	18e7      	adds	r7, r4, r3
 80a3aa8:	5ce3      	ldrb	r3, [r4, r3]
 80a3aaa:	2b2d      	cmp	r3, #45	; 0x2d
 80a3aac:	d149      	bne.n	80a3b42 <_tzset_unlocked_r+0x112>
 80a3aae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a3ab2:	3701      	adds	r7, #1
 80a3ab4:	f04f 0800 	mov.w	r8, #0
 80a3ab8:	f10d 0a20 	add.w	sl, sp, #32
 80a3abc:	f10d 0b1e 	add.w	fp, sp, #30
 80a3ac0:	4633      	mov	r3, r6
 80a3ac2:	4638      	mov	r0, r7
 80a3ac4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a3ac8:	4995      	ldr	r1, [pc, #596]	; (80a3d20 <_tzset_unlocked_r+0x2f0>)
 80a3aca:	9603      	str	r6, [sp, #12]
 80a3acc:	f8cd b000 	str.w	fp, [sp]
 80a3ad0:	aa07      	add	r2, sp, #28
 80a3ad2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a3ad6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a3ada:	f7fd fbab 	bl	80a1234 <siscanf>
 80a3ade:	4540      	cmp	r0, r8
 80a3ae0:	ddc0      	ble.n	80a3a64 <_tzset_unlocked_r+0x34>
 80a3ae2:	213c      	movs	r1, #60	; 0x3c
 80a3ae4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3ae8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3aec:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a3d2c <_tzset_unlocked_r+0x2fc>
 80a3af0:	fb01 2203 	mla	r2, r1, r3, r2
 80a3af4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3af8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3afc:	fb01 2303 	mla	r3, r1, r3, r2
 80a3b00:	435c      	muls	r4, r3
 80a3b02:	4b85      	ldr	r3, [pc, #532]	; (80a3d18 <_tzset_unlocked_r+0x2e8>)
 80a3b04:	62ac      	str	r4, [r5, #40]	; 0x28
 80a3b06:	4c83      	ldr	r4, [pc, #524]	; (80a3d14 <_tzset_unlocked_r+0x2e4>)
 80a3b08:	464a      	mov	r2, r9
 80a3b0a:	6023      	str	r3, [r4, #0]
 80a3b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3b0e:	4983      	ldr	r1, [pc, #524]	; (80a3d1c <_tzset_unlocked_r+0x2ec>)
 80a3b10:	441f      	add	r7, r3
 80a3b12:	4638      	mov	r0, r7
 80a3b14:	4633      	mov	r3, r6
 80a3b16:	f7fd fb8d 	bl	80a1234 <siscanf>
 80a3b1a:	4540      	cmp	r0, r8
 80a3b1c:	dc17      	bgt.n	80a3b4e <_tzset_unlocked_r+0x11e>
 80a3b1e:	6823      	ldr	r3, [r4, #0]
 80a3b20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a3b22:	6063      	str	r3, [r4, #4]
 80a3b24:	4b78      	ldr	r3, [pc, #480]	; (80a3d08 <_tzset_unlocked_r+0x2d8>)
 80a3b26:	601a      	str	r2, [r3, #0]
 80a3b28:	4b79      	ldr	r3, [pc, #484]	; (80a3d10 <_tzset_unlocked_r+0x2e0>)
 80a3b2a:	f8c3 8000 	str.w	r8, [r3]
 80a3b2e:	e799      	b.n	80a3a64 <_tzset_unlocked_r+0x34>
 80a3b30:	f7ff fdf6 	bl	80a3720 <strcmp>
 80a3b34:	2800      	cmp	r0, #0
 80a3b36:	d19b      	bne.n	80a3a70 <_tzset_unlocked_r+0x40>
 80a3b38:	e794      	b.n	80a3a64 <_tzset_unlocked_r+0x34>
 80a3b3a:	4621      	mov	r1, r4
 80a3b3c:	f7ff fdfa 	bl	80a3734 <strcpy>
 80a3b40:	e7a3      	b.n	80a3a8a <_tzset_unlocked_r+0x5a>
 80a3b42:	2b2b      	cmp	r3, #43	; 0x2b
 80a3b44:	f04f 0401 	mov.w	r4, #1
 80a3b48:	bf08      	it	eq
 80a3b4a:	3701      	addeq	r7, #1
 80a3b4c:	e7b2      	b.n	80a3ab4 <_tzset_unlocked_r+0x84>
 80a3b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3b50:	f8c4 9004 	str.w	r9, [r4, #4]
 80a3b54:	18fc      	adds	r4, r7, r3
 80a3b56:	5cfb      	ldrb	r3, [r7, r3]
 80a3b58:	2b2d      	cmp	r3, #45	; 0x2d
 80a3b5a:	f040 808c 	bne.w	80a3c76 <_tzset_unlocked_r+0x246>
 80a3b5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a3b62:	3401      	adds	r4, #1
 80a3b64:	2300      	movs	r3, #0
 80a3b66:	4620      	mov	r0, r4
 80a3b68:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3b6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3b70:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3b74:	930a      	str	r3, [sp, #40]	; 0x28
 80a3b76:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a3b7a:	4633      	mov	r3, r6
 80a3b7c:	e9cd b600 	strd	fp, r6, [sp]
 80a3b80:	4967      	ldr	r1, [pc, #412]	; (80a3d20 <_tzset_unlocked_r+0x2f0>)
 80a3b82:	aa07      	add	r2, sp, #28
 80a3b84:	f7fd fb56 	bl	80a1234 <siscanf>
 80a3b88:	2800      	cmp	r0, #0
 80a3b8a:	dc7a      	bgt.n	80a3c82 <_tzset_unlocked_r+0x252>
 80a3b8c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a3b8e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a3b92:	652f      	str	r7, [r5, #80]	; 0x50
 80a3b94:	f04f 0900 	mov.w	r9, #0
 80a3b98:	462f      	mov	r7, r5
 80a3b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3b9c:	441c      	add	r4, r3
 80a3b9e:	7823      	ldrb	r3, [r4, #0]
 80a3ba0:	2b2c      	cmp	r3, #44	; 0x2c
 80a3ba2:	bf08      	it	eq
 80a3ba4:	3401      	addeq	r4, #1
 80a3ba6:	f894 8000 	ldrb.w	r8, [r4]
 80a3baa:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3bae:	d17a      	bne.n	80a3ca6 <_tzset_unlocked_r+0x276>
 80a3bb0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a3bb4:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a3bb8:	ab09      	add	r3, sp, #36	; 0x24
 80a3bba:	9300      	str	r3, [sp, #0]
 80a3bbc:	4620      	mov	r0, r4
 80a3bbe:	4633      	mov	r3, r6
 80a3bc0:	4958      	ldr	r1, [pc, #352]	; (80a3d24 <_tzset_unlocked_r+0x2f4>)
 80a3bc2:	9603      	str	r6, [sp, #12]
 80a3bc4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a3bc8:	f7fd fb34 	bl	80a1234 <siscanf>
 80a3bcc:	2803      	cmp	r0, #3
 80a3bce:	f47f af49 	bne.w	80a3a64 <_tzset_unlocked_r+0x34>
 80a3bd2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a3bd6:	1e4b      	subs	r3, r1, #1
 80a3bd8:	2b0b      	cmp	r3, #11
 80a3bda:	f63f af43 	bhi.w	80a3a64 <_tzset_unlocked_r+0x34>
 80a3bde:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3be2:	1e53      	subs	r3, r2, #1
 80a3be4:	2b04      	cmp	r3, #4
 80a3be6:	f63f af3d 	bhi.w	80a3a64 <_tzset_unlocked_r+0x34>
 80a3bea:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a3bee:	2b06      	cmp	r3, #6
 80a3bf0:	f63f af38 	bhi.w	80a3a64 <_tzset_unlocked_r+0x34>
 80a3bf4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a3bf8:	f887 8008 	strb.w	r8, [r7, #8]
 80a3bfc:	617b      	str	r3, [r7, #20]
 80a3bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3c00:	eb04 0803 	add.w	r8, r4, r3
 80a3c04:	2302      	movs	r3, #2
 80a3c06:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3c0a:	2300      	movs	r3, #0
 80a3c0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3c10:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3c14:	930a      	str	r3, [sp, #40]	; 0x28
 80a3c16:	f898 3000 	ldrb.w	r3, [r8]
 80a3c1a:	2b2f      	cmp	r3, #47	; 0x2f
 80a3c1c:	d109      	bne.n	80a3c32 <_tzset_unlocked_r+0x202>
 80a3c1e:	4633      	mov	r3, r6
 80a3c20:	4640      	mov	r0, r8
 80a3c22:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a3c26:	e9cd b600 	strd	fp, r6, [sp]
 80a3c2a:	493f      	ldr	r1, [pc, #252]	; (80a3d28 <_tzset_unlocked_r+0x2f8>)
 80a3c2c:	aa07      	add	r2, sp, #28
 80a3c2e:	f7fd fb01 	bl	80a1234 <siscanf>
 80a3c32:	213c      	movs	r1, #60	; 0x3c
 80a3c34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3c38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3c3c:	3728      	adds	r7, #40	; 0x28
 80a3c3e:	fb01 2203 	mla	r2, r1, r3, r2
 80a3c42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3c46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3c4a:	fb01 2303 	mla	r3, r1, r3, r2
 80a3c4e:	f847 3c10 	str.w	r3, [r7, #-16]
 80a3c52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3c54:	4444      	add	r4, r8
 80a3c56:	f1b9 0f00 	cmp.w	r9, #0
 80a3c5a:	d021      	beq.n	80a3ca0 <_tzset_unlocked_r+0x270>
 80a3c5c:	6868      	ldr	r0, [r5, #4]
 80a3c5e:	f7ff fe2d 	bl	80a38bc <__tzcalc_limits>
 80a3c62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a3c64:	4b28      	ldr	r3, [pc, #160]	; (80a3d08 <_tzset_unlocked_r+0x2d8>)
 80a3c66:	601a      	str	r2, [r3, #0]
 80a3c68:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a3c6a:	1a9b      	subs	r3, r3, r2
 80a3c6c:	bf18      	it	ne
 80a3c6e:	2301      	movne	r3, #1
 80a3c70:	4a27      	ldr	r2, [pc, #156]	; (80a3d10 <_tzset_unlocked_r+0x2e0>)
 80a3c72:	6013      	str	r3, [r2, #0]
 80a3c74:	e6f6      	b.n	80a3a64 <_tzset_unlocked_r+0x34>
 80a3c76:	2b2b      	cmp	r3, #43	; 0x2b
 80a3c78:	f04f 0701 	mov.w	r7, #1
 80a3c7c:	bf08      	it	eq
 80a3c7e:	3401      	addeq	r4, #1
 80a3c80:	e770      	b.n	80a3b64 <_tzset_unlocked_r+0x134>
 80a3c82:	213c      	movs	r1, #60	; 0x3c
 80a3c84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a3c88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3c8c:	fb01 2203 	mla	r2, r1, r3, r2
 80a3c90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3c94:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a3c98:	fb01 2303 	mla	r3, r1, r3, r2
 80a3c9c:	435f      	muls	r7, r3
 80a3c9e:	e778      	b.n	80a3b92 <_tzset_unlocked_r+0x162>
 80a3ca0:	f04f 0901 	mov.w	r9, #1
 80a3ca4:	e77b      	b.n	80a3b9e <_tzset_unlocked_r+0x16e>
 80a3ca6:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a3caa:	bf0a      	itet	eq
 80a3cac:	4643      	moveq	r3, r8
 80a3cae:	2344      	movne	r3, #68	; 0x44
 80a3cb0:	3401      	addeq	r4, #1
 80a3cb2:	220a      	movs	r2, #10
 80a3cb4:	4620      	mov	r0, r4
 80a3cb6:	a90b      	add	r1, sp, #44	; 0x2c
 80a3cb8:	9305      	str	r3, [sp, #20]
 80a3cba:	f7ff fdf5 	bl	80a38a8 <strtoul>
 80a3cbe:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a3cc2:	9b05      	ldr	r3, [sp, #20]
 80a3cc4:	45a0      	cmp	r8, r4
 80a3cc6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a3cca:	d114      	bne.n	80a3cf6 <_tzset_unlocked_r+0x2c6>
 80a3ccc:	234d      	movs	r3, #77	; 0x4d
 80a3cce:	f1b9 0f00 	cmp.w	r9, #0
 80a3cd2:	d107      	bne.n	80a3ce4 <_tzset_unlocked_r+0x2b4>
 80a3cd4:	2103      	movs	r1, #3
 80a3cd6:	722b      	strb	r3, [r5, #8]
 80a3cd8:	2302      	movs	r3, #2
 80a3cda:	f8c5 9014 	str.w	r9, [r5, #20]
 80a3cde:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a3ce2:	e78f      	b.n	80a3c04 <_tzset_unlocked_r+0x1d4>
 80a3ce4:	220b      	movs	r2, #11
 80a3ce6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a3cea:	2301      	movs	r3, #1
 80a3cec:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a3cf0:	2300      	movs	r3, #0
 80a3cf2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a3cf4:	e786      	b.n	80a3c04 <_tzset_unlocked_r+0x1d4>
 80a3cf6:	b280      	uxth	r0, r0
 80a3cf8:	723b      	strb	r3, [r7, #8]
 80a3cfa:	6178      	str	r0, [r7, #20]
 80a3cfc:	e782      	b.n	80a3c04 <_tzset_unlocked_r+0x1d4>
 80a3cfe:	bf00      	nop
 80a3d00:	080a445c 	.word	0x080a445c
 80a3d04:	20000c80 	.word	0x20000c80
 80a3d08:	20000c88 	.word	0x20000c88
 80a3d0c:	080a445f 	.word	0x080a445f
 80a3d10:	20000c84 	.word	0x20000c84
 80a3d14:	20000078 	.word	0x20000078
 80a3d18:	20000c73 	.word	0x20000c73
 80a3d1c:	080a4463 	.word	0x080a4463
 80a3d20:	080a4486 	.word	0x080a4486
 80a3d24:	080a4472 	.word	0x080a4472
 80a3d28:	080a4485 	.word	0x080a4485
 80a3d2c:	20000c68 	.word	0x20000c68

080a3d30 <__register_exitproc>:
 80a3d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3d34:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a3df4 <__register_exitproc+0xc4>
 80a3d38:	4606      	mov	r6, r0
 80a3d3a:	f8d8 0000 	ldr.w	r0, [r8]
 80a3d3e:	461f      	mov	r7, r3
 80a3d40:	460d      	mov	r5, r1
 80a3d42:	4691      	mov	r9, r2
 80a3d44:	f000 f94f 	bl	80a3fe6 <__retarget_lock_acquire_recursive>
 80a3d48:	4b26      	ldr	r3, [pc, #152]	; (80a3de4 <__register_exitproc+0xb4>)
 80a3d4a:	681c      	ldr	r4, [r3, #0]
 80a3d4c:	b934      	cbnz	r4, 80a3d5c <__register_exitproc+0x2c>
 80a3d4e:	4c26      	ldr	r4, [pc, #152]	; (80a3de8 <__register_exitproc+0xb8>)
 80a3d50:	601c      	str	r4, [r3, #0]
 80a3d52:	4b26      	ldr	r3, [pc, #152]	; (80a3dec <__register_exitproc+0xbc>)
 80a3d54:	b113      	cbz	r3, 80a3d5c <__register_exitproc+0x2c>
 80a3d56:	681b      	ldr	r3, [r3, #0]
 80a3d58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3d5c:	6863      	ldr	r3, [r4, #4]
 80a3d5e:	2b1f      	cmp	r3, #31
 80a3d60:	dd07      	ble.n	80a3d72 <__register_exitproc+0x42>
 80a3d62:	f8d8 0000 	ldr.w	r0, [r8]
 80a3d66:	f000 f940 	bl	80a3fea <__retarget_lock_release_recursive>
 80a3d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3d72:	b35e      	cbz	r6, 80a3dcc <__register_exitproc+0x9c>
 80a3d74:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3d78:	b988      	cbnz	r0, 80a3d9e <__register_exitproc+0x6e>
 80a3d7a:	4b1d      	ldr	r3, [pc, #116]	; (80a3df0 <__register_exitproc+0xc0>)
 80a3d7c:	b923      	cbnz	r3, 80a3d88 <__register_exitproc+0x58>
 80a3d7e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3d82:	f000 f931 	bl	80a3fe8 <__retarget_lock_release>
 80a3d86:	e7f0      	b.n	80a3d6a <__register_exitproc+0x3a>
 80a3d88:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3d8c:	f7fd fa32 	bl	80a11f4 <malloc>
 80a3d90:	2800      	cmp	r0, #0
 80a3d92:	d0f4      	beq.n	80a3d7e <__register_exitproc+0x4e>
 80a3d94:	2300      	movs	r3, #0
 80a3d96:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3d9a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3d9e:	2201      	movs	r2, #1
 80a3da0:	6863      	ldr	r3, [r4, #4]
 80a3da2:	2e02      	cmp	r6, #2
 80a3da4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3da8:	fa02 f203 	lsl.w	r2, r2, r3
 80a3dac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3db0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3db4:	ea43 0302 	orr.w	r3, r3, r2
 80a3db8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3dbc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3dc0:	bf02      	ittt	eq
 80a3dc2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a3dc6:	431a      	orreq	r2, r3
 80a3dc8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a3dcc:	6863      	ldr	r3, [r4, #4]
 80a3dce:	f8d8 0000 	ldr.w	r0, [r8]
 80a3dd2:	1c5a      	adds	r2, r3, #1
 80a3dd4:	3302      	adds	r3, #2
 80a3dd6:	6062      	str	r2, [r4, #4]
 80a3dd8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a3ddc:	f000 f905 	bl	80a3fea <__retarget_lock_release_recursive>
 80a3de0:	2000      	movs	r0, #0
 80a3de2:	e7c4      	b.n	80a3d6e <__register_exitproc+0x3e>
 80a3de4:	20000d18 	.word	0x20000d18
 80a3de8:	20000c8c 	.word	0x20000c8c
 80a3dec:	00000000 	.word	0x00000000
 80a3df0:	080a11f5 	.word	0x080a11f5
 80a3df4:	20000080 	.word	0x20000080

080a3df8 <_findenv_r>:
 80a3df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3dfc:	4607      	mov	r7, r0
 80a3dfe:	4689      	mov	r9, r1
 80a3e00:	4616      	mov	r6, r2
 80a3e02:	f000 f8f3 	bl	80a3fec <__env_lock>
 80a3e06:	4b18      	ldr	r3, [pc, #96]	; (80a3e68 <_findenv_r+0x70>)
 80a3e08:	681c      	ldr	r4, [r3, #0]
 80a3e0a:	469a      	mov	sl, r3
 80a3e0c:	b134      	cbz	r4, 80a3e1c <_findenv_r+0x24>
 80a3e0e:	464b      	mov	r3, r9
 80a3e10:	4698      	mov	r8, r3
 80a3e12:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a3e16:	b139      	cbz	r1, 80a3e28 <_findenv_r+0x30>
 80a3e18:	293d      	cmp	r1, #61	; 0x3d
 80a3e1a:	d1f9      	bne.n	80a3e10 <_findenv_r+0x18>
 80a3e1c:	4638      	mov	r0, r7
 80a3e1e:	f000 f8eb 	bl	80a3ff8 <__env_unlock>
 80a3e22:	2000      	movs	r0, #0
 80a3e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e28:	eba8 0809 	sub.w	r8, r8, r9
 80a3e2c:	46a3      	mov	fp, r4
 80a3e2e:	f854 0b04 	ldr.w	r0, [r4], #4
 80a3e32:	2800      	cmp	r0, #0
 80a3e34:	d0f2      	beq.n	80a3e1c <_findenv_r+0x24>
 80a3e36:	4642      	mov	r2, r8
 80a3e38:	4649      	mov	r1, r9
 80a3e3a:	f7ff fca6 	bl	80a378a <strncmp>
 80a3e3e:	2800      	cmp	r0, #0
 80a3e40:	d1f4      	bne.n	80a3e2c <_findenv_r+0x34>
 80a3e42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a3e46:	eb03 0508 	add.w	r5, r3, r8
 80a3e4a:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a3e4e:	2b3d      	cmp	r3, #61	; 0x3d
 80a3e50:	d1ec      	bne.n	80a3e2c <_findenv_r+0x34>
 80a3e52:	f8da 3000 	ldr.w	r3, [sl]
 80a3e56:	4638      	mov	r0, r7
 80a3e58:	ebab 0303 	sub.w	r3, fp, r3
 80a3e5c:	109b      	asrs	r3, r3, #2
 80a3e5e:	6033      	str	r3, [r6, #0]
 80a3e60:	f000 f8ca 	bl	80a3ff8 <__env_unlock>
 80a3e64:	1c68      	adds	r0, r5, #1
 80a3e66:	e7dd      	b.n	80a3e24 <_findenv_r+0x2c>
 80a3e68:	200000e0 	.word	0x200000e0

080a3e6c <_getenv_r>:
 80a3e6c:	b507      	push	{r0, r1, r2, lr}
 80a3e6e:	aa01      	add	r2, sp, #4
 80a3e70:	f7ff ffc2 	bl	80a3df8 <_findenv_r>
 80a3e74:	b003      	add	sp, #12
 80a3e76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3e7c <__gettzinfo>:
 80a3e7c:	4800      	ldr	r0, [pc, #0]	; (80a3e80 <__gettzinfo+0x4>)
 80a3e7e:	4770      	bx	lr
 80a3e80:	20000088 	.word	0x20000088

080a3e84 <gmtime_r>:
 80a3e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3e88:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a3e8c:	460c      	mov	r4, r1
 80a3e8e:	2300      	movs	r3, #0
 80a3e90:	4630      	mov	r0, r6
 80a3e92:	4639      	mov	r1, r7
 80a3e94:	4a4f      	ldr	r2, [pc, #316]	; (80a3fd4 <gmtime_r+0x150>)
 80a3e96:	f000 f8b5 	bl	80a4004 <__aeabi_ldivmod>
 80a3e9a:	4639      	mov	r1, r7
 80a3e9c:	4605      	mov	r5, r0
 80a3e9e:	2300      	movs	r3, #0
 80a3ea0:	4630      	mov	r0, r6
 80a3ea2:	4a4c      	ldr	r2, [pc, #304]	; (80a3fd4 <gmtime_r+0x150>)
 80a3ea4:	f000 f8ae 	bl	80a4004 <__aeabi_ldivmod>
 80a3ea8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3eac:	2a00      	cmp	r2, #0
 80a3eae:	bfbc      	itt	lt
 80a3eb0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a3eb4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a3eb8:	fbb2 f3f1 	udiv	r3, r2, r1
 80a3ebc:	fb01 2213 	mls	r2, r1, r3, r2
 80a3ec0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a3ec4:	60a3      	str	r3, [r4, #8]
 80a3ec6:	fbb2 f3f1 	udiv	r3, r2, r1
 80a3eca:	fb01 2213 	mls	r2, r1, r3, r2
 80a3ece:	6022      	str	r2, [r4, #0]
 80a3ed0:	f04f 0207 	mov.w	r2, #7
 80a3ed4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a3ed8:	bfac      	ite	ge
 80a3eda:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a3ede:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a3ee2:	6063      	str	r3, [r4, #4]
 80a3ee4:	1cc3      	adds	r3, r0, #3
 80a3ee6:	fb93 f2f2 	sdiv	r2, r3, r2
 80a3eea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a3eee:	1a9b      	subs	r3, r3, r2
 80a3ef0:	bf48      	it	mi
 80a3ef2:	3307      	addmi	r3, #7
 80a3ef4:	2800      	cmp	r0, #0
 80a3ef6:	4938      	ldr	r1, [pc, #224]	; (80a3fd8 <gmtime_r+0x154>)
 80a3ef8:	61a3      	str	r3, [r4, #24]
 80a3efa:	bfbd      	ittte	lt
 80a3efc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a3f00:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a3f04:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a3f08:	fb90 f1f1 	sdivge	r1, r0, r1
 80a3f0c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a3f10:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a3f14:	4b31      	ldr	r3, [pc, #196]	; (80a3fdc <gmtime_r+0x158>)
 80a3f16:	f240 176d 	movw	r7, #365	; 0x16d
 80a3f1a:	fb03 0001 	mla	r0, r3, r1, r0
 80a3f1e:	fbb0 f2f2 	udiv	r2, r0, r2
 80a3f22:	fbb0 f3fc 	udiv	r3, r0, ip
 80a3f26:	4402      	add	r2, r0
 80a3f28:	1ad2      	subs	r2, r2, r3
 80a3f2a:	4b2d      	ldr	r3, [pc, #180]	; (80a3fe0 <gmtime_r+0x15c>)
 80a3f2c:	2664      	movs	r6, #100	; 0x64
 80a3f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 80a3f32:	1ad3      	subs	r3, r2, r3
 80a3f34:	fbb3 f5f7 	udiv	r5, r3, r7
 80a3f38:	fbb3 f3fc 	udiv	r3, r3, ip
 80a3f3c:	fbb5 f2f6 	udiv	r2, r5, r6
 80a3f40:	1ad3      	subs	r3, r2, r3
 80a3f42:	4403      	add	r3, r0
 80a3f44:	2099      	movs	r0, #153	; 0x99
 80a3f46:	fb07 3315 	mls	r3, r7, r5, r3
 80a3f4a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a3f4e:	f10c 0c02 	add.w	ip, ip, #2
 80a3f52:	fbbc f7f0 	udiv	r7, ip, r0
 80a3f56:	f04f 0805 	mov.w	r8, #5
 80a3f5a:	4378      	muls	r0, r7
 80a3f5c:	3002      	adds	r0, #2
 80a3f5e:	fbb0 f0f8 	udiv	r0, r0, r8
 80a3f62:	f103 0e01 	add.w	lr, r3, #1
 80a3f66:	ebae 0000 	sub.w	r0, lr, r0
 80a3f6a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a3f6e:	45f4      	cmp	ip, lr
 80a3f70:	bf94      	ite	ls
 80a3f72:	f04f 0c02 	movls.w	ip, #2
 80a3f76:	f06f 0c09 	mvnhi.w	ip, #9
 80a3f7a:	4467      	add	r7, ip
 80a3f7c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a3f80:	fb0c 5101 	mla	r1, ip, r1, r5
 80a3f84:	2f01      	cmp	r7, #1
 80a3f86:	bf98      	it	ls
 80a3f88:	3101      	addls	r1, #1
 80a3f8a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a3f8e:	d30c      	bcc.n	80a3faa <gmtime_r+0x126>
 80a3f90:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a3f94:	61e3      	str	r3, [r4, #28]
 80a3f96:	2300      	movs	r3, #0
 80a3f98:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a3f9c:	60e0      	str	r0, [r4, #12]
 80a3f9e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a3fa2:	4620      	mov	r0, r4
 80a3fa4:	6223      	str	r3, [r4, #32]
 80a3fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3faa:	f015 0f03 	tst.w	r5, #3
 80a3fae:	d102      	bne.n	80a3fb6 <gmtime_r+0x132>
 80a3fb0:	fb06 5212 	mls	r2, r6, r2, r5
 80a3fb4:	b95a      	cbnz	r2, 80a3fce <gmtime_r+0x14a>
 80a3fb6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a3fba:	fbb5 f2f6 	udiv	r2, r5, r6
 80a3fbe:	fb06 5212 	mls	r2, r6, r2, r5
 80a3fc2:	fab2 f282 	clz	r2, r2
 80a3fc6:	0952      	lsrs	r2, r2, #5
 80a3fc8:	333b      	adds	r3, #59	; 0x3b
 80a3fca:	4413      	add	r3, r2
 80a3fcc:	e7e2      	b.n	80a3f94 <gmtime_r+0x110>
 80a3fce:	2201      	movs	r2, #1
 80a3fd0:	e7fa      	b.n	80a3fc8 <gmtime_r+0x144>
 80a3fd2:	bf00      	nop
 80a3fd4:	00015180 	.word	0x00015180
 80a3fd8:	00023ab1 	.word	0x00023ab1
 80a3fdc:	fffdc54f 	.word	0xfffdc54f
 80a3fe0:	00023ab0 	.word	0x00023ab0

080a3fe4 <__retarget_lock_acquire>:
 80a3fe4:	4770      	bx	lr

080a3fe6 <__retarget_lock_acquire_recursive>:
 80a3fe6:	4770      	bx	lr

080a3fe8 <__retarget_lock_release>:
 80a3fe8:	4770      	bx	lr

080a3fea <__retarget_lock_release_recursive>:
 80a3fea:	4770      	bx	lr

080a3fec <__env_lock>:
 80a3fec:	4801      	ldr	r0, [pc, #4]	; (80a3ff4 <__env_lock+0x8>)
 80a3fee:	f7ff bffa 	b.w	80a3fe6 <__retarget_lock_acquire_recursive>
 80a3ff2:	bf00      	nop
 80a3ff4:	20000d26 	.word	0x20000d26

080a3ff8 <__env_unlock>:
 80a3ff8:	4801      	ldr	r0, [pc, #4]	; (80a4000 <__env_unlock+0x8>)
 80a3ffa:	f7ff bff6 	b.w	80a3fea <__retarget_lock_release_recursive>
 80a3ffe:	bf00      	nop
 80a4000:	20000d26 	.word	0x20000d26

080a4004 <__aeabi_ldivmod>:
 80a4004:	b97b      	cbnz	r3, 80a4026 <__aeabi_ldivmod+0x22>
 80a4006:	b972      	cbnz	r2, 80a4026 <__aeabi_ldivmod+0x22>
 80a4008:	2900      	cmp	r1, #0
 80a400a:	bfbe      	ittt	lt
 80a400c:	2000      	movlt	r0, #0
 80a400e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a4012:	e006      	blt.n	80a4022 <__aeabi_ldivmod+0x1e>
 80a4014:	bf08      	it	eq
 80a4016:	2800      	cmpeq	r0, #0
 80a4018:	bf1c      	itt	ne
 80a401a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a401e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a4022:	f7ff ba0b 	b.w	80a343c <__aeabi_idiv0>
 80a4026:	f1ad 0c08 	sub.w	ip, sp, #8
 80a402a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a402e:	2900      	cmp	r1, #0
 80a4030:	db09      	blt.n	80a4046 <__aeabi_ldivmod+0x42>
 80a4032:	2b00      	cmp	r3, #0
 80a4034:	db1a      	blt.n	80a406c <__aeabi_ldivmod+0x68>
 80a4036:	f7ff f89f 	bl	80a3178 <__udivmoddi4>
 80a403a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a403e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4042:	b004      	add	sp, #16
 80a4044:	4770      	bx	lr
 80a4046:	4240      	negs	r0, r0
 80a4048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a404c:	2b00      	cmp	r3, #0
 80a404e:	db1b      	blt.n	80a4088 <__aeabi_ldivmod+0x84>
 80a4050:	f7ff f892 	bl	80a3178 <__udivmoddi4>
 80a4054:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a405c:	b004      	add	sp, #16
 80a405e:	4240      	negs	r0, r0
 80a4060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4064:	4252      	negs	r2, r2
 80a4066:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a406a:	4770      	bx	lr
 80a406c:	4252      	negs	r2, r2
 80a406e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4072:	f7ff f881 	bl	80a3178 <__udivmoddi4>
 80a4076:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a407a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a407e:	b004      	add	sp, #16
 80a4080:	4240      	negs	r0, r0
 80a4082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4086:	4770      	bx	lr
 80a4088:	4252      	negs	r2, r2
 80a408a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a408e:	f7ff f873 	bl	80a3178 <__udivmoddi4>
 80a4092:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a409a:	b004      	add	sp, #16
 80a409c:	4252      	negs	r2, r2
 80a409e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a40a2:	4770      	bx	lr

080a40a4 <dynalib_user>:
 80a40a4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a40b4:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a40c4:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a40d4:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a40e4:	6f70 6577 2e72 4100 7474 6361 2068 6573     power..Attach se
 80a40f4:	736e 726f 7420 206f 6966 676e 7265 7720     nsor to finger w
 80a4104:	7469 2068 7572 6262 7265 6220 6e61 2064     ith rubber band 
 80a4114:	6f74 4220 6765 6e69 0021 4e20 206f 6966     to Begin!. No fi
 80a4124:	676e 7265 003f 6946 676e 7265 4420 7465     nger?.Finger Det
 80a4134:	6365 6574 2064 2d2d 4920 696e 6974 6c61     ected -- Initial
 80a4144:	7a69 6e69 0067 2e2e 002e 5248 203d 2000     izing.....HR= . 
 80a4154:	5042 004d 202c 5053 324f 203d 2500 7b00     BPM., SPO2= .%.{
 80a4164:	2220 6974 656d 3a22 0020 202c 6822 6165      "time": ., "hea
 80a4174:	7472 6152 6574 3a22 0020 202c 2200 7073     rtRate": ., ."sp
 80a4184:	326f 3a22 0020 007d 6164 6174 6e45 7274     o2": .}.dataEntr
 80a4194:	0079                                        y.

080a4196 <_ZL14uch_spo2_table>:
 80a4196:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
 80a41a6:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
 80a41b6:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
 80a41c6:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
 80a41d6:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
 80a41e6:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
 80a41f6:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
 80a4206:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
 80a4216:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
 80a4226:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
 80a4236:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
 80a4246:	0709 0506 0203 0001 0000                    ..........

080a4250 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4258:	12a3 080a 12a9 080a 12f9 080a 12b7 080a     ................
 80a4268:	12a5 080a                                   ....

080a426c <_ZTV7TwoWire>:
	...
 80a4274:	1849 080a 1893 080a 186b 080a 184b 080a     I.......k...K...
 80a4284:	1873 080a 187b 080a 1883 080a 188b 080a     s...{...........

080a4294 <_ZTV9IPAddress>:
	...
 80a429c:	195d 080a 194d 080a 194f 080a 7061 0070     ]...M...O...app.

080a42ac <_ZTVN5spark12NetworkClassE>:
	...
 80a42b4:	1a25 080a 1a2f 080a 1a39 080a 1a43 080a     %.../...9...C...
 80a42c4:	1a4d 080a 1a59 080a 1a65 080a 1a6d 080a     M...Y...e...m...
 80a42d4:	1a75 080a 1a81 080a 1a89 080a 1a93 080a     u...............
 80a42e4:	1a9d 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a42f4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a4304 <_ZTV11USARTSerial>:
	...
 80a430c:	1ef1 080a 1f5b 080a 1f37 080a 1b01 080a     ....[...7.......
 80a431c:	1f07 080a 1f23 080a 1f15 080a 1f31 080a     ....#.......1...
 80a432c:	1ef3 080a 1ef9 080a                         ........

080a4334 <_ZTV9USBSerial>:
	...
 80a433c:	1fe3 080a 2049 080a 2021 080a 1b01 080a     ....I ..! ......
 80a434c:	2013 080a 1fe5 080a 1ff5 080a 2043 080a     . ..........C ..
 80a435c:	2005 080a 1fdd 080a                         . ......

080a4364 <_ZTVN5spark9WiFiClassE>:
	...
 80a436c:	2213 080a 2209 080a 21ff 080a 2171 080a     ."..."...!..q!..
 80a437c:	21f3 080a 21e7 080a 1a65 080a 1a6d 080a     .!...!..e...m...
 80a438c:	21db 080a 21d3 080a 21c9 080a 21bf 080a     .!...!...!...!..
 80a439c:	217b 080a                                   {!..

080a43a0 <_ZSt7nothrow>:
 80a43a0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a43b0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a43c1 <day_name.4782>:
 80a43c1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a43d1:	6972 6153                                    riSat

080a43d6 <mon_name.4783>:
 80a43d6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a43e6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a43f6:	4476 6365 0000                              vDec..

080a43fc <__month_lengths>:
 80a43fc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a440c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a441c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a442c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a443c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a444c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a445c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a446c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a447c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a448c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a4498 <_ctype_>:
 80a4498:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a44a8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a44b8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a44c8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a44d8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a44e8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a44f8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a4508:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a4518:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a4599 <link_const_variable_data_end>:
 80a4599:	00          	.byte	0x00
	...

080a459c <link_constructors_location>:
 80a459c:	080a04e5 	.word	0x080a04e5
 80a45a0:	080a1a15 	.word	0x080a1a15
 80a45a4:	080a1aed 	.word	0x080a1aed
 80a45a8:	080a1bc5 	.word	0x080a1bc5
 80a45ac:	080a1d95 	.word	0x080a1d95
 80a45b0:	080a1edd 	.word	0x080a1edd
 80a45b4:	080a221d 	.word	0x080a221d
 80a45b8:	080a257d 	.word	0x080a257d

080a45bc <link_constructors_end>:
 80a45bc:	00000000 	.word	0x00000000
