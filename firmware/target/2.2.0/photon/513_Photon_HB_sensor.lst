
/Users/rileycowling/Desktop/ECE513/513_Photon_HB_sensor/target/2.2.0/photon/513_Photon_HB_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ec4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1ee0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a1ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c08  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1f60  080a1f60  00021f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1f88  080a1f88  00021f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00103bf0  00000000  00000000  00021f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001282d  00000000  00000000  00125b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013d70  00000000  00000000  001383a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ce0  00000000  00000000  0014c119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f60  00000000  00000000  0014ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027955  00000000  00000000  00151d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000294b1  00000000  00000000  001796ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000af264  00000000  00000000  001a2b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004694  00000000  00000000  00251dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fd41 	bl	80a1ab4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fd49 	bl	80a1ad0 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1ee4 	.word	0x080a1ee4
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000c81 	.word	0x20000c81
 80a0058:	20000c81 	.word	0x20000c81

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fc2d 	bl	80a18bc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1eb8 	.word	0x080a1eb8
 80a0080:	080a1ed8 	.word	0x080a1ed8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b828 	b.w	80a00d8 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f875 	bl	80a0178 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bbcb 	b.w	80a182c <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bfe7 	b.w	80a1068 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bfed 	b.w	80a1078 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN5Print5printIlLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a00b0:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 80a00b2:	4607      	mov	r7, r0
 80a00b4:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
 80a00b6:	da0c      	bge.n	80a00d2 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
 80a00b8:	2a0a      	cmp	r2, #10
 80a00ba:	d10a      	bne.n	80a00d2 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x24>
            t = print('-');
 80a00bc:	212d      	movs	r1, #45	; 0x2d
 80a00be:	f001 f971 	bl	80a13a4 <_ZN5Print5printEc>
 80a00c2:	4605      	mov	r5, r0
            val = -n;
 80a00c4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a00c6:	4638      	mov	r0, r7
 80a00c8:	b2f2      	uxtb	r2, r6
 80a00ca:	f001 f98a 	bl	80a13e2 <_ZN5Print11printNumberEmh>
    }
}
 80a00ce:	4428      	add	r0, r5
 80a00d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
 80a00d2:	4621      	mov	r1, r4
        size_t t = 0;
 80a00d4:	2500      	movs	r5, #0
 80a00d6:	e7f6      	b.n	80a00c6 <_ZN5Print5printIlLi0EEEjT_i.part.0+0x18>

080a00d8 <setup>:
int fingerPresent;
bool rangeSetter = false;


void setup()
{
 80a00d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
 80a00da:	f001 fab3 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a00de:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00e2:	f001 fa95 	bl	80a1610 <_ZN9USBSerial5beginEl>

  //setting up status LEDS
  pinMode(R_LED,OUTPUT);
 80a00e6:	4b1c      	ldr	r3, [pc, #112]	; (80a0158 <setup+0x80>)
 80a00e8:	2101      	movs	r1, #1
 80a00ea:	8818      	ldrh	r0, [r3, #0]
 80a00ec:	f001 fc62 	bl	80a19b4 <pinMode>
  pinMode(G_LED,OUTPUT);
 80a00f0:	4b1a      	ldr	r3, [pc, #104]	; (80a015c <setup+0x84>)
 80a00f2:	2101      	movs	r1, #1
 80a00f4:	8818      	ldrh	r0, [r3, #0]
 80a00f6:	f001 fc5d 	bl	80a19b4 <pinMode>
  pinMode(B_LED,OUTPUT);
 80a00fa:	4b19      	ldr	r3, [pc, #100]	; (80a0160 <setup+0x88>)
 80a00fc:	2101      	movs	r1, #1
 80a00fe:	8818      	ldrh	r0, [r3, #0]
 80a0100:	f001 fc58 	bl	80a19b4 <pinMode>
  pinMode(W_LED,OUTPUT);
 80a0104:	4b17      	ldr	r3, [pc, #92]	; (80a0164 <setup+0x8c>)
 80a0106:	2101      	movs	r1, #1
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f001 fc53 	bl	80a19b4 <pinMode>

  // Initialize sensor, if something is wrong go into the following infinite loop
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a010e:	f001 fc95 	bl	80a1a3c <_Z19__fetch_global_Wirev>
 80a0112:	2357      	movs	r3, #87	; 0x57
 80a0114:	4601      	mov	r1, r0
 80a0116:	4a14      	ldr	r2, [pc, #80]	; (80a0168 <setup+0x90>)
 80a0118:	4814      	ldr	r0, [pc, #80]	; (80a016c <setup+0x94>)
 80a011a:	f000 fa93 	bl	80a0644 <_ZN8MAX301055beginER7TwoWiremh>
 80a011e:	b928      	cbnz	r0, 80a012c <setup+0x54>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
 80a0120:	f001 fa90 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0124:	4912      	ldr	r1, [pc, #72]	; (80a0170 <setup+0x98>)
 80a0126:	f001 f95a 	bl	80a13de <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
 80a012a:	e7fe      	b.n	80a012a <setup+0x52>
  }

  //Print the OK Message to continue
  Serial.println(F("Attach sensor to finger with rubber band to Begin!"));
 80a012c:	f001 fa8a 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0130:	4910      	ldr	r1, [pc, #64]	; (80a0174 <setup+0x9c>)
 80a0132:	f001 f954 	bl	80a13de <_ZN5Print7printlnEPK19__FlashStringHelper>
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  //Configure sensor with these settings
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); 
 80a0136:	f240 139b 	movw	r3, #411	; 0x19b
 80a013a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a013e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a0142:	2364      	movs	r3, #100	; 0x64
 80a0144:	2204      	movs	r2, #4
 80a0146:	9300      	str	r3, [sp, #0]
 80a0148:	213c      	movs	r1, #60	; 0x3c
 80a014a:	2302      	movs	r3, #2
 80a014c:	4807      	ldr	r0, [pc, #28]	; (80a016c <setup+0x94>)
 80a014e:	f000 fb38 	bl	80a07c2 <_ZN8MAX301055setupEhhhiii>
}
 80a0152:	b005      	add	sp, #20
 80a0154:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0158:	20000008 	.word	0x20000008
 80a015c:	20000004 	.word	0x20000004
 80a0160:	20000000 	.word	0x20000000
 80a0164:	2000000c 	.word	0x2000000c
 80a0168:	00061a80 	.word	0x00061a80
 80a016c:	20000218 	.word	0x20000218
 80a0170:	080a1c1c 	.word	0x080a1c1c
 80a0174:	080a1c4f 	.word	0x080a1c4f

080a0178 <loop>:

void loop(){ 
 80a0178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** Finger detection before getting started **/
  if (particleSensor.getIR() < 50000){
 80a017c:	488b      	ldr	r0, [pc, #556]	; (80a03ac <loop+0x234>)
void loop(){ 
 80a017e:	b085      	sub	sp, #20
  if (particleSensor.getIR() < 50000){
 80a0180:	f000 fa48 	bl	80a0614 <_ZN8MAX301055getIREv>
 80a0184:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a0188:	4298      	cmp	r0, r3
 80a018a:	4f89      	ldr	r7, [pc, #548]	; (80a03b0 <loop+0x238>)
 80a018c:	4e89      	ldr	r6, [pc, #548]	; (80a03b4 <loop+0x23c>)
 80a018e:	d838      	bhi.n	80a0202 <loop+0x8a>
    //Setting finger status to zero for not present
    fingerPresent=0;
 80a0190:	2500      	movs	r5, #0
 80a0192:	4c89      	ldr	r4, [pc, #548]	; (80a03b8 <loop+0x240>)

    //No finger turn turn off B/G LEDs
    digitalWrite(G_LED,LOW);
 80a0194:	4629      	mov	r1, r5
 80a0196:	8838      	ldrh	r0, [r7, #0]
    fingerPresent=0;
 80a0198:	6025      	str	r5, [r4, #0]
    digitalWrite(G_LED,LOW);
 80a019a:	f001 fc1c 	bl	80a19d6 <digitalWrite>
    digitalWrite(B_LED, LOW);
 80a019e:	4b87      	ldr	r3, [pc, #540]	; (80a03bc <loop+0x244>)
 80a01a0:	4629      	mov	r1, r5
 80a01a2:	8818      	ldrh	r0, [r3, #0]
 80a01a4:	f001 fc17 	bl	80a19d6 <digitalWrite>
    Serial.println(" No finger?");
 80a01a8:	f001 fa4c 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a01ac:	4984      	ldr	r1, [pc, #528]	; (80a03c0 <loop+0x248>)
 80a01ae:	f001 f90c 	bl	80a13ca <_ZN5Print7printlnEPKc>

    //while there is no finger flash red LED
    while(fingerPresent==0){ 
      digitalWrite(R_LED,HIGH);
 80a01b2:	f04f 0901 	mov.w	r9, #1
      delay(200);
      digitalWrite(R_LED,LOW);
      delay(200);
      if(!(particleSensor.getIR() < 50000)){
 80a01b6:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80a03ac <loop+0x234>
        fingerPresent=1; //Set finger status to 1 for present
        Serial.println("Finger Detected -- Initializing");
 80a01ba:	f8df 8240 	ldr.w	r8, [pc, #576]	; 80a03fc <loop+0x284>
    while(fingerPresent==0){ 
 80a01be:	6825      	ldr	r5, [r4, #0]
 80a01c0:	b9e5      	cbnz	r5, 80a01fc <loop+0x84>
      digitalWrite(R_LED,HIGH);
 80a01c2:	2101      	movs	r1, #1
 80a01c4:	8830      	ldrh	r0, [r6, #0]
 80a01c6:	f001 fc06 	bl	80a19d6 <digitalWrite>
      delay(200);
 80a01ca:	20c8      	movs	r0, #200	; 0xc8
 80a01cc:	f000 ff64 	bl	80a1098 <delay>
      digitalWrite(R_LED,LOW);
 80a01d0:	4629      	mov	r1, r5
 80a01d2:	8830      	ldrh	r0, [r6, #0]
 80a01d4:	f001 fbff 	bl	80a19d6 <digitalWrite>
      delay(200);
 80a01d8:	20c8      	movs	r0, #200	; 0xc8
 80a01da:	f000 ff5d 	bl	80a1098 <delay>
      if(!(particleSensor.getIR() < 50000)){
 80a01de:	4650      	mov	r0, sl
 80a01e0:	f000 fa18 	bl	80a0614 <_ZN8MAX301055getIREv>
 80a01e4:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a01e8:	4298      	cmp	r0, r3
 80a01ea:	d9e8      	bls.n	80a01be <loop+0x46>
        fingerPresent=1; //Set finger status to 1 for present
 80a01ec:	f8c4 9000 	str.w	r9, [r4]
        Serial.println("Finger Detected -- Initializing");
 80a01f0:	f001 fa28 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a01f4:	4641      	mov	r1, r8
 80a01f6:	f001 f8e8 	bl	80a13ca <_ZN5Print7printlnEPKc>
 80a01fa:	e7e0      	b.n	80a01be <loop+0x46>
      }
    }
    rangeSetter=false; // this recalculates the range if the finger has been removed 
 80a01fc:	2200      	movs	r2, #0
 80a01fe:	4b71      	ldr	r3, [pc, #452]	; (80a03c4 <loop+0x24c>)
 80a0200:	701a      	strb	r2, [r3, #0]
  }

  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a0202:	2364      	movs	r3, #100	; 0x64
 80a0204:	4c70      	ldr	r4, [pc, #448]	; (80a03c8 <loop+0x250>)
  
  //Finger present turn off Red LED and turn on Green LED
  digitalWrite(G_LED,HIGH);
 80a0206:	2101      	movs	r1, #1
 80a0208:	8838      	ldrh	r0, [r7, #0]
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
 80a020a:	6023      	str	r3, [r4, #0]
  digitalWrite(G_LED,HIGH);
 80a020c:	f001 fbe3 	bl	80a19d6 <digitalWrite>
  digitalWrite(R_LED,LOW);
 80a0210:	2100      	movs	r1, #0
 80a0212:	8830      	ldrh	r0, [r6, #0]
 80a0214:	f001 fbdf 	bl	80a19d6 <digitalWrite>

  if(!rangeSetter){
 80a0218:	4b6a      	ldr	r3, [pc, #424]	; (80a03c4 <loop+0x24c>)
 80a021a:	781d      	ldrb	r5, [r3, #0]
 80a021c:	4698      	mov	r8, r3
 80a021e:	2d00      	cmp	r5, #0
 80a0220:	d162      	bne.n	80a02e8 <loop+0x170>
    //read the first 100 samples, and determine the signal range
    digitalWrite(W_LED,HIGH);
 80a0222:	4f6a      	ldr	r7, [pc, #424]	; (80a03cc <loop+0x254>)
 80a0224:	2101      	movs	r1, #1
 80a0226:	8838      	ldrh	r0, [r7, #0]
 80a0228:	f001 fbd5 	bl	80a19d6 <digitalWrite>
    Serial.println("...");
 80a022c:	f001 fa0a 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0230:	4967      	ldr	r1, [pc, #412]	; (80a03d0 <loop+0x258>)
 80a0232:	f001 f8ca 	bl	80a13ca <_ZN5Print7printlnEPKc>
    for (byte i = 0 ; i < bufferLength ; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
 80a0236:	4e5d      	ldr	r6, [pc, #372]	; (80a03ac <loop+0x234>)
        particleSensor.check(); //Check the sensor for new data

      redBuffer[i] = particleSensor.getRed();
 80a0238:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80a03e4 <loop+0x26c>
      irBuffer[i] = particleSensor.getIR();
 80a023c:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 80a03e8 <loop+0x270>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0240:	6823      	ldr	r3, [r4, #0]
 80a0242:	fa5f f985 	uxtb.w	r9, r5
 80a0246:	4599      	cmp	r9, r3
 80a0248:	da16      	bge.n	80a0278 <loop+0x100>
      while (particleSensor.available() == false) //do we have new data?
 80a024a:	4630      	mov	r0, r6
 80a024c:	f000 f8df 	bl	80a040e <_ZN8MAX301059availableEv>
 80a0250:	b918      	cbnz	r0, 80a025a <loop+0xe2>
        particleSensor.check(); //Check the sensor for new data
 80a0252:	4630      	mov	r0, r6
 80a0254:	f000 f91d 	bl	80a0492 <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
 80a0258:	e7f7      	b.n	80a024a <loop+0xd2>
      redBuffer[i] = particleSensor.getRed();
 80a025a:	4630      	mov	r0, r6
 80a025c:	f000 f9ce 	bl	80a05fc <_ZN8MAX301056getRedEv>
 80a0260:	f84b 0029 	str.w	r0, [fp, r9, lsl #2]
      irBuffer[i] = particleSensor.getIR();
 80a0264:	4630      	mov	r0, r6
 80a0266:	f000 f9d5 	bl	80a0614 <_ZN8MAX301055getIREv>
 80a026a:	f84a 0029 	str.w	r0, [sl, r9, lsl #2]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a026e:	4630      	mov	r0, r6
 80a0270:	f000 f8da 	bl	80a0428 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++)
 80a0274:	3501      	adds	r5, #1
 80a0276:	e7e3      	b.n	80a0240 <loop+0xc8>

    }
    rangeSetter=true; 
 80a0278:	2301      	movs	r3, #1
    digitalWrite(W_LED,LOW);
 80a027a:	2100      	movs	r1, #0
 80a027c:	8838      	ldrh	r0, [r7, #0]
    rangeSetter=true; 
 80a027e:	f888 3000 	strb.w	r3, [r8]
    digitalWrite(W_LED,LOW);
 80a0282:	f001 fba8 	bl	80a19d6 <digitalWrite>
    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a0286:	4b53      	ldr	r3, [pc, #332]	; (80a03d4 <loop+0x25c>)
 80a0288:	4e53      	ldr	r6, [pc, #332]	; (80a03d8 <loop+0x260>)
 80a028a:	9302      	str	r3, [sp, #8]
 80a028c:	4b53      	ldr	r3, [pc, #332]	; (80a03dc <loop+0x264>)
 80a028e:	4d54      	ldr	r5, [pc, #336]	; (80a03e0 <loop+0x268>)
 80a0290:	9300      	str	r3, [sp, #0]
 80a0292:	9601      	str	r6, [sp, #4]
 80a0294:	462b      	mov	r3, r5
 80a0296:	4a53      	ldr	r2, [pc, #332]	; (80a03e4 <loop+0x26c>)
 80a0298:	6821      	ldr	r1, [r4, #0]
 80a029a:	4853      	ldr	r0, [pc, #332]	; (80a03e8 <loop+0x270>)
 80a029c:	f000 fbf6 	bl	80a0a8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
    //** DATA PRINTING **//
    //Heart Rate Values
    Serial.print(F("HR= "));
 80a02a0:	f001 f9d0 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02a4:	4951      	ldr	r1, [pc, #324]	; (80a03ec <loop+0x274>)
 80a02a6:	f001 f880 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(heartRate, DEC);
 80a02aa:	f001 f9cb 	bl	80a1644 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
 80a02ae:	220a      	movs	r2, #10
 80a02b0:	6831      	ldr	r1, [r6, #0]
 80a02b2:	f7ff fefc 	bl	80a00ae <_ZN5Print5printIlLi0EEEjT_i.part.0>
    Serial.print(F(" BPM"));
 80a02b6:	f001 f9c5 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02ba:	494d      	ldr	r1, [pc, #308]	; (80a03f0 <loop+0x278>)
 80a02bc:	f001 f875 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
    //Blood Oxygen Values 
    Serial.print(F(", SPO2= "));
 80a02c0:	f001 f9c0 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02c4:	494b      	ldr	r1, [pc, #300]	; (80a03f4 <loop+0x27c>)
 80a02c6:	f001 f870 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(spo2, DEC);
 80a02ca:	f001 f9bb 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02ce:	220a      	movs	r2, #10
 80a02d0:	6829      	ldr	r1, [r5, #0]
 80a02d2:	f7ff feec 	bl	80a00ae <_ZN5Print5printIlLi0EEEjT_i.part.0>
    Serial.print(F("%"));
 80a02d6:	f001 f9b5 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02da:	4947      	ldr	r1, [pc, #284]	; (80a03f8 <loop+0x280>)
 80a02dc:	f001 f865 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println();  
 80a02e0:	f001 f9b0 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a02e4:	f001 f865 	bl	80a13b2 <_ZN5Print7printlnEv>
  }
  
  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  
  digitalWrite(B_LED,HIGH); //Status
 80a02e8:	4b34      	ldr	r3, [pc, #208]	; (80a03bc <loop+0x244>)
 80a02ea:	2101      	movs	r1, #1
 80a02ec:	8818      	ldrh	r0, [r3, #0]
 80a02ee:	f001 fb72 	bl	80a19d6 <digitalWrite>

  //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
  for (byte i = 25; i < 100; i++)
 80a02f2:	493c      	ldr	r1, [pc, #240]	; (80a03e4 <loop+0x26c>)
 80a02f4:	4a3c      	ldr	r2, [pc, #240]	; (80a03e8 <loop+0x270>)
 80a02f6:	2319      	movs	r3, #25
 80a02f8:	4688      	mov	r8, r1
 80a02fa:	4617      	mov	r7, r2
  {
    redBuffer[i - 25] = redBuffer[i];
 80a02fc:	6e48      	ldr	r0, [r1, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a02fe:	3301      	adds	r3, #1
    redBuffer[i - 25] = redBuffer[i];
 80a0300:	f841 0b04 	str.w	r0, [r1], #4
  for (byte i = 25; i < 100; i++)
 80a0304:	b2db      	uxtb	r3, r3
    irBuffer[i - 25] = irBuffer[i];
 80a0306:	6e50      	ldr	r0, [r2, #100]	; 0x64
  for (byte i = 25; i < 100; i++)
 80a0308:	2b64      	cmp	r3, #100	; 0x64
    irBuffer[i - 25] = irBuffer[i];
 80a030a:	f842 0b04 	str.w	r0, [r2], #4
  for (byte i = 25; i < 100; i++)
 80a030e:	d1f5      	bne.n	80a02fc <loop+0x184>
 80a0310:	254b      	movs	r5, #75	; 0x4b
  
  //take 25 sets of samples before calculating the heart rate.
  for (byte i = 75; i < 100; i++)
  {

    while (particleSensor.available() == false) //do we have new data?
 80a0312:	4e26      	ldr	r6, [pc, #152]	; (80a03ac <loop+0x234>)
 80a0314:	4630      	mov	r0, r6
 80a0316:	f000 f87a 	bl	80a040e <_ZN8MAX301059availableEv>
 80a031a:	b918      	cbnz	r0, 80a0324 <loop+0x1ac>
      particleSensor.check(); //Check the sensor for new data
 80a031c:	4630      	mov	r0, r6
 80a031e:	f000 f8b8 	bl	80a0492 <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
 80a0322:	e7f7      	b.n	80a0314 <loop+0x19c>

    redBuffer[i] = particleSensor.getRed();
 80a0324:	4630      	mov	r0, r6
 80a0326:	f000 f969 	bl	80a05fc <_ZN8MAX301056getRedEv>
 80a032a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    irBuffer[i] = particleSensor.getIR();
 80a032e:	4630      	mov	r0, r6
 80a0330:	f000 f970 	bl	80a0614 <_ZN8MAX301055getIREv>
 80a0334:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
 80a0338:	4630      	mov	r0, r6
 80a033a:	3501      	adds	r5, #1
 80a033c:	f000 f874 	bl	80a0428 <_ZN8MAX3010510nextSampleEv>
  for (byte i = 75; i < 100; i++)
 80a0340:	2d64      	cmp	r5, #100	; 0x64
 80a0342:	d1e7      	bne.n	80a0314 <loop+0x19c>
  }
  
  //After gathering 25 new samples recalculate HR and SP02
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80a0344:	4b23      	ldr	r3, [pc, #140]	; (80a03d4 <loop+0x25c>)
 80a0346:	4e24      	ldr	r6, [pc, #144]	; (80a03d8 <loop+0x260>)
 80a0348:	9302      	str	r3, [sp, #8]
 80a034a:	4b24      	ldr	r3, [pc, #144]	; (80a03dc <loop+0x264>)
 80a034c:	4d24      	ldr	r5, [pc, #144]	; (80a03e0 <loop+0x268>)
 80a034e:	9300      	str	r3, [sp, #0]
 80a0350:	9601      	str	r6, [sp, #4]
 80a0352:	462b      	mov	r3, r5
 80a0354:	4a23      	ldr	r2, [pc, #140]	; (80a03e4 <loop+0x26c>)
 80a0356:	6821      	ldr	r1, [r4, #0]
 80a0358:	4823      	ldr	r0, [pc, #140]	; (80a03e8 <loop+0x270>)
 80a035a:	f000 fb97 	bl	80a0a8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  
  //** DATA PRINTING **//
  //Heart Rate Values
  Serial.print(F("HR= "));
 80a035e:	f001 f971 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0362:	4922      	ldr	r1, [pc, #136]	; (80a03ec <loop+0x274>)
 80a0364:	f001 f821 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(heartRate, DEC);
 80a0368:	f001 f96c 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a036c:	220a      	movs	r2, #10
 80a036e:	6831      	ldr	r1, [r6, #0]
 80a0370:	f7ff fe9d 	bl	80a00ae <_ZN5Print5printIlLi0EEEjT_i.part.0>
  Serial.print(F(" BPM"));
 80a0374:	f001 f966 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0378:	491d      	ldr	r1, [pc, #116]	; (80a03f0 <loop+0x278>)
 80a037a:	f001 f816 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
  //Blood Oxygen Values 
  Serial.print(F(", SPO2= "));
 80a037e:	f001 f961 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0382:	491c      	ldr	r1, [pc, #112]	; (80a03f4 <loop+0x27c>)
 80a0384:	f001 f811 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(spo2, DEC);
 80a0388:	f001 f95c 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a038c:	220a      	movs	r2, #10
 80a038e:	6829      	ldr	r1, [r5, #0]
 80a0390:	f7ff fe8d 	bl	80a00ae <_ZN5Print5printIlLi0EEEjT_i.part.0>
  Serial.print(F("%"));
 80a0394:	f001 f956 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a0398:	4917      	ldr	r1, [pc, #92]	; (80a03f8 <loop+0x280>)
 80a039a:	f001 f806 	bl	80a13aa <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println();
 80a039e:	f001 f951 	bl	80a1644 <_Z16_fetch_usbserialv>
}
 80a03a2:	b005      	add	sp, #20
 80a03a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println();
 80a03a8:	f001 b803 	b.w	80a13b2 <_ZN5Print7printlnEv>
 80a03ac:	20000218 	.word	0x20000218
 80a03b0:	20000004 	.word	0x20000004
 80a03b4:	20000008 	.word	0x20000008
 80a03b8:	20000080 	.word	0x20000080
 80a03bc:	20000000 	.word	0x20000000
 80a03c0:	080a1c82 	.word	0x080a1c82
 80a03c4:	20000254 	.word	0x20000254
 80a03c8:	2000007c 	.word	0x2000007c
 80a03cc:	2000000c 	.word	0x2000000c
 80a03d0:	080a1cae 	.word	0x080a1cae
 80a03d4:	200003ec 	.word	0x200003ec
 80a03d8:	20000084 	.word	0x20000084
 80a03dc:	200003ed 	.word	0x200003ed
 80a03e0:	200003e8 	.word	0x200003e8
 80a03e4:	20000258 	.word	0x20000258
 80a03e8:	20000088 	.word	0x20000088
 80a03ec:	080a1cb2 	.word	0x080a1cb2
 80a03f0:	080a1cb7 	.word	0x080a1cb7
 80a03f4:	080a1cbc 	.word	0x080a1cbc
 80a03f8:	080a1cc5 	.word	0x080a1cc5
 80a03fc:	080a1c8e 	.word	0x080a1c8e

080a0400 <_GLOBAL__sub_I_particleSensor>:
MAX30105 particleSensor;
 80a0400:	4801      	ldr	r0, [pc, #4]	; (80a0408 <_GLOBAL__sub_I_particleSensor+0x8>)
 80a0402:	f000 b803 	b.w	80a040c <_ZN8MAX30105C1Ev>
 80a0406:	bf00      	nop
 80a0408:	20000218 	.word	0x20000218

080a040c <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a040c:	4770      	bx	lr

080a040e <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
 80a040e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a0412:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80a0416:	1a18      	subs	r0, r3, r0
 80a0418:	b2c3      	uxtb	r3, r0
 80a041a:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 80a041c:	2800      	cmp	r0, #0
 80a041e:	bfbc      	itt	lt
 80a0420:	1d18      	addlt	r0, r3, #4
 80a0422:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
 80a0424:	b2c0      	uxtb	r0, r0
 80a0426:	4770      	bx	lr

080a0428 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
 80a042c:	f7ff ffef 	bl	80a040e <_ZN8MAX301059availableEv>
 80a0430:	b130      	cbz	r0, 80a0440 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
 80a0432:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80a0436:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
 80a0438:	f003 0303 	and.w	r3, r3, #3
 80a043c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
 80a0440:	bd08      	pop	{r3, pc}

080a0442 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a0442:	b570      	push	{r4, r5, r6, lr}
 80a0444:	4604      	mov	r4, r0
 80a0446:	4616      	mov	r6, r2
 80a0448:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a044a:	6800      	ldr	r0, [r0, #0]
 80a044c:	f000 fe9c 	bl	80a1188 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0450:	6820      	ldr	r0, [r4, #0]
 80a0452:	4631      	mov	r1, r6
 80a0454:	6803      	ldr	r3, [r0, #0]
 80a0456:	689b      	ldr	r3, [r3, #8]
 80a0458:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a045a:	2100      	movs	r1, #0
 80a045c:	6820      	ldr	r0, [r4, #0]
 80a045e:	f000 fe9a 	bl	80a1196 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a0462:	2201      	movs	r2, #1
 80a0464:	4629      	mov	r1, r5
 80a0466:	6820      	ldr	r0, [r4, #0]
 80a0468:	f000 fe8b 	bl	80a1182 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a046c:	6820      	ldr	r0, [r4, #0]
 80a046e:	6803      	ldr	r3, [r0, #0]
 80a0470:	691b      	ldr	r3, [r3, #16]
 80a0472:	4798      	blx	r3
 80a0474:	b120      	cbz	r0, 80a0480 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a0476:	6820      	ldr	r0, [r4, #0]
 80a0478:	6803      	ldr	r3, [r0, #0]
 80a047a:	695b      	ldr	r3, [r3, #20]
 80a047c:	4798      	blx	r3
 80a047e:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a0480:	bd70      	pop	{r4, r5, r6, pc}

080a0482 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a0482:	2204      	movs	r2, #4
 80a0484:	7901      	ldrb	r1, [r0, #4]
 80a0486:	f7ff bfdc 	b.w	80a0442 <_ZN8MAX3010513readRegister8Ehh>

080a048a <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a048a:	2206      	movs	r2, #6
 80a048c:	7901      	ldrb	r1, [r0, #4]
 80a048e:	f7ff bfd8 	b.w	80a0442 <_ZN8MAX3010513readRegister8Ehh>

080a0492 <_ZN8MAX301055checkEv>:
{
 80a0492:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0496:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
 80a0498:	f7ff fff7 	bl	80a048a <_ZN8MAX3010514getReadPointerEv>
 80a049c:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
 80a049e:	4620      	mov	r0, r4
 80a04a0:	f7ff ffef 	bl	80a0482 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
 80a04a4:	4286      	cmp	r6, r0
 80a04a6:	f000 808e 	beq.w	80a05c6 <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04aa:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a04ac:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a04b0:	6820      	ldr	r0, [r4, #0]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04b2:	bf48      	it	mi
 80a04b4:	3620      	addmi	r6, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a04b6:	7967      	ldrb	r7, [r4, #5]
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a04b8:	f000 fe6a 	bl	80a1190 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a04bc:	6820      	ldr	r0, [r4, #0]
 80a04be:	2107      	movs	r1, #7
 80a04c0:	6803      	ldr	r3, [r0, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a04c2:	f04f 0820 	mov.w	r8, #32
    _i2cPort->write(MAX30105_FIFODATA);
 80a04c6:	689b      	ldr	r3, [r3, #8]
 80a04c8:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a04ca:	6820      	ldr	r0, [r4, #0]
 80a04cc:	f000 fe67 	bl	80a119e <_ZN7TwoWire15endTransmissionEv>
        temp[3] = 0;
 80a04d0:	f04f 0900 	mov.w	r9, #0
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a04d4:	4377      	muls	r7, r6
 80a04d6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
 80a04da:	2f00      	cmp	r7, #0
 80a04dc:	dd74      	ble.n	80a05c8 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
 80a04de:	2f20      	cmp	r7, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a04e0:	bfc9      	itett	gt
 80a04e2:	7965      	ldrbgt	r5, [r4, #5]
 80a04e4:	463d      	movle	r5, r7
 80a04e6:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a04ea:	fbb8 f2f5 	udivgt	r2, r8, r5
 80a04ee:	bfc8      	it	gt
 80a04f0:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a04f2:	2157      	movs	r1, #87	; 0x57
 80a04f4:	462a      	mov	r2, r5
 80a04f6:	6820      	ldr	r0, [r4, #0]
      bytesLeftToRead -= toGet;
 80a04f8:	1b7f      	subs	r7, r7, r5
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a04fa:	f000 fe42 	bl	80a1182 <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
 80a04fe:	2d00      	cmp	r5, #0
 80a0500:	ddeb      	ble.n	80a04da <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
 80a0502:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a0506:	6820      	ldr	r0, [r4, #0]
        sense.head++; //Advance the head of the storage struct
 80a0508:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a050a:	f003 0303 	and.w	r3, r3, #3
 80a050e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
 80a0512:	6803      	ldr	r3, [r0, #0]
        temp[3] = 0;
 80a0514:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a0518:	695b      	ldr	r3, [r3, #20]
 80a051a:	4798      	blx	r3
 80a051c:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a0520:	6820      	ldr	r0, [r4, #0]
 80a0522:	6803      	ldr	r3, [r0, #0]
 80a0524:	695b      	ldr	r3, [r3, #20]
 80a0526:	4798      	blx	r3
 80a0528:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a052c:	6820      	ldr	r0, [r4, #0]
 80a052e:	6803      	ldr	r3, [r0, #0]
 80a0530:	695b      	ldr	r3, [r3, #20]
 80a0532:	4798      	blx	r3
 80a0534:	f88d 0004 	strb.w	r0, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0538:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a053c:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a053e:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0540:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0544:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
 80a0548:	7963      	ldrb	r3, [r4, #5]
 80a054a:	2b01      	cmp	r3, #1
 80a054c:	d919      	bls.n	80a0582 <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
 80a054e:	6820      	ldr	r0, [r4, #0]
 80a0550:	6803      	ldr	r3, [r0, #0]
 80a0552:	695b      	ldr	r3, [r3, #20]
 80a0554:	4798      	blx	r3
 80a0556:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a055a:	6820      	ldr	r0, [r4, #0]
 80a055c:	6803      	ldr	r3, [r0, #0]
 80a055e:	695b      	ldr	r3, [r3, #20]
 80a0560:	4798      	blx	r3
 80a0562:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0566:	6820      	ldr	r0, [r4, #0]
 80a0568:	6803      	ldr	r3, [r0, #0]
 80a056a:	695b      	ldr	r3, [r3, #20]
 80a056c:	4798      	blx	r3
 80a056e:	f88d 0004 	strb.w	r0, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0572:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a0576:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
 80a0578:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a057a:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
 80a057e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
 80a0582:	7963      	ldrb	r3, [r4, #5]
 80a0584:	2b02      	cmp	r3, #2
 80a0586:	d919      	bls.n	80a05bc <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
 80a0588:	6820      	ldr	r0, [r4, #0]
 80a058a:	6803      	ldr	r3, [r0, #0]
 80a058c:	695b      	ldr	r3, [r3, #20]
 80a058e:	4798      	blx	r3
 80a0590:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0594:	6820      	ldr	r0, [r4, #0]
 80a0596:	6803      	ldr	r3, [r0, #0]
 80a0598:	695b      	ldr	r3, [r3, #20]
 80a059a:	4798      	blx	r3
 80a059c:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a05a0:	6820      	ldr	r0, [r4, #0]
 80a05a2:	6803      	ldr	r3, [r0, #0]
 80a05a4:	695b      	ldr	r3, [r3, #20]
 80a05a6:	4798      	blx	r3
 80a05a8:	f88d 0004 	strb.w	r0, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a05ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05b0:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
 80a05b2:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80a05b4:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
 80a05b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
 80a05bc:	7963      	ldrb	r3, [r4, #5]
 80a05be:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a05c2:	441d      	add	r5, r3
      while (toGet > 0)
 80a05c4:	e79b      	b.n	80a04fe <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
 80a05c6:	2600      	movs	r6, #0
}
 80a05c8:	b2b0      	uxth	r0, r6
 80a05ca:	b003      	add	sp, #12
 80a05cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a05d0 <_ZN8MAX301059safeCheckEh>:
{
 80a05d0:	b570      	push	{r4, r5, r6, lr}
 80a05d2:	4605      	mov	r5, r0
 80a05d4:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05d6:	f000 fba7 	bl	80a0d28 <HAL_Timer_Get_Milli_Seconds>
 80a05da:	4604      	mov	r4, r0
 80a05dc:	f000 fba4 	bl	80a0d28 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a05e0:	1b00      	subs	r0, r0, r4
 80a05e2:	42b0      	cmp	r0, r6
 80a05e4:	d808      	bhi.n	80a05f8 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
 80a05e6:	4628      	mov	r0, r5
 80a05e8:	f7ff ff53 	bl	80a0492 <_ZN8MAX301055checkEv>
 80a05ec:	2801      	cmp	r0, #1
 80a05ee:	d004      	beq.n	80a05fa <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
 80a05f0:	2001      	movs	r0, #1
 80a05f2:	f000 fd51 	bl	80a1098 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a05f6:	e7f1      	b.n	80a05dc <_ZN8MAX301059safeCheckEh+0xc>
 80a05f8:	2000      	movs	r0, #0
}
 80a05fa:	bd70      	pop	{r4, r5, r6, pc}

080a05fc <_ZN8MAX301056getRedEv>:
{
 80a05fc:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a05fe:	21fa      	movs	r1, #250	; 0xfa
{
 80a0600:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a0602:	f7ff ffe5 	bl	80a05d0 <_ZN8MAX301059safeCheckEh>
 80a0606:	b120      	cbz	r0, 80a0612 <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
 80a0608:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a060c:	3302      	adds	r3, #2
 80a060e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a0612:	bd10      	pop	{r4, pc}

080a0614 <_ZN8MAX301055getIREv>:
{
 80a0614:	b510      	push	{r4, lr}
  if(safeCheck(250))
 80a0616:	21fa      	movs	r1, #250	; 0xfa
{
 80a0618:	4604      	mov	r4, r0
  if(safeCheck(250))
 80a061a:	f7ff ffd9 	bl	80a05d0 <_ZN8MAX301059safeCheckEh>
 80a061e:	b120      	cbz	r0, 80a062a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a0620:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0624:	3306      	adds	r3, #6
 80a0626:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
 80a062a:	bd10      	pop	{r4, pc}

080a062c <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a062c:	22ff      	movs	r2, #255	; 0xff
 80a062e:	7901      	ldrb	r1, [r0, #4]
 80a0630:	f7ff bf07 	b.w	80a0442 <_ZN8MAX3010513readRegister8Ehh>

080a0634 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
 80a0634:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a0636:	22fe      	movs	r2, #254	; 0xfe
 80a0638:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
 80a063a:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a063c:	f7ff ff01 	bl	80a0442 <_ZN8MAX3010513readRegister8Ehh>
 80a0640:	71a0      	strb	r0, [r4, #6]
}
 80a0642:	bd10      	pop	{r4, pc}

080a0644 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a0644:	b570      	push	{r4, r5, r6, lr}
 80a0646:	4604      	mov	r4, r0
 80a0648:	4616      	mov	r6, r2
 80a064a:	461d      	mov	r5, r3
 80a064c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a064e:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
 80a0650:	f000 fd68 	bl	80a1124 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0654:	4631      	mov	r1, r6
 80a0656:	6820      	ldr	r0, [r4, #0]
 80a0658:	f000 fd60 	bl	80a111c <_ZN7TwoWire8setSpeedEm>
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a065c:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
 80a065e:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a0660:	f7ff ffe4 	bl	80a062c <_ZN8MAX3010510readPartIDEv>
 80a0664:	2815      	cmp	r0, #21
 80a0666:	d104      	bne.n	80a0672 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
  readRevisionID();
 80a0668:	4620      	mov	r0, r4
 80a066a:	f7ff ffe3 	bl	80a0634 <_ZN8MAX3010514readRevisionIDEv>
  return true;
 80a066e:	2001      	movs	r0, #1
}
 80a0670:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a0672:	2000      	movs	r0, #0
 80a0674:	e7fc      	b.n	80a0670 <_ZN8MAX301055beginER7TwoWiremh+0x2c>

080a0676 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a0676:	b570      	push	{r4, r5, r6, lr}
 80a0678:	4604      	mov	r4, r0
 80a067a:	4616      	mov	r6, r2
 80a067c:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a067e:	6800      	ldr	r0, [r0, #0]
 80a0680:	f000 fd82 	bl	80a1188 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0684:	6820      	ldr	r0, [r4, #0]
 80a0686:	4631      	mov	r1, r6
 80a0688:	6803      	ldr	r3, [r0, #0]
 80a068a:	689b      	ldr	r3, [r3, #8]
 80a068c:	4798      	blx	r3
  _i2cPort->write(value);
 80a068e:	6820      	ldr	r0, [r4, #0]
 80a0690:	4629      	mov	r1, r5
 80a0692:	6803      	ldr	r3, [r0, #0]
 80a0694:	689b      	ldr	r3, [r3, #8]
 80a0696:	4798      	blx	r3
  _i2cPort->endTransmission();
 80a0698:	6820      	ldr	r0, [r4, #0]
}
 80a069a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
 80a069e:	f000 bd7e 	b.w	80a119e <_ZN7TwoWire15endTransmissionEv>

080a06a2 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
 80a06a2:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a06a4:	220c      	movs	r2, #12
 80a06a6:	7901      	ldrb	r1, [r0, #4]
 80a06a8:	f7ff bfe5 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a06ac <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
 80a06ac:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a06ae:	220d      	movs	r2, #13
 80a06b0:	7901      	ldrb	r1, [r0, #4]
 80a06b2:	f7ff bfe0 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a06b6 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
 80a06b6:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a06b8:	220e      	movs	r2, #14
 80a06ba:	7901      	ldrb	r1, [r0, #4]
 80a06bc:	f7ff bfdb 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a06c0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
 80a06c0:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a06c2:	2210      	movs	r2, #16
 80a06c4:	7901      	ldrb	r1, [r0, #4]
 80a06c6:	f7ff bfd6 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a06ca <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
 80a06ca:	b510      	push	{r4, lr}
 80a06cc:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a06ce:	7901      	ldrb	r1, [r0, #4]
 80a06d0:	2300      	movs	r3, #0
 80a06d2:	2204      	movs	r2, #4
 80a06d4:	f7ff ffcf 	bl	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a06d8:	4620      	mov	r0, r4
 80a06da:	7921      	ldrb	r1, [r4, #4]
 80a06dc:	2300      	movs	r3, #0
 80a06de:	2205      	movs	r2, #5
 80a06e0:	f7ff ffc9 	bl	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a06e4:	4620      	mov	r0, r4
 80a06e6:	7921      	ldrb	r1, [r4, #4]
 80a06e8:	2300      	movs	r3, #0
}
 80a06ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a06ee:	2206      	movs	r2, #6
 80a06f0:	f7ff bfc1 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a06f4 <_ZN8MAX301057bitMaskEhhh>:
{
 80a06f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06f8:	460d      	mov	r5, r1
 80a06fa:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a06fc:	460a      	mov	r2, r1
 80a06fe:	7901      	ldrb	r1, [r0, #4]
{
 80a0700:	4604      	mov	r4, r0
 80a0702:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a0704:	f7ff fe9d 	bl	80a0442 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
 80a0708:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a070c:	462a      	mov	r2, r5
 80a070e:	4620      	mov	r0, r4
 80a0710:	7921      	ldrb	r1, [r4, #4]
 80a0712:	4333      	orrs	r3, r6
}
 80a0714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0718:	f7ff bfad 	b.w	80a0676 <_ZN8MAX3010514writeRegister8Ehhh>

080a071c <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
 80a071c:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a071e:	22bf      	movs	r2, #191	; 0xbf
 80a0720:	2340      	movs	r3, #64	; 0x40
 80a0722:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
 80a0724:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a0726:	f7ff ffe5 	bl	80a06f4 <_ZN8MAX301057bitMaskEhhh>
 80a072a:	f000 fafd 	bl	80a0d28 <HAL_Timer_Get_Milli_Seconds>
 80a072e:	4605      	mov	r5, r0
 80a0730:	f000 fafa 	bl	80a0d28 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
 80a0734:	1b40      	subs	r0, r0, r5
 80a0736:	2863      	cmp	r0, #99	; 0x63
 80a0738:	d80a      	bhi.n	80a0750 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a073a:	2209      	movs	r2, #9
 80a073c:	4620      	mov	r0, r4
 80a073e:	7921      	ldrb	r1, [r4, #4]
 80a0740:	f7ff fe7f 	bl	80a0442 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a0744:	0643      	lsls	r3, r0, #25
 80a0746:	d503      	bpl.n	80a0750 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a0748:	2001      	movs	r0, #1
 80a074a:	f000 fca5 	bl	80a1098 <delay>
  while (millis() - startTime < 100)
 80a074e:	e7ef      	b.n	80a0730 <_ZN8MAX301059softResetEv+0x14>
}
 80a0750:	bd38      	pop	{r3, r4, r5, pc}

080a0752 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
 80a0752:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a0754:	22f8      	movs	r2, #248	; 0xf8
 80a0756:	2109      	movs	r1, #9
 80a0758:	f7ff bfcc 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a075c <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
 80a075c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a075e:	229f      	movs	r2, #159	; 0x9f
 80a0760:	210a      	movs	r1, #10
 80a0762:	f7ff bfc7 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a0766 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
 80a0766:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0768:	22e3      	movs	r2, #227	; 0xe3
 80a076a:	210a      	movs	r1, #10
 80a076c:	f7ff bfc2 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a0770 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
 80a0770:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a0772:	22fc      	movs	r2, #252	; 0xfc
 80a0774:	210a      	movs	r1, #10
 80a0776:	f7ff bfbd 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a077a <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
 80a077a:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a077c:	221f      	movs	r2, #31
 80a077e:	2108      	movs	r1, #8
 80a0780:	f7ff bfb8 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a0784 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a0784:	2310      	movs	r3, #16
 80a0786:	22ef      	movs	r2, #239	; 0xef
 80a0788:	2108      	movs	r1, #8
 80a078a:	f7ff bfb3 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>

080a078e <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
 80a078e:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a0790:	4613      	mov	r3, r2
 80a0792:	2903      	cmp	r1, #3
 80a0794:	d814      	bhi.n	80a07c0 <_ZN8MAX3010510enableSlotEhh+0x32>
 80a0796:	e8df f001 	tbb	[pc, r1]
 80a079a:	0602      	.short	0x0602
 80a079c:	0e0b      	.short	0x0e0b
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a079e:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a07a0:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a07a2:	f7ff bfa7 	b.w	80a06f4 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a07a6:	011b      	lsls	r3, r3, #4
 80a07a8:	228f      	movs	r2, #143	; 0x8f
 80a07aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07ae:	e7f7      	b.n	80a07a0 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a07b0:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a07b2:	2112      	movs	r1, #18
 80a07b4:	e7f5      	b.n	80a07a2 <_ZN8MAX3010510enableSlotEhh+0x14>
 80a07b6:	011b      	lsls	r3, r3, #4
 80a07b8:	228f      	movs	r2, #143	; 0x8f
 80a07ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07be:	e7f8      	b.n	80a07b2 <_ZN8MAX3010510enableSlotEhh+0x24>
}
 80a07c0:	4770      	bx	lr

080a07c2 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a07c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a07c6:	4615      	mov	r5, r2
 80a07c8:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
 80a07cc:	4604      	mov	r4, r0
 80a07ce:	4688      	mov	r8, r1
 80a07d0:	461e      	mov	r6, r3
 80a07d2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a07d6:	f7ff ffa1 	bl	80a071c <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a07da:	2d01      	cmp	r5, #1
 80a07dc:	d14a      	bne.n	80a0874 <_ZN8MAX301055setupEhhhiii+0xb2>
 80a07de:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a07e0:	4620      	mov	r0, r4
 80a07e2:	f7ff ffca 	bl	80a077a <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a07e6:	4620      	mov	r0, r4
 80a07e8:	f7ff ffcc 	bl	80a0784 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a07ec:	2e03      	cmp	r6, #3
 80a07ee:	d155      	bne.n	80a089c <_ZN8MAX301055setupEhhhiii+0xda>
 80a07f0:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	f7ff ffad 	bl	80a0752 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a07f8:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a07fc:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a07fe:	da52      	bge.n	80a08a6 <_ZN8MAX301055setupEhhhiii+0xe4>
 80a0800:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a0802:	4620      	mov	r0, r4
 80a0804:	f7ff ffaa 	bl	80a075c <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a0808:	2f63      	cmp	r7, #99	; 0x63
 80a080a:	dc59      	bgt.n	80a08c0 <_ZN8MAX301055setupEhhhiii+0xfe>
 80a080c:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a080e:	4620      	mov	r0, r4
 80a0810:	f7ff ffa9 	bl	80a0766 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a0814:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a0818:	dc72      	bgt.n	80a0900 <_ZN8MAX301055setupEhhhiii+0x13e>
 80a081a:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a081c:	4620      	mov	r0, r4
 80a081e:	f7ff ffa7 	bl	80a0770 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
 80a0822:	4641      	mov	r1, r8
 80a0824:	4620      	mov	r0, r4
 80a0826:	f7ff ff3c 	bl	80a06a2 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a082a:	4641      	mov	r1, r8
 80a082c:	4620      	mov	r0, r4
 80a082e:	f7ff ff3d 	bl	80a06ac <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a0832:	4641      	mov	r1, r8
 80a0834:	4620      	mov	r0, r4
 80a0836:	f7ff ff3e 	bl	80a06b6 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a083a:	4641      	mov	r1, r8
 80a083c:	4620      	mov	r0, r4
 80a083e:	f7ff ff3f 	bl	80a06c0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
 80a0842:	2201      	movs	r2, #1
 80a0844:	4620      	mov	r0, r4
 80a0846:	4611      	mov	r1, r2
 80a0848:	f7ff ffa1 	bl	80a078e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a084c:	2e01      	cmp	r6, #1
 80a084e:	d90c      	bls.n	80a086a <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0850:	2320      	movs	r3, #32
 80a0852:	228f      	movs	r2, #143	; 0x8f
 80a0854:	2111      	movs	r1, #17
 80a0856:	4620      	mov	r0, r4
 80a0858:	f7ff ff4c 	bl	80a06f4 <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a085c:	2e02      	cmp	r6, #2
 80a085e:	d004      	beq.n	80a086a <_ZN8MAX301055setupEhhhiii+0xa8>
 80a0860:	2203      	movs	r2, #3
 80a0862:	4620      	mov	r0, r4
 80a0864:	4611      	mov	r1, r2
 80a0866:	f7ff ff92 	bl	80a078e <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a086a:	4620      	mov	r0, r4
}
 80a086c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0870:	f7ff bf2b 	b.w	80a06ca <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a0874:	2d02      	cmp	r5, #2
 80a0876:	d101      	bne.n	80a087c <_ZN8MAX301055setupEhhhiii+0xba>
 80a0878:	2120      	movs	r1, #32
 80a087a:	e7b1      	b.n	80a07e0 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a087c:	2d04      	cmp	r5, #4
 80a087e:	d101      	bne.n	80a0884 <_ZN8MAX301055setupEhhhiii+0xc2>
 80a0880:	2140      	movs	r1, #64	; 0x40
 80a0882:	e7ad      	b.n	80a07e0 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a0884:	2d08      	cmp	r5, #8
 80a0886:	d101      	bne.n	80a088c <_ZN8MAX301055setupEhhhiii+0xca>
 80a0888:	2160      	movs	r1, #96	; 0x60
 80a088a:	e7a9      	b.n	80a07e0 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a088c:	2d10      	cmp	r5, #16
 80a088e:	d101      	bne.n	80a0894 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a0890:	2180      	movs	r1, #128	; 0x80
 80a0892:	e7a5      	b.n	80a07e0 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a0894:	2d20      	cmp	r5, #32
 80a0896:	d1f3      	bne.n	80a0880 <_ZN8MAX301055setupEhhhiii+0xbe>
 80a0898:	21a0      	movs	r1, #160	; 0xa0
 80a089a:	e7a1      	b.n	80a07e0 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a089c:	2e02      	cmp	r6, #2
 80a089e:	bf0c      	ite	eq
 80a08a0:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a08a2:	2102      	movne	r1, #2
 80a08a4:	e7a5      	b.n	80a07f2 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a08a6:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a08aa:	da01      	bge.n	80a08b0 <_ZN8MAX301055setupEhhhiii+0xee>
 80a08ac:	2120      	movs	r1, #32
 80a08ae:	e7a8      	b.n	80a0802 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a08b0:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a08b4:	da01      	bge.n	80a08ba <_ZN8MAX301055setupEhhhiii+0xf8>
 80a08b6:	2140      	movs	r1, #64	; 0x40
 80a08b8:	e7a3      	b.n	80a0802 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a08ba:	d1a1      	bne.n	80a0800 <_ZN8MAX301055setupEhhhiii+0x3e>
 80a08bc:	2160      	movs	r1, #96	; 0x60
 80a08be:	e7a0      	b.n	80a0802 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a08c0:	2fc7      	cmp	r7, #199	; 0xc7
 80a08c2:	dc01      	bgt.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0x106>
 80a08c4:	2104      	movs	r1, #4
 80a08c6:	e7a2      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a08c8:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
 80a08cc:	da01      	bge.n	80a08d2 <_ZN8MAX301055setupEhhhiii+0x110>
 80a08ce:	2108      	movs	r1, #8
 80a08d0:	e79d      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a08d2:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 80a08d6:	da01      	bge.n	80a08dc <_ZN8MAX301055setupEhhhiii+0x11a>
 80a08d8:	210c      	movs	r1, #12
 80a08da:	e798      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a08dc:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 80a08e0:	da01      	bge.n	80a08e6 <_ZN8MAX301055setupEhhhiii+0x124>
 80a08e2:	2110      	movs	r1, #16
 80a08e4:	e793      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a08e6:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 80a08ea:	da01      	bge.n	80a08f0 <_ZN8MAX301055setupEhhhiii+0x12e>
 80a08ec:	2114      	movs	r1, #20
 80a08ee:	e78e      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a08f0:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 80a08f4:	da01      	bge.n	80a08fa <_ZN8MAX301055setupEhhhiii+0x138>
 80a08f6:	2118      	movs	r1, #24
 80a08f8:	e789      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a08fa:	d187      	bne.n	80a080c <_ZN8MAX301055setupEhhhiii+0x4a>
 80a08fc:	211c      	movs	r1, #28
 80a08fe:	e786      	b.n	80a080e <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a0900:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a0904:	dc01      	bgt.n	80a090a <_ZN8MAX301055setupEhhhiii+0x148>
 80a0906:	2101      	movs	r1, #1
 80a0908:	e788      	b.n	80a081c <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a090a:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a090e:	dc01      	bgt.n	80a0914 <_ZN8MAX301055setupEhhhiii+0x152>
 80a0910:	2102      	movs	r1, #2
 80a0912:	e783      	b.n	80a081c <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a0914:	f240 139b 	movw	r3, #411	; 0x19b
 80a0918:	4599      	cmp	r9, r3
 80a091a:	f47f af7e 	bne.w	80a081a <_ZN8MAX301055setupEhhhiii+0x58>
 80a091e:	2103      	movs	r1, #3
 80a0920:	e77c      	b.n	80a081c <_ZN8MAX301055setupEhhhiii+0x5a>

080a0922 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80a0922:	4684      	mov	ip, r0
  int32_t i = 1, n_width;
  *n_npks = 0;
 80a0924:	2000      	movs	r0, #0
{
 80a0926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
 80a092a:	2401      	movs	r4, #1
  *n_npks = 0;
 80a092c:	6008      	str	r0, [r1, #0]
  
  while (i < n_size-1){
 80a092e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a0932:	45a0      	cmp	r8, r4
 80a0934:	dd26      	ble.n	80a0984 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 80a0936:	9d06      	ldr	r5, [sp, #24]
 80a0938:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80a093c:	00a6      	lsls	r6, r4, #2
 80a093e:	42a8      	cmp	r0, r5
 80a0940:	f104 0501 	add.w	r5, r4, #1
 80a0944:	dd1c      	ble.n	80a0980 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0946:	4416      	add	r6, r2
 80a0948:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80a094c:	42b0      	cmp	r0, r6
 80a094e:	dd17      	ble.n	80a0980 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a0950:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 80a0952:	429e      	cmp	r6, r3
 80a0954:	4635      	mov	r5, r6
 80a0956:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80a095a:	eba6 0e04 	sub.w	lr, r6, r4
 80a095e:	d003      	beq.n	80a0968 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
 80a0960:	42b8      	cmp	r0, r7
 80a0962:	f106 0601 	add.w	r6, r6, #1
 80a0966:	d0f4      	beq.n	80a0952 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 80a0968:	42b8      	cmp	r0, r7
 80a096a:	dd09      	ble.n	80a0980 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
 80a096c:	6808      	ldr	r0, [r1, #0]
 80a096e:	280e      	cmp	r0, #14
 80a0970:	dc06      	bgt.n	80a0980 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
 80a0972:	1c45      	adds	r5, r0, #1
 80a0974:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 80a0976:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
 80a097a:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
        i += n_width+1;
 80a097e:	4425      	add	r5, r4
{
 80a0980:	462c      	mov	r4, r5
 80a0982:	e7d6      	b.n	80a0932 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x10>
        i += n_width;
    }
    else
      i++;
  }
}
 80a0984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0988 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80a0988:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a098a:	2301      	movs	r3, #1
 80a098c:	4604      	mov	r4, r0
 80a098e:	428b      	cmp	r3, r1
 80a0990:	da0f      	bge.n	80a09b2 <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
 80a0992:	f854 6f04 	ldr.w	r6, [r4, #4]!
 80a0996:	461a      	mov	r2, r3
 80a0998:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a099a:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80a099e:	42b7      	cmp	r7, r6
 80a09a0:	dd03      	ble.n	80a09aa <_Z17maxim_sort_ascendPll+0x22>
 80a09a2:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
 80a09a4:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80a09a8:	d1f7      	bne.n	80a099a <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
 80a09aa:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a09ae:	3301      	adds	r3, #1
 80a09b0:	e7ed      	b.n	80a098e <_Z17maxim_sort_ascendPll+0x6>
  }
}
 80a09b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09b4 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80a09b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80a09b8:	2301      	movs	r3, #1
{
 80a09ba:	4690      	mov	r8, r2
 80a09bc:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
 80a09be:	4543      	cmp	r3, r8
 80a09c0:	da16      	bge.n	80a09f0 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
 80a09c2:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a09c6:	461c      	mov	r4, r3
 80a09c8:	46ac      	mov	ip, r5
 80a09ca:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 80a09ce:	f8d9 2000 	ldr.w	r2, [r9]
 80a09d2:	f85c 7c04 	ldr.w	r7, [ip, #-4]
 80a09d6:	4696      	mov	lr, r2
 80a09d8:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80a09dc:	4596      	cmp	lr, r2
 80a09de:	dd03      	ble.n	80a09e8 <_Z26maxim_sort_indices_descendPlS_l+0x34>
 80a09e0:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
 80a09e2:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80a09e6:	d1f2      	bne.n	80a09ce <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
 80a09e8:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
 80a09ec:	3301      	adds	r3, #1
 80a09ee:	e7e6      	b.n	80a09be <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
 80a09f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a09f4 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
 80a09f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a09f8:	4604      	mov	r4, r0
 80a09fa:	461e      	mov	r6, r3
 80a09fc:	4610      	mov	r0, r2
 80a09fe:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80a0a00:	680a      	ldr	r2, [r1, #0]
 80a0a02:	4621      	mov	r1, r4
 80a0a04:	f7ff ffd6 	bl	80a09b4 <_Z26maxim_sort_indices_descendPlS_l>
 80a0a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0a0c:	1f27      	subs	r7, r4, #4
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0a0e:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
 80a0a12:	6829      	ldr	r1, [r5, #0]
 80a0a14:	4694      	mov	ip, r2
 80a0a16:	4291      	cmp	r1, r2
 80a0a18:	dd1f      	ble.n	80a0a5a <_Z24maxim_remove_close_peaksPlS_S_l+0x66>
    *pn_npks = i+1;
 80a0a1a:	3201      	adds	r2, #1
 80a0a1c:	4610      	mov	r0, r2
 80a0a1e:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0a20:	4281      	cmp	r1, r0
 80a0a22:	d101      	bne.n	80a0a28 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
 80a0a24:	3704      	adds	r7, #4
 80a0a26:	e7f4      	b.n	80a0a12 <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80a0a28:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80a0a2c:	bf0c      	ite	eq
 80a0a2e:	46e6      	moveq	lr, ip
 80a0a30:	f8d7 e000 	ldrne.w	lr, [r7]
 80a0a34:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0a38:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80a0a3c:	42b3      	cmp	r3, r6
 80a0a3e:	dc01      	bgt.n	80a0a44 <_Z24maxim_remove_close_peaksPlS_S_l+0x50>
 80a0a40:	4598      	cmp	r8, r3
 80a0a42:	dd08      	ble.n	80a0a56 <_Z24maxim_remove_close_peaksPlS_S_l+0x62>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 80a0a44:	f8d5 e000 	ldr.w	lr, [r5]
 80a0a48:	f10e 0301 	add.w	r3, lr, #1
 80a0a4c:	602b      	str	r3, [r5, #0]
 80a0a4e:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80a0a52:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
 80a0a56:	3001      	adds	r0, #1
 80a0a58:	e7e2      	b.n	80a0a20 <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0a5a:	4620      	mov	r0, r4
}
 80a0a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
 80a0a60:	f7ff bf92 	b.w	80a0988 <_Z17maxim_sort_ascendPll>

080a0a64 <_Z16maxim_find_peaksPlS_S_llll>:
{
 80a0a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0a66:	4605      	mov	r5, r0
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0a68:	9f08      	ldr	r7, [sp, #32]
{
 80a0a6a:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 80a0a6c:	9700      	str	r7, [sp, #0]
 80a0a6e:	f7ff ff58 	bl	80a0922 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 80a0a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0a74:	4628      	mov	r0, r5
 80a0a76:	f7ff ffbd 	bl	80a09f4 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
 80a0a7a:	6822      	ldr	r2, [r4, #0]
 80a0a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0a7e:	429a      	cmp	r2, r3
 80a0a80:	bfd4      	ite	le
 80a0a82:	6022      	strle	r2, [r4, #0]
 80a0a84:	6023      	strgt	r3, [r4, #0]
}
 80a0a86:	b003      	add	sp, #12
 80a0a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0a8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
 80a0a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0a90:	4617      	mov	r7, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0a92:	2200      	movs	r2, #0
{
 80a0a94:	469b      	mov	fp, r3
 80a0a96:	4605      	mov	r5, r0
 80a0a98:	460c      	mov	r4, r1
  un_ir_mean =0; 
 80a0a9a:	4613      	mov	r3, r2
{
 80a0a9c:	b09f      	sub	sp, #124	; 0x7c
 80a0a9e:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80a0aa2:	42a2      	cmp	r2, r4
 80a0aa4:	da04      	bge.n	80a0ab0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
 80a0aa6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0aaa:	3201      	adds	r2, #1
 80a0aac:	440b      	add	r3, r1
 80a0aae:	e7f8      	b.n	80a0aa2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80a0ab0:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80a0ce8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
 80a0ab4:	fbb3 f3f4 	udiv	r3, r3, r4
 80a0ab8:	4640      	mov	r0, r8
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0aba:	2200      	movs	r2, #0
 80a0abc:	42a2      	cmp	r2, r4
 80a0abe:	da06      	bge.n	80a0ace <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0ac0:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0ac4:	3201      	adds	r2, #1
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 80a0ac6:	1a59      	subs	r1, r3, r1
 80a0ac8:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80a0acc:	e7f6      	b.n	80a0abc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x30>
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0ace:	2100      	movs	r1, #0
 80a0ad0:	4a85      	ldr	r2, [pc, #532]	; (80a0ce8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0ad2:	6813      	ldr	r3, [r2, #0]
 80a0ad4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a0ad8:	3101      	adds	r1, #1
 80a0ada:	4403      	add	r3, r0
 80a0adc:	6850      	ldr	r0, [r2, #4]
 80a0ade:	4403      	add	r3, r0
 80a0ae0:	6890      	ldr	r0, [r2, #8]
 80a0ae2:	181b      	adds	r3, r3, r0
 80a0ae4:	bf48      	it	mi
 80a0ae6:	3303      	addmi	r3, #3
 80a0ae8:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0aea:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80a0aec:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80a0af0:	d1ef      	bne.n	80a0ad2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x46>
  n_th1=0; 
 80a0af2:	2300      	movs	r3, #0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0af4:	461a      	mov	r2, r3
 80a0af6:	497c      	ldr	r1, [pc, #496]	; (80a0ce8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
    n_th1 +=  an_x[k];
 80a0af8:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0afc:	3201      	adds	r2, #1
 80a0afe:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
 80a0b00:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80a0b02:	d1f9      	bne.n	80a0af8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6c>
  if( n_th1<30) n_th1=30; // min allowed
 80a0b04:	f640 31b7 	movw	r1, #2999	; 0xbb7
 80a0b08:	428b      	cmp	r3, r1
 80a0b0a:	dd4b      	ble.n	80a0ba4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80a0b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0b10:	2b3c      	cmp	r3, #60	; 0x3c
 80a0b12:	bfa8      	it	ge
 80a0b14:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0b16:	2200      	movs	r2, #0
 80a0b18:	ae0f      	add	r6, sp, #60	; 0x3c
  if( n_th1<30) n_th1=30; // min allowed
 80a0b1a:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80a0b1c:	4692      	mov	sl, r2
 80a0b1e:	3201      	adds	r2, #1
 80a0b20:	2a0f      	cmp	r2, #15
 80a0b22:	f841 ab04 	str.w	sl, [r1], #4
 80a0b26:	d1fa      	bne.n	80a0b1e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x92>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 80a0b28:	9202      	str	r2, [sp, #8]
 80a0b2a:	2204      	movs	r2, #4
 80a0b2c:	4630      	mov	r0, r6
 80a0b2e:	e9cd 3200 	strd	r3, r2, [sp]
 80a0b32:	a909      	add	r1, sp, #36	; 0x24
 80a0b34:	2364      	movs	r3, #100	; 0x64
 80a0b36:	4a6c      	ldr	r2, [pc, #432]	; (80a0ce8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
 80a0b38:	f7ff ff94 	bl	80a0a64 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
 80a0b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b3e:	2b01      	cmp	r3, #1
 80a0b40:	dd32      	ble.n	80a0ba8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x11c>
 80a0b42:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
 80a0b44:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0b46:	2001      	movs	r0, #1
 80a0b48:	4671      	mov	r1, lr
 80a0b4a:	f8de c004 	ldr.w	ip, [lr, #4]
 80a0b4e:	6809      	ldr	r1, [r1, #0]
 80a0b50:	3001      	adds	r0, #1
 80a0b52:	ebac 0c01 	sub.w	ip, ip, r1
 80a0b56:	4283      	cmp	r3, r0
 80a0b58:	f10e 0e04 	add.w	lr, lr, #4
 80a0b5c:	4462      	add	r2, ip
 80a0b5e:	d1f3      	bne.n	80a0b48 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xbc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 80a0b60:	1e59      	subs	r1, r3, #1
 80a0b62:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 80a0b66:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0b6a:	fb91 f2f2 	sdiv	r2, r1, r2
 80a0b6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0b70:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
 80a0b72:	2201      	movs	r2, #1
 80a0b74:	f889 2000 	strb.w	r2, [r9]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80a0b78:	2200      	movs	r2, #0
 80a0b7a:	485c      	ldr	r0, [pc, #368]	; (80a0cec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0b7c:	42a2      	cmp	r2, r4
 80a0b7e:	db19      	blt.n	80a0bb4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
  for(k=0; k< 5; k++) an_ratio[k]=0;
 80a0b80:	2200      	movs	r2, #0
 80a0b82:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 80a0b86:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80a0b8a:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0b8c:	a90f      	add	r1, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0b8e:	4293      	cmp	r3, r2
 80a0b90:	dd1c      	ble.n	80a0bcc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x140>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 80a0b92:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80a0b96:	2864      	cmp	r0, #100	; 0x64
 80a0b98:	dd16      	ble.n	80a0bc8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13c>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 80a0b9a:	4b55      	ldr	r3, [pc, #340]	; (80a0cf0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0b9c:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
 80a0ba0:	2300      	movs	r3, #0
 80a0ba2:	e097      	b.n	80a0cd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
 80a0ba4:	231e      	movs	r3, #30
 80a0ba6:	e7b6      	b.n	80a0b16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8a>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 80a0ba8:	4a51      	ldr	r2, [pc, #324]	; (80a0cf0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
 80a0baa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80a0bac:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
 80a0bae:	f889 a000 	strb.w	sl, [r9]
 80a0bb2:	e7e1      	b.n	80a0b78 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
      an_x[k] =  pun_ir_buffer[k] ; 
 80a0bb4:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80a0bb8:	f848 1b04 	str.w	r1, [r8], #4
      an_y[k] =  pun_red_buffer[k] ; 
 80a0bbc:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0bc0:	3201      	adds	r2, #1
      an_y[k] =  pun_red_buffer[k] ; 
 80a0bc2:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80a0bc6:	e7d9      	b.n	80a0b7c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80a0bc8:	3201      	adds	r2, #1
 80a0bca:	e7e0      	b.n	80a0b8e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x102>
  int32_t n_x_dc_max_idx = 0; 
 80a0bcc:	2000      	movs	r0, #0
  int32_t n_y_dc_max_idx = 0;
 80a0bce:	4607      	mov	r7, r0
  n_i_ratio_count = 0; 
 80a0bd0:	4601      	mov	r1, r0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0bd2:	3b01      	subs	r3, #1
 80a0bd4:	f8df c110 	ldr.w	ip, [pc, #272]	; 80a0ce8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0bd8:	f8df e110 	ldr.w	lr, [pc, #272]	; 80a0cec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80a0bdc:	9005      	str	r0, [sp, #20]
 80a0bde:	9307      	str	r3, [sp, #28]
 80a0be0:	9b07      	ldr	r3, [sp, #28]
 80a0be2:	9a05      	ldr	r2, [sp, #20]
 80a0be4:	4293      	cmp	r3, r2
 80a0be6:	dd59      	ble.n	80a0c9c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 80a0be8:	4613      	mov	r3, r2
 80a0bea:	3301      	adds	r3, #1
 80a0bec:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a0bf0:	9305      	str	r3, [sp, #20]
 80a0bf2:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0bf6:	eba8 0903 	sub.w	r9, r8, r3
 80a0bfa:	f1b9 0f03 	cmp.w	r9, #3
 80a0bfe:	ddef      	ble.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
    n_x_dc_max= -16777216; 
 80a0c00:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c04:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
 80a0c06:	9206      	str	r2, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c08:	45a8      	cmp	r8, r5
 80a0c0a:	dd10      	ble.n	80a0c2e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a2>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c0c:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c10:	9c06      	ldr	r4, [sp, #24]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c12:	4592      	cmp	sl, r2
 80a0c14:	bfc8      	it	gt
 80a0c16:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c18:	f85e a025 	ldr.w	sl, [lr, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80a0c1c:	bfc8      	it	gt
 80a0c1e:	4628      	movgt	r0, r5
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80a0c20:	45a2      	cmp	sl, r4
 80a0c22:	bfc4      	itt	gt
 80a0c24:	462f      	movgt	r7, r5
 80a0c26:	f8cd a018 	strgt.w	sl, [sp, #24]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80a0c2a:	3501      	adds	r5, #1
 80a0c2c:	e7ec      	b.n	80a0c08 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x17c>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80a0c2e:	f85c 4028 	ldr.w	r4, [ip, r8, lsl #2]
 80a0c32:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80a0c36:	eba4 0a05 	sub.w	sl, r4, r5
 80a0c3a:	1ac5      	subs	r5, r0, r3
 80a0c3c:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0c40:	fb95 faf9 	sdiv	sl, r5, r9
 80a0c44:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0c48:	9c06      	ldr	r4, [sp, #24]
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 80a0c4a:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80a0c4c:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 80a0c50:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80a0c54:	fb04 f40a 	mul.w	r4, r4, sl
 80a0c58:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0c5a:	2c00      	cmp	r4, #0
 80a0c5c:	ddc0      	ble.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
 80a0c5e:	2904      	cmp	r1, #4
 80a0c60:	dcbe      	bgt.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 80a0c62:	f85e 5023 	ldr.w	r5, [lr, r3, lsl #2]
 80a0c66:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80a0c6a:	1afb      	subs	r3, r7, r3
 80a0c6c:	eba8 0805 	sub.w	r8, r8, r5
 80a0c70:	fb03 f308 	mul.w	r3, r3, r8
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 80a0c74:	fb93 f3f9 	sdiv	r3, r3, r9
 80a0c78:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80a0c7a:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 80a0c7e:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80a0c80:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80a0c82:	11d2      	asrs	r2, r2, #7
 80a0c84:	d0ac      	beq.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0c86:	ab1e      	add	r3, sp, #120	; 0x78
 80a0c88:	eb03 0881 	add.w	r8, r3, r1, lsl #2
 80a0c8c:	2364      	movs	r3, #100	; 0x64
 80a0c8e:	435a      	muls	r2, r3
 80a0c90:	fb92 f4f4 	sdiv	r4, r2, r4
        n_i_ratio_count++;
 80a0c94:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80a0c96:	f848 4c50 	str.w	r4, [r8, #-80]
        n_i_ratio_count++;
 80a0c9a:	e7a1      	b.n	80a0be0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x154>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80a0c9c:	a80a      	add	r0, sp, #40	; 0x28
 80a0c9e:	f7ff fe73 	bl	80a0988 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
 80a0ca2:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
 80a0ca4:	2903      	cmp	r1, #3
 80a0ca6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80a0caa:	dd18      	ble.n	80a0cde <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80a0cac:	a91e      	add	r1, sp, #120	; 0x78
 80a0cae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a0cb2:	f851 3c54 	ldr.w	r3, [r1, #-84]
 80a0cb6:	f851 2c50 	ldr.w	r2, [r1, #-80]
 80a0cba:	4413      	add	r3, r2
 80a0cbc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a0cc0:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
 80a0cc2:	1eda      	subs	r2, r3, #3
 80a0cc4:	2ab4      	cmp	r2, #180	; 0xb4
 80a0cc6:	f63f af68 	bhi.w	80a0b9a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10e>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80a0cca:	4a0a      	ldr	r2, [pc, #40]	; (80a0cf4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
 80a0ccc:	5cd3      	ldrb	r3, [r2, r3]
 80a0cce:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80a0cd2:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
 80a0cd4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80a0cd6:	7013      	strb	r3, [r2, #0]
}
 80a0cd8:	b01f      	add	sp, #124	; 0x7c
 80a0cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
 80a0cde:	aa1e      	add	r2, sp, #120	; 0x78
 80a0ce0:	4413      	add	r3, r2
 80a0ce2:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80a0ce6:	e7ec      	b.n	80a0cc2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
 80a0ce8:	200003f0 	.word	0x200003f0
 80a0cec:	20000580 	.word	0x20000580
 80a0cf0:	fffffc19 	.word	0xfffffc19
 80a0cf4:	080a1cc7 	.word	0x080a1cc7

080a0cf8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0cf8:	b508      	push	{r3, lr}
 80a0cfa:	4b02      	ldr	r3, [pc, #8]	; (80a0d04 <os_mutex_recursive_create+0xc>)
 80a0cfc:	681b      	ldr	r3, [r3, #0]
 80a0cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d00:	9301      	str	r3, [sp, #4]
 80a0d02:	bd08      	pop	{r3, pc}
 80a0d04:	080601d0 	.word	0x080601d0

080a0d08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <os_mutex_recursive_destroy+0xc>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d10:	9301      	str	r3, [sp, #4]
 80a0d12:	bd08      	pop	{r3, pc}
 80a0d14:	080601d0 	.word	0x080601d0

080a0d18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0d18:	b508      	push	{r3, lr}
 80a0d1a:	4b02      	ldr	r3, [pc, #8]	; (80a0d24 <HAL_RNG_GetRandomNumber+0xc>)
 80a0d1c:	681b      	ldr	r3, [r3, #0]
 80a0d1e:	685b      	ldr	r3, [r3, #4]
 80a0d20:	9301      	str	r3, [sp, #4]
 80a0d22:	bd08      	pop	{r3, pc}
 80a0d24:	0806019c 	.word	0x0806019c

080a0d28 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	695b      	ldr	r3, [r3, #20]
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	0806019c 	.word	0x0806019c

080a0d38 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <HAL_Pin_Mode+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	689b      	ldr	r3, [r3, #8]
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601b0 	.word	0x080601b0

080a0d48 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <HAL_Get_Pin_Mode+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	68db      	ldr	r3, [r3, #12]
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601b0 	.word	0x080601b0

080a0d58 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <HAL_GPIO_Write+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	691b      	ldr	r3, [r3, #16]
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601b0 	.word	0x080601b0

080a0d68 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <hal_i2c_set_speed+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601ac 	.word	0x080601ac

080a0d78 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	4b02      	ldr	r3, [pc, #8]	; (80a0d84 <hal_i2c_begin+0xc>)
 80a0d7c:	681b      	ldr	r3, [r3, #0]
 80a0d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0d80:	9301      	str	r3, [sp, #4]
 80a0d82:	bd08      	pop	{r3, pc}
 80a0d84:	080601ac 	.word	0x080601ac

080a0d88 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0d88:	b508      	push	{r3, lr}
 80a0d8a:	4b02      	ldr	r3, [pc, #8]	; (80a0d94 <hal_i2c_begin_transmission+0xc>)
 80a0d8c:	681b      	ldr	r3, [r3, #0]
 80a0d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0d90:	9301      	str	r3, [sp, #4]
 80a0d92:	bd08      	pop	{r3, pc}
 80a0d94:	080601ac 	.word	0x080601ac

080a0d98 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <hal_i2c_end_transmission+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601ac 	.word	0x080601ac

080a0da8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <hal_i2c_write+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601ac 	.word	0x080601ac

080a0db8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <hal_i2c_available+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601ac 	.word	0x080601ac

080a0dc8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <hal_i2c_read+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	080601ac 	.word	0x080601ac

080a0dd8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <hal_i2c_peek+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601ac 	.word	0x080601ac

080a0de8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <hal_i2c_flush+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601ac 	.word	0x080601ac

080a0df8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <hal_i2c_is_enabled+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601ac 	.word	0x080601ac

080a0e08 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b03      	ldr	r3, [pc, #12]	; (80a0e18 <hal_i2c_init+0x10>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0e12:	9301      	str	r3, [sp, #4]
 80a0e14:	bd08      	pop	{r3, pc}
 80a0e16:	0000      	.short	0x0000
 80a0e18:	080601ac 	.word	0x080601ac

080a0e1c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0e1c:	b508      	push	{r3, lr}
 80a0e1e:	4b03      	ldr	r3, [pc, #12]	; (80a0e2c <hal_i2c_request_ex+0x10>)
 80a0e20:	681b      	ldr	r3, [r3, #0]
 80a0e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e26:	9301      	str	r3, [sp, #4]
 80a0e28:	bd08      	pop	{r3, pc}
 80a0e2a:	0000      	.short	0x0000
 80a0e2c:	080601ac 	.word	0x080601ac

080a0e30 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <hal_spi_init+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	69db      	ldr	r3, [r3, #28]
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601b4 	.word	0x080601b4

080a0e40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <hal_spi_is_enabled+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6a1b      	ldr	r3, [r3, #32]
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601b4 	.word	0x080601b4

080a0e50 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <hal_usart_init+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	699b      	ldr	r3, [r3, #24]
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601c4 	.word	0x080601c4

080a0e60 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <hal_usart_write+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601c4 	.word	0x080601c4

080a0e70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <hal_usart_available+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601c4 	.word	0x080601c4

080a0e80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <hal_usart_read+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601c4 	.word	0x080601c4

080a0e90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <hal_usart_peek+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601c4 	.word	0x080601c4

080a0ea0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <hal_usart_flush+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601c4 	.word	0x080601c4

080a0eb0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <hal_usart_is_enabled+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601c4 	.word	0x080601c4

080a0ec0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <hal_usart_available_data_for_write+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601c4 	.word	0x080601c4

080a0ed0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <HAL_USB_USART_Init+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	681b      	ldr	r3, [r3, #0]
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601d8 	.word	0x080601d8

080a0ee0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <HAL_USB_USART_Begin+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	685b      	ldr	r3, [r3, #4]
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601d8 	.word	0x080601d8

080a0ef0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <HAL_USB_USART_Available_Data+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	691b      	ldr	r3, [r3, #16]
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601d8 	.word	0x080601d8

080a0f00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	695b      	ldr	r3, [r3, #20]
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601d8 	.word	0x080601d8

080a0f10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <HAL_USB_USART_Receive_Data+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	699b      	ldr	r3, [r3, #24]
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601d8 	.word	0x080601d8

080a0f20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <HAL_USB_USART_Send_Data+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	69db      	ldr	r3, [r3, #28]
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601d8 	.word	0x080601d8

080a0f30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <HAL_USB_USART_Flush_Data+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	6a1b      	ldr	r3, [r3, #32]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601d8 	.word	0x080601d8

080a0f40 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <inet_gethostbyname+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601c0 	.word	0x080601c0

080a0f50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <set_system_mode+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	685b      	ldr	r3, [r3, #4]
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601a4 	.word	0x080601a4

080a0f60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <system_delay_ms+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	695b      	ldr	r3, [r3, #20]
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601a4 	.word	0x080601a4

080a0f70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b03      	ldr	r3, [pc, #12]	; (80a0f80 <system_ctrl_set_app_request_handler+0x10>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f7a:	9301      	str	r3, [sp, #4]
 80a0f7c:	bd08      	pop	{r3, pc}
 80a0f7e:	0000      	.short	0x0000
 80a0f80:	080601a4 	.word	0x080601a4

080a0f84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b03      	ldr	r3, [pc, #12]	; (80a0f94 <system_ctrl_set_result+0x10>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f8e:	9301      	str	r3, [sp, #4]
 80a0f90:	bd08      	pop	{r3, pc}
 80a0f92:	0000      	.short	0x0000
 80a0f94:	080601a4 	.word	0x080601a4

080a0f98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	080601cc 	.word	0x080601cc

080a0fa8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <network_connect+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	685b      	ldr	r3, [r3, #4]
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	080601c8 	.word	0x080601c8

080a0fb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <network_connecting+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	689b      	ldr	r3, [r3, #8]
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601c8 	.word	0x080601c8

080a0fc8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <network_disconnect+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	68db      	ldr	r3, [r3, #12]
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601c8 	.word	0x080601c8

080a0fd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <network_ready+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	691b      	ldr	r3, [r3, #16]
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601c8 	.word	0x080601c8

080a0fe8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <network_on+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	695b      	ldr	r3, [r3, #20]
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601c8 	.word	0x080601c8

080a0ff8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <network_off+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	699b      	ldr	r3, [r3, #24]
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601c8 	.word	0x080601c8

080a1008 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <network_listen+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	69db      	ldr	r3, [r3, #28]
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601c8 	.word	0x080601c8

080a1018 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1018:	b508      	push	{r3, lr}
 80a101a:	4b02      	ldr	r3, [pc, #8]	; (80a1024 <network_listening+0xc>)
 80a101c:	681b      	ldr	r3, [r3, #0]
 80a101e:	6a1b      	ldr	r3, [r3, #32]
 80a1020:	9301      	str	r3, [sp, #4]
 80a1022:	bd08      	pop	{r3, pc}
 80a1024:	080601c8 	.word	0x080601c8

080a1028 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <network_set_listen_timeout+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601c8 	.word	0x080601c8

080a1038 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <network_get_listen_timeout+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601c8 	.word	0x080601c8

080a1048 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b02      	ldr	r3, [pc, #8]	; (80a1054 <network_is_on+0xc>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1050:	9301      	str	r3, [sp, #4]
 80a1052:	bd08      	pop	{r3, pc}
 80a1054:	080601c8 	.word	0x080601c8

080a1058 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1058:	b508      	push	{r3, lr}
 80a105a:	4b02      	ldr	r3, [pc, #8]	; (80a1064 <network_is_off+0xc>)
 80a105c:	681b      	ldr	r3, [r3, #0]
 80a105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1060:	9301      	str	r3, [sp, #4]
 80a1062:	bd08      	pop	{r3, pc}
 80a1064:	080601c8 	.word	0x080601c8

080a1068 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <malloc+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	681b      	ldr	r3, [r3, #0]
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601a0 	.word	0x080601a0

080a1078 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1078:	b508      	push	{r3, lr}
 80a107a:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <free+0xc>)
 80a107c:	681b      	ldr	r3, [r3, #0]
 80a107e:	685b      	ldr	r3, [r3, #4]
 80a1080:	9301      	str	r3, [sp, #4]
 80a1082:	bd08      	pop	{r3, pc}
 80a1084:	080601a0 	.word	0x080601a0

080a1088 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <newlib_impure_ptr_callback+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601a0 	.word	0x080601a0

080a1098 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1098:	2100      	movs	r1, #0
 80a109a:	f7ff bf61 	b.w	80a0f60 <system_delay_ms>

080a109e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a109e:	4770      	bx	lr

080a10a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a10a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10a2:	4606      	mov	r6, r0
 80a10a4:	4615      	mov	r5, r2
 80a10a6:	460c      	mov	r4, r1
 80a10a8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10aa:	42bc      	cmp	r4, r7
 80a10ac:	d006      	beq.n	80a10bc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10ae:	6833      	ldr	r3, [r6, #0]
 80a10b0:	4630      	mov	r0, r6
 80a10b2:	689b      	ldr	r3, [r3, #8]
 80a10b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10b8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a10ba:	e7f6      	b.n	80a10aa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a10bc:	4628      	mov	r0, r5
 80a10be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10c0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a10c0:	2200      	movs	r2, #0
 80a10c2:	7c00      	ldrb	r0, [r0, #16]
 80a10c4:	f7ff be70 	b.w	80a0da8 <hal_i2c_write>

080a10c8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a10c8:	2100      	movs	r1, #0
 80a10ca:	7c00      	ldrb	r0, [r0, #16]
 80a10cc:	f7ff be74 	b.w	80a0db8 <hal_i2c_available>

080a10d0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a10d0:	2100      	movs	r1, #0
 80a10d2:	7c00      	ldrb	r0, [r0, #16]
 80a10d4:	f7ff be78 	b.w	80a0dc8 <hal_i2c_read>

080a10d8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a10d8:	2100      	movs	r1, #0
 80a10da:	7c00      	ldrb	r0, [r0, #16]
 80a10dc:	f7ff be7c 	b.w	80a0dd8 <hal_i2c_peek>

080a10e0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a10e0:	2100      	movs	r1, #0
 80a10e2:	7c00      	ldrb	r0, [r0, #16]
 80a10e4:	f7ff be80 	b.w	80a0de8 <hal_i2c_flush>

080a10e8 <_ZN7TwoWireD0Ev>:
 80a10e8:	b510      	push	{r4, lr}
 80a10ea:	4604      	mov	r4, r0
 80a10ec:	2114      	movs	r1, #20
 80a10ee:	f000 fcd7 	bl	80a1aa0 <_ZdlPvj>
 80a10f2:	4620      	mov	r0, r4
 80a10f4:	bd10      	pop	{r4, pc}
	...

080a10f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a10f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a10fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10fe:	4604      	mov	r4, r0
 80a1100:	4608      	mov	r0, r1
 80a1102:	2100      	movs	r1, #0
 80a1104:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1108:	4b03      	ldr	r3, [pc, #12]	; (80a1118 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a110a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a110c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a110e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1110:	f7ff fe7a 	bl	80a0e08 <hal_i2c_init>
}
 80a1114:	4620      	mov	r0, r4
 80a1116:	bd10      	pop	{r4, pc}
 80a1118:	080a1d88 	.word	0x080a1d88

080a111c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a111c:	2200      	movs	r2, #0
 80a111e:	7c00      	ldrb	r0, [r0, #16]
 80a1120:	f7ff be22 	b.w	80a0d68 <hal_i2c_set_speed>

080a1124 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1124:	2300      	movs	r3, #0
 80a1126:	7c00      	ldrb	r0, [r0, #16]
 80a1128:	461a      	mov	r2, r3
 80a112a:	4619      	mov	r1, r3
 80a112c:	f7ff be24 	b.w	80a0d78 <hal_i2c_begin>

080a1130 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a1132:	2200      	movs	r2, #0
 80a1134:	2314      	movs	r3, #20
 80a1136:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a113a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a113e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1140:	7c00      	ldrb	r0, [r0, #16]
 80a1142:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1146:	684b      	ldr	r3, [r1, #4]
 80a1148:	9303      	str	r3, [sp, #12]
 80a114a:	68cb      	ldr	r3, [r1, #12]
 80a114c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a114e:	7a0b      	ldrb	r3, [r1, #8]
 80a1150:	a901      	add	r1, sp, #4
 80a1152:	9305      	str	r3, [sp, #20]
 80a1154:	f7ff fe62 	bl	80a0e1c <hal_i2c_request_ex>
}
 80a1158:	b007      	add	sp, #28
 80a115a:	f85d fb04 	ldr.w	pc, [sp], #4

080a115e <_ZN7TwoWire11requestFromEhjh>:
{
 80a115e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1160:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1162:	f88d 1000 	strb.w	r1, [sp]
 80a1166:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a116a:	bf18      	it	ne
 80a116c:	2301      	movne	r3, #1
 80a116e:	9103      	str	r1, [sp, #12]
 80a1170:	4669      	mov	r1, sp
    size_ = size;
 80a1172:	9201      	str	r2, [sp, #4]
 80a1174:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1178:	f7ff ffda 	bl	80a1130 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a117c:	b005      	add	sp, #20
 80a117e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1182 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a1182:	2301      	movs	r3, #1
 80a1184:	f7ff bfeb 	b.w	80a115e <_ZN7TwoWire11requestFromEhjh>

080a1188 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1188:	2200      	movs	r2, #0
 80a118a:	7c00      	ldrb	r0, [r0, #16]
 80a118c:	f7ff bdfc 	b.w	80a0d88 <hal_i2c_begin_transmission>

080a1190 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a1190:	b2c9      	uxtb	r1, r1
 80a1192:	f7ff bff9 	b.w	80a1188 <_ZN7TwoWire17beginTransmissionEh>

080a1196 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1196:	2200      	movs	r2, #0
 80a1198:	7c00      	ldrb	r0, [r0, #16]
 80a119a:	f7ff bdfd 	b.w	80a0d98 <hal_i2c_end_transmission>

080a119e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a119e:	2101      	movs	r1, #1
 80a11a0:	f7ff bff9 	b.w	80a1196 <_ZN7TwoWire15endTransmissionEh>

080a11a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a11a4:	4770      	bx	lr

080a11a6 <_ZN9IPAddressD0Ev>:
 80a11a6:	b510      	push	{r4, lr}
 80a11a8:	4604      	mov	r4, r0
 80a11aa:	2118      	movs	r1, #24
 80a11ac:	f000 fc78 	bl	80a1aa0 <_ZdlPvj>
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	bd10      	pop	{r4, pc}

080a11b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a11b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11b6:	460e      	mov	r6, r1
 80a11b8:	2400      	movs	r4, #0
 80a11ba:	f100 0708 	add.w	r7, r0, #8
 80a11be:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a11c0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a11c4:	220a      	movs	r2, #10
 80a11c6:	4630      	mov	r0, r6
 80a11c8:	f000 f90b 	bl	80a13e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a11cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a11ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a11d0:	d101      	bne.n	80a11d6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a11d2:	4620      	mov	r0, r4
 80a11d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a11d6:	2c00      	cmp	r4, #0
 80a11d8:	d0f2      	beq.n	80a11c0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a11da:	212e      	movs	r1, #46	; 0x2e
 80a11dc:	4630      	mov	r0, r6
 80a11de:	f000 f8e1 	bl	80a13a4 <_ZN5Print5printEc>
 80a11e2:	4404      	add	r4, r0
 80a11e4:	e7ec      	b.n	80a11c0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a11e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a11e8:	b510      	push	{r4, lr}
 80a11ea:	4604      	mov	r4, r0
 80a11ec:	4b04      	ldr	r3, [pc, #16]	; (80a1200 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a11ee:	2211      	movs	r2, #17
 80a11f0:	2100      	movs	r1, #0
 80a11f2:	f840 3b04 	str.w	r3, [r0], #4
 80a11f6:	f000 fc6b 	bl	80a1ad0 <memset>
}
 80a11fa:	4620      	mov	r0, r4
 80a11fc:	bd10      	pop	{r4, pc}
 80a11fe:	bf00      	nop
 80a1200:	080a1db0 	.word	0x080a1db0

080a1204 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1204:	4603      	mov	r3, r0
 80a1206:	4a07      	ldr	r2, [pc, #28]	; (80a1224 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1208:	b510      	push	{r4, lr}
 80a120a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a120e:	f101 0210 	add.w	r2, r1, #16
 80a1212:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1216:	4291      	cmp	r1, r2
 80a1218:	f843 4b04 	str.w	r4, [r3], #4
 80a121c:	d1f9      	bne.n	80a1212 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a121e:	780a      	ldrb	r2, [r1, #0]
 80a1220:	701a      	strb	r2, [r3, #0]
}
 80a1222:	bd10      	pop	{r4, pc}
 80a1224:	080a1db0 	.word	0x080a1db0

080a1228 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1228:	4a02      	ldr	r2, [pc, #8]	; (80a1234 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a122a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a122e:	2204      	movs	r2, #4
 80a1230:	7502      	strb	r2, [r0, #20]
}
 80a1232:	4770      	bx	lr
 80a1234:	080a1db0 	.word	0x080a1db0

080a1238 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1238:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a123a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a123e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1242:	2304      	movs	r3, #4
 80a1244:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1248:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a124c:	6044      	str	r4, [r0, #4]
 80a124e:	7503      	strb	r3, [r0, #20]
}
 80a1250:	bd10      	pop	{r4, pc}
	...

080a1254 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1256:	4d04      	ldr	r5, [pc, #16]	; (80a1268 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1258:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a125a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a125e:	9500      	str	r5, [sp, #0]
 80a1260:	f7ff ffea 	bl	80a1238 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1264:	b003      	add	sp, #12
 80a1266:	bd30      	pop	{r4, r5, pc}
 80a1268:	080a1db0 	.word	0x080a1db0

080a126c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a126c:	4b01      	ldr	r3, [pc, #4]	; (80a1274 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a126e:	4a02      	ldr	r2, [pc, #8]	; (80a1278 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1270:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1272:	4770      	bx	lr
 80a1274:	20000710 	.word	0x20000710
 80a1278:	080a1dbc 	.word	0x080a1dbc

080a127c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a127c:	2300      	movs	r3, #0
 80a127e:	6840      	ldr	r0, [r0, #4]
 80a1280:	461a      	mov	r2, r3
 80a1282:	f7ff be91 	b.w	80a0fa8 <network_connect>

080a1286 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1286:	2200      	movs	r2, #0
 80a1288:	2102      	movs	r1, #2
 80a128a:	6840      	ldr	r0, [r0, #4]
 80a128c:	f7ff be9c 	b.w	80a0fc8 <network_disconnect>

080a1290 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1290:	2200      	movs	r2, #0
 80a1292:	6840      	ldr	r0, [r0, #4]
 80a1294:	4611      	mov	r1, r2
 80a1296:	f7ff be8f 	b.w	80a0fb8 <network_connecting>

080a129a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a129a:	2200      	movs	r2, #0
 80a129c:	6840      	ldr	r0, [r0, #4]
 80a129e:	4611      	mov	r1, r2
 80a12a0:	f7ff be9a 	b.w	80a0fd8 <network_ready>

080a12a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a12a4:	2300      	movs	r3, #0
 80a12a6:	6840      	ldr	r0, [r0, #4]
 80a12a8:	461a      	mov	r2, r3
 80a12aa:	4619      	mov	r1, r3
 80a12ac:	f7ff be9c 	b.w	80a0fe8 <network_on>

080a12b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a12b0:	2300      	movs	r3, #0
 80a12b2:	6840      	ldr	r0, [r0, #4]
 80a12b4:	461a      	mov	r2, r3
 80a12b6:	4619      	mov	r1, r3
 80a12b8:	f7ff be9e 	b.w	80a0ff8 <network_off>

080a12bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a12bc:	2100      	movs	r1, #0
 80a12be:	6840      	ldr	r0, [r0, #4]
 80a12c0:	f7ff bec2 	b.w	80a1048 <network_is_on>

080a12c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a12c4:	2100      	movs	r1, #0
 80a12c6:	6840      	ldr	r0, [r0, #4]
 80a12c8:	f7ff bec6 	b.w	80a1058 <network_is_off>

080a12cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	6840      	ldr	r0, [r0, #4]
 80a12d0:	f081 0101 	eor.w	r1, r1, #1
 80a12d4:	f7ff be98 	b.w	80a1008 <network_listen>

080a12d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a12d8:	2200      	movs	r2, #0
 80a12da:	6840      	ldr	r0, [r0, #4]
 80a12dc:	f7ff bea4 	b.w	80a1028 <network_set_listen_timeout>

080a12e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a12e0:	2200      	movs	r2, #0
 80a12e2:	6840      	ldr	r0, [r0, #4]
 80a12e4:	4611      	mov	r1, r2
 80a12e6:	f7ff bea7 	b.w	80a1038 <network_get_listen_timeout>

080a12ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a12ea:	2200      	movs	r2, #0
 80a12ec:	6840      	ldr	r0, [r0, #4]
 80a12ee:	4611      	mov	r1, r2
 80a12f0:	f7ff be92 	b.w	80a1018 <network_listening>

080a12f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a12f4:	b570      	push	{r4, r5, r6, lr}
 80a12f6:	4615      	mov	r5, r2
 80a12f8:	b08e      	sub	sp, #56	; 0x38
 80a12fa:	4604      	mov	r4, r0
    IPAddress addr;
 80a12fc:	a808      	add	r0, sp, #32
 80a12fe:	f7ff ff73 	bl	80a11e8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1302:	2211      	movs	r2, #17
 80a1304:	2100      	movs	r1, #0
 80a1306:	a803      	add	r0, sp, #12
 80a1308:	f000 fbe2 	bl	80a1ad0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a130c:	2600      	movs	r6, #0
 80a130e:	4628      	mov	r0, r5
 80a1310:	f000 fc0a 	bl	80a1b28 <strlen>
 80a1314:	4b0a      	ldr	r3, [pc, #40]	; (80a1340 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1316:	9600      	str	r6, [sp, #0]
 80a1318:	b281      	uxth	r1, r0
 80a131a:	685b      	ldr	r3, [r3, #4]
 80a131c:	4628      	mov	r0, r5
 80a131e:	aa03      	add	r2, sp, #12
 80a1320:	f7ff fe0e 	bl	80a0f40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1324:	b130      	cbz	r0, 80a1334 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1326:	4631      	mov	r1, r6
 80a1328:	4620      	mov	r0, r4
 80a132a:	f7ff ff7d 	bl	80a1228 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a132e:	4620      	mov	r0, r4
 80a1330:	b00e      	add	sp, #56	; 0x38
 80a1332:	bd70      	pop	{r4, r5, r6, pc}
 80a1334:	4620      	mov	r0, r4
 80a1336:	a903      	add	r1, sp, #12
 80a1338:	f7ff ff64 	bl	80a1204 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a133c:	e7f7      	b.n	80a132e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a133e:	bf00      	nop
 80a1340:	20000b94 	.word	0x20000b94

080a1344 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1344:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1346:	4a03      	ldr	r2, [pc, #12]	; (80a1354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1348:	601a      	str	r2, [r3, #0]
 80a134a:	2200      	movs	r2, #0
 80a134c:	605a      	str	r2, [r3, #4]

} // spark
 80a134e:	4770      	bx	lr
 80a1350:	20000714 	.word	0x20000714
 80a1354:	080a1dc8 	.word	0x080a1dc8

080a1358 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a135a:	4606      	mov	r6, r0
 80a135c:	460d      	mov	r5, r1
  size_t n = 0;
 80a135e:	2400      	movs	r4, #0
 80a1360:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1362:	42bd      	cmp	r5, r7
 80a1364:	d00c      	beq.n	80a1380 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1366:	6833      	ldr	r3, [r6, #0]
 80a1368:	4630      	mov	r0, r6
 80a136a:	689b      	ldr	r3, [r3, #8]
 80a136c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1370:	4798      	blx	r3
     if (chunk>=0)
 80a1372:	1e03      	subs	r3, r0, #0
 80a1374:	db01      	blt.n	80a137a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1376:	441c      	add	r4, r3
  while (size--) {
 80a1378:	e7f3      	b.n	80a1362 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a137a:	2c00      	cmp	r4, #0
 80a137c:	bf08      	it	eq
 80a137e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1380:	4620      	mov	r0, r4
 80a1382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1384 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1384:	b570      	push	{r4, r5, r6, lr}
 80a1386:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1388:	460c      	mov	r4, r1
    }
 80a138a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a138c:	b149      	cbz	r1, 80a13a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a138e:	f000 fbcb 	bl	80a1b28 <strlen>
 80a1392:	682b      	ldr	r3, [r5, #0]
 80a1394:	4602      	mov	r2, r0
 80a1396:	4621      	mov	r1, r4
 80a1398:	4628      	mov	r0, r5
    }
 80a139a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a139e:	68db      	ldr	r3, [r3, #12]
 80a13a0:	4718      	bx	r3
    }
 80a13a2:	bd70      	pop	{r4, r5, r6, pc}

080a13a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a13a4:	6803      	ldr	r3, [r0, #0]
 80a13a6:	689b      	ldr	r3, [r3, #8]
 80a13a8:	4718      	bx	r3

080a13aa <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80a13aa:	b508      	push	{r3, lr}
  return write(str);
 80a13ac:	f7ff ffea 	bl	80a1384 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
 80a13b0:	bd08      	pop	{r3, pc}

080a13b2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80a13b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a13b4:	210d      	movs	r1, #13
{
 80a13b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a13b8:	f7ff fff4 	bl	80a13a4 <_ZN5Print5printEc>
  n += print('\n');
 80a13bc:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a13be:	4604      	mov	r4, r0
  n += print('\n');
 80a13c0:	4628      	mov	r0, r5
 80a13c2:	f7ff ffef 	bl	80a13a4 <_ZN5Print5printEc>
  return n;
}
 80a13c6:	4420      	add	r0, r4
 80a13c8:	bd38      	pop	{r3, r4, r5, pc}

080a13ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a13ca:	b538      	push	{r3, r4, r5, lr}
 80a13cc:	4605      	mov	r5, r0
  return write(str);
 80a13ce:	f7ff ffd9 	bl	80a1384 <_ZN5Print5writeEPKc>
 80a13d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a13d4:	4628      	mov	r0, r5
 80a13d6:	f7ff ffec 	bl	80a13b2 <_ZN5Print7printlnEv>
  return n;
}
 80a13da:	4420      	add	r0, r4
 80a13dc:	bd38      	pop	{r3, r4, r5, pc}

080a13de <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a13de:	f7ff bff4 	b.w	80a13ca <_ZN5Print7printlnEPKc>

080a13e2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a13e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a13e4:	2a01      	cmp	r2, #1
 80a13e6:	bf98      	it	ls
 80a13e8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a13ea:	b530      	push	{r4, r5, lr}
 80a13ec:	b08b      	sub	sp, #44	; 0x2c
 80a13ee:	460c      	mov	r4, r1
  *str = '\0';
 80a13f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a13f4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a13f6:	4625      	mov	r5, r4
 80a13f8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a13fc:	fb04 5312 	mls	r3, r4, r2, r5
 80a1400:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1402:	2b09      	cmp	r3, #9
 80a1404:	bf94      	ite	ls
 80a1406:	3330      	addls	r3, #48	; 0x30
 80a1408:	3337      	addhi	r3, #55	; 0x37
 80a140a:	b2db      	uxtb	r3, r3
  } while(n);
 80a140c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a140e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1412:	d9f0      	bls.n	80a13f6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1414:	f7ff ffb6 	bl	80a1384 <_ZN5Print5writeEPKc>
}
 80a1418:	b00b      	add	sp, #44	; 0x2c
 80a141a:	bd30      	pop	{r4, r5, pc}

080a141c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a141c:	2200      	movs	r2, #0
 80a141e:	4b01      	ldr	r3, [pc, #4]	; (80a1424 <_GLOBAL__sub_I_RGB+0x8>)
 80a1420:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1422:	4770      	bx	lr
 80a1424:	2000071c 	.word	0x2000071c

080a1428 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1428:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a142a:	2600      	movs	r6, #0
 80a142c:	4604      	mov	r4, r0
 80a142e:	460d      	mov	r5, r1
 80a1430:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1434:	f7ff fc60 	bl	80a0cf8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1438:	4628      	mov	r0, r5
    _spi = spi;
 80a143a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a143c:	f7ff fcf8 	bl	80a0e30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1440:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1442:	6066      	str	r6, [r4, #4]
}
 80a1444:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1448 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1448:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a144a:	2000      	movs	r0, #0
 80a144c:	4b04      	ldr	r3, [pc, #16]	; (80a1460 <_GLOBAL__sub_I_System+0x18>)
 80a144e:	601a      	str	r2, [r3, #0]
 80a1450:	4b04      	ldr	r3, [pc, #16]	; (80a1464 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1452:	4a05      	ldr	r2, [pc, #20]	; (80a1468 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1454:	6018      	str	r0, [r3, #0]
 80a1456:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1458:	7198      	strb	r0, [r3, #6]
 80a145a:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a145c:	f7ff bd78 	b.w	80a0f50 <set_system_mode>
 80a1460:	20000738 	.word	0x20000738
 80a1464:	2000072c 	.word	0x2000072c
 80a1468:	ffff0000 	.word	0xffff0000

080a146c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a146c:	4b02      	ldr	r3, [pc, #8]	; (80a1478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a146e:	681a      	ldr	r2, [r3, #0]
 80a1470:	4b02      	ldr	r3, [pc, #8]	; (80a147c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1472:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1474:	4770      	bx	lr
 80a1476:	bf00      	nop
 80a1478:	20000010 	.word	0x20000010
 80a147c:	2000073c 	.word	0x2000073c

080a1480 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1480:	4770      	bx	lr

080a1482 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1482:	7441      	strb	r1, [r0, #17]
}
 80a1484:	4770      	bx	lr

080a1486 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1486:	4770      	bx	lr

080a1488 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1488:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a148a:	7c00      	ldrb	r0, [r0, #16]
 80a148c:	f7ff fd18 	bl	80a0ec0 <hal_usart_available_data_for_write>
}
 80a1490:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1494:	bd08      	pop	{r3, pc}

080a1496 <_ZN11USARTSerial9availableEv>:
{
 80a1496:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1498:	7c00      	ldrb	r0, [r0, #16]
 80a149a:	f7ff fce9 	bl	80a0e70 <hal_usart_available>
}
 80a149e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14a2:	bd08      	pop	{r3, pc}

080a14a4 <_ZN11USARTSerial4peekEv>:
{
 80a14a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a14a6:	7c00      	ldrb	r0, [r0, #16]
 80a14a8:	f7ff fcf2 	bl	80a0e90 <hal_usart_peek>
}
 80a14ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a14b0:	bd08      	pop	{r3, pc}

080a14b2 <_ZN11USARTSerial4readEv>:
{
 80a14b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a14b4:	7c00      	ldrb	r0, [r0, #16]
 80a14b6:	f7ff fce3 	bl	80a0e80 <hal_usart_read>
}
 80a14ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a14be:	bd08      	pop	{r3, pc}

080a14c0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a14c0:	7c00      	ldrb	r0, [r0, #16]
 80a14c2:	f7ff bced 	b.w	80a0ea0 <hal_usart_flush>

080a14c6 <_ZN11USARTSerial5writeEh>:
{
 80a14c6:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14c8:	7c46      	ldrb	r6, [r0, #17]
{
 80a14ca:	4604      	mov	r4, r0
 80a14cc:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14ce:	b12e      	cbz	r6, 80a14dc <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a14d0:	4629      	mov	r1, r5
 80a14d2:	7c20      	ldrb	r0, [r4, #16]
}
 80a14d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a14d8:	f7ff bcc2 	b.w	80a0e60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14dc:	7c00      	ldrb	r0, [r0, #16]
 80a14de:	f7ff fcef 	bl	80a0ec0 <hal_usart_available_data_for_write>
 80a14e2:	2800      	cmp	r0, #0
 80a14e4:	dcf4      	bgt.n	80a14d0 <_ZN11USARTSerial5writeEh+0xa>
}
 80a14e6:	4630      	mov	r0, r6
 80a14e8:	bd70      	pop	{r4, r5, r6, pc}

080a14ea <_ZN11USARTSerialD0Ev>:
 80a14ea:	b510      	push	{r4, lr}
 80a14ec:	4604      	mov	r4, r0
 80a14ee:	2114      	movs	r1, #20
 80a14f0:	f000 fad6 	bl	80a1aa0 <_ZdlPvj>
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	bd10      	pop	{r4, pc}

080a14f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a14f8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a14fc:	b510      	push	{r4, lr}
 80a14fe:	4604      	mov	r4, r0
 80a1500:	4608      	mov	r0, r1
 80a1502:	4611      	mov	r1, r2
 80a1504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1508:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a150c:	4a04      	ldr	r2, [pc, #16]	; (80a1520 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a150e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1510:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1512:	2201      	movs	r2, #1
 80a1514:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1516:	461a      	mov	r2, r3
 80a1518:	f7ff fc9a 	bl	80a0e50 <hal_usart_init>
}
 80a151c:	4620      	mov	r0, r4
 80a151e:	bd10      	pop	{r4, pc}
 80a1520:	080a1e20 	.word	0x080a1e20

080a1524 <_Z22__fetch_global_Serial1v>:
{
 80a1524:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1526:	4d0c      	ldr	r5, [pc, #48]	; (80a1558 <_Z22__fetch_global_Serial1v+0x34>)
 80a1528:	7829      	ldrb	r1, [r5, #0]
 80a152a:	f3bf 8f5b 	dmb	ish
 80a152e:	f011 0401 	ands.w	r4, r1, #1
 80a1532:	d10f      	bne.n	80a1554 <_Z22__fetch_global_Serial1v+0x30>
 80a1534:	4628      	mov	r0, r5
 80a1536:	f7fe fdb2 	bl	80a009e <__cxa_guard_acquire>
 80a153a:	b158      	cbz	r0, 80a1554 <_Z22__fetch_global_Serial1v+0x30>
 80a153c:	4621      	mov	r1, r4
 80a153e:	4b07      	ldr	r3, [pc, #28]	; (80a155c <_Z22__fetch_global_Serial1v+0x38>)
 80a1540:	4a07      	ldr	r2, [pc, #28]	; (80a1560 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1542:	4808      	ldr	r0, [pc, #32]	; (80a1564 <_Z22__fetch_global_Serial1v+0x40>)
 80a1544:	f7ff ffd8 	bl	80a14f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1548:	4628      	mov	r0, r5
 80a154a:	f7fe fdad 	bl	80a00a8 <__cxa_guard_release>
 80a154e:	4806      	ldr	r0, [pc, #24]	; (80a1568 <_Z22__fetch_global_Serial1v+0x44>)
 80a1550:	f000 faaa 	bl	80a1aa8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1554:	4803      	ldr	r0, [pc, #12]	; (80a1564 <_Z22__fetch_global_Serial1v+0x40>)
 80a1556:	bd38      	pop	{r3, r4, r5, pc}
 80a1558:	20000740 	.word	0x20000740
 80a155c:	200007c8 	.word	0x200007c8
 80a1560:	20000744 	.word	0x20000744
 80a1564:	2000084c 	.word	0x2000084c
 80a1568:	080a1487 	.word	0x080a1487

080a156c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a156c:	7441      	strb	r1, [r0, #17]
}
 80a156e:	4770      	bx	lr

080a1570 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1570:	4770      	bx	lr

080a1572 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1572:	4770      	bx	lr

080a1574 <_ZN9USBSerial4readEv>:
{
 80a1574:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1576:	2100      	movs	r1, #0
 80a1578:	7c00      	ldrb	r0, [r0, #16]
 80a157a:	f7ff fcc9 	bl	80a0f10 <HAL_USB_USART_Receive_Data>
}
 80a157e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1582:	bd08      	pop	{r3, pc}

080a1584 <_ZN9USBSerial4peekEv>:
{
 80a1584:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1586:	2101      	movs	r1, #1
 80a1588:	7c00      	ldrb	r0, [r0, #16]
 80a158a:	f7ff fcc1 	bl	80a0f10 <HAL_USB_USART_Receive_Data>
}
 80a158e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1592:	bd08      	pop	{r3, pc}

080a1594 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1594:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1596:	7c00      	ldrb	r0, [r0, #16]
 80a1598:	f7ff fcb2 	bl	80a0f00 <HAL_USB_USART_Available_Data_For_Write>
}
 80a159c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15a0:	bd08      	pop	{r3, pc}

080a15a2 <_ZN9USBSerial9availableEv>:
{
 80a15a2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a15a4:	7c00      	ldrb	r0, [r0, #16]
 80a15a6:	f7ff fca3 	bl	80a0ef0 <HAL_USB_USART_Available_Data>
}
 80a15aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15ae:	bd08      	pop	{r3, pc}

080a15b0 <_ZN9USBSerial5writeEh>:
{
 80a15b0:	b538      	push	{r3, r4, r5, lr}
 80a15b2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a15b4:	7c00      	ldrb	r0, [r0, #16]
{
 80a15b6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a15b8:	f7ff fca2 	bl	80a0f00 <HAL_USB_USART_Available_Data_For_Write>
 80a15bc:	2800      	cmp	r0, #0
 80a15be:	dc01      	bgt.n	80a15c4 <_ZN9USBSerial5writeEh+0x14>
 80a15c0:	7c60      	ldrb	r0, [r4, #17]
 80a15c2:	b128      	cbz	r0, 80a15d0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a15c4:	4629      	mov	r1, r5
 80a15c6:	7c20      	ldrb	r0, [r4, #16]
 80a15c8:	f7ff fcaa 	bl	80a0f20 <HAL_USB_USART_Send_Data>
 80a15cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a15d0:	bd38      	pop	{r3, r4, r5, pc}

080a15d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a15d2:	7c00      	ldrb	r0, [r0, #16]
 80a15d4:	f7ff bcac 	b.w	80a0f30 <HAL_USB_USART_Flush_Data>

080a15d8 <_ZN9USBSerialD0Ev>:
 80a15d8:	b510      	push	{r4, lr}
 80a15da:	4604      	mov	r4, r0
 80a15dc:	2114      	movs	r1, #20
 80a15de:	f000 fa5f 	bl	80a1aa0 <_ZdlPvj>
 80a15e2:	4620      	mov	r0, r4
 80a15e4:	bd10      	pop	{r4, pc}

080a15e6 <__tcf_1>:
 80a15e6:	4770      	bx	lr

080a15e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15e8:	b510      	push	{r4, lr}
 80a15ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15ee:	4604      	mov	r4, r0
 80a15f0:	4608      	mov	r0, r1
 80a15f2:	2100      	movs	r1, #0
 80a15f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15f8:	4b04      	ldr	r3, [pc, #16]	; (80a160c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a15fa:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15fc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a15fe:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1600:	4611      	mov	r1, r2
  _blocking = true;
 80a1602:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1604:	f7ff fc64 	bl	80a0ed0 <HAL_USB_USART_Init>
}
 80a1608:	4620      	mov	r0, r4
 80a160a:	bd10      	pop	{r4, pc}
 80a160c:	080a1e50 	.word	0x080a1e50

080a1610 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1610:	2200      	movs	r2, #0
 80a1612:	7c00      	ldrb	r0, [r0, #16]
 80a1614:	f7ff bc64 	b.w	80a0ee0 <HAL_USB_USART_Begin>

080a1618 <_Z19acquireSerialBufferv>:
{
 80a1618:	b510      	push	{r4, lr}
 80a161a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a161c:	2214      	movs	r2, #20
 80a161e:	2100      	movs	r1, #0
 80a1620:	f000 fa56 	bl	80a1ad0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1624:	4b05      	ldr	r3, [pc, #20]	; (80a163c <_Z19acquireSerialBufferv+0x24>)
}
 80a1626:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1628:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a162a:	4b05      	ldr	r3, [pc, #20]	; (80a1640 <_Z19acquireSerialBufferv+0x28>)
 80a162c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a162e:	f240 1301 	movw	r3, #257	; 0x101
 80a1632:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1634:	2381      	movs	r3, #129	; 0x81
 80a1636:	8223      	strh	r3, [r4, #16]
}
 80a1638:	bd10      	pop	{r4, pc}
 80a163a:	bf00      	nop
 80a163c:	20000890 	.word	0x20000890
 80a1640:	20000991 	.word	0x20000991

080a1644 <_Z16_fetch_usbserialv>:
{
 80a1644:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1646:	4d0e      	ldr	r5, [pc, #56]	; (80a1680 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1648:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a164a:	a801      	add	r0, sp, #4
 80a164c:	f7ff ffe4 	bl	80a1618 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1650:	7829      	ldrb	r1, [r5, #0]
 80a1652:	f3bf 8f5b 	dmb	ish
 80a1656:	f011 0401 	ands.w	r4, r1, #1
 80a165a:	d10e      	bne.n	80a167a <_Z16_fetch_usbserialv+0x36>
 80a165c:	4628      	mov	r0, r5
 80a165e:	f7fe fd1e 	bl	80a009e <__cxa_guard_acquire>
 80a1662:	b150      	cbz	r0, 80a167a <_Z16_fetch_usbserialv+0x36>
 80a1664:	4621      	mov	r1, r4
 80a1666:	aa01      	add	r2, sp, #4
 80a1668:	4806      	ldr	r0, [pc, #24]	; (80a1684 <_Z16_fetch_usbserialv+0x40>)
 80a166a:	f7ff ffbd 	bl	80a15e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a166e:	4628      	mov	r0, r5
 80a1670:	f7fe fd1a 	bl	80a00a8 <__cxa_guard_release>
 80a1674:	4804      	ldr	r0, [pc, #16]	; (80a1688 <_Z16_fetch_usbserialv+0x44>)
 80a1676:	f000 fa17 	bl	80a1aa8 <atexit>
	return _usbserial;
}
 80a167a:	4802      	ldr	r0, [pc, #8]	; (80a1684 <_Z16_fetch_usbserialv+0x40>)
 80a167c:	b007      	add	sp, #28
 80a167e:	bd30      	pop	{r4, r5, pc}
 80a1680:	20000860 	.word	0x20000860
 80a1684:	20000868 	.word	0x20000868
 80a1688:	080a1571 	.word	0x080a1571

080a168c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a168c:	b510      	push	{r4, lr}
 80a168e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1690:	2214      	movs	r2, #20
 80a1692:	2100      	movs	r1, #0
 80a1694:	f000 fa1c 	bl	80a1ad0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1698:	4b05      	ldr	r3, [pc, #20]	; (80a16b0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a169a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a169c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a169e:	4b05      	ldr	r3, [pc, #20]	; (80a16b4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a16a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a16a2:	f240 1301 	movw	r3, #257	; 0x101
 80a16a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a16a8:	2381      	movs	r3, #129	; 0x81
 80a16aa:	8223      	strh	r3, [r4, #16]
}
 80a16ac:	bd10      	pop	{r4, pc}
 80a16ae:	bf00      	nop
 80a16b0:	20000a12 	.word	0x20000a12
 80a16b4:	20000b13 	.word	0x20000b13

080a16b8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a16b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a16ba:	4c0e      	ldr	r4, [pc, #56]	; (80a16f4 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a16bc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a16be:	a801      	add	r0, sp, #4
 80a16c0:	f7ff ffe4 	bl	80a168c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a16c4:	7823      	ldrb	r3, [r4, #0]
 80a16c6:	f3bf 8f5b 	dmb	ish
 80a16ca:	07db      	lsls	r3, r3, #31
 80a16cc:	d40e      	bmi.n	80a16ec <_Z17_fetch_usbserial1v+0x34>
 80a16ce:	4620      	mov	r0, r4
 80a16d0:	f7fe fce5 	bl	80a009e <__cxa_guard_acquire>
 80a16d4:	b150      	cbz	r0, 80a16ec <_Z17_fetch_usbserial1v+0x34>
 80a16d6:	2101      	movs	r1, #1
 80a16d8:	aa01      	add	r2, sp, #4
 80a16da:	4807      	ldr	r0, [pc, #28]	; (80a16f8 <_Z17_fetch_usbserial1v+0x40>)
 80a16dc:	f7ff ff84 	bl	80a15e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a16e0:	4620      	mov	r0, r4
 80a16e2:	f7fe fce1 	bl	80a00a8 <__cxa_guard_release>
 80a16e6:	4805      	ldr	r0, [pc, #20]	; (80a16fc <_Z17_fetch_usbserial1v+0x44>)
 80a16e8:	f000 f9de 	bl	80a1aa8 <atexit>
  return _usbserial1;
}
 80a16ec:	4802      	ldr	r0, [pc, #8]	; (80a16f8 <_Z17_fetch_usbserial1v+0x40>)
 80a16ee:	b006      	add	sp, #24
 80a16f0:	bd10      	pop	{r4, pc}
 80a16f2:	bf00      	nop
 80a16f4:	20000864 	.word	0x20000864
 80a16f8:	2000087c 	.word	0x2000087c
 80a16fc:	080a15e7 	.word	0x080a15e7

080a1700 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1700:	2200      	movs	r2, #0
 80a1702:	6840      	ldr	r0, [r0, #4]
 80a1704:	4611      	mov	r1, r2
 80a1706:	f7ff bc67 	b.w	80a0fd8 <network_ready>

080a170a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a170a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a170c:	4615      	mov	r5, r2
 80a170e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1710:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1712:	460e      	mov	r6, r1
 80a1714:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1716:	2100      	movs	r1, #0
 80a1718:	a803      	add	r0, sp, #12
 80a171a:	f000 f9d9 	bl	80a1ad0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a171e:	4628      	mov	r0, r5
 80a1720:	f000 fa02 	bl	80a1b28 <strlen>
 80a1724:	2700      	movs	r7, #0
 80a1726:	b281      	uxth	r1, r0
 80a1728:	6873      	ldr	r3, [r6, #4]
 80a172a:	4628      	mov	r0, r5
 80a172c:	9700      	str	r7, [sp, #0]
 80a172e:	aa03      	add	r2, sp, #12
 80a1730:	f7ff fc06 	bl	80a0f40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1734:	b130      	cbz	r0, 80a1744 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1736:	4639      	mov	r1, r7
 80a1738:	4620      	mov	r0, r4
 80a173a:	f7ff fd75 	bl	80a1228 <_ZN9IPAddressC1Em>
    }
 80a173e:	4620      	mov	r0, r4
 80a1740:	b009      	add	sp, #36	; 0x24
 80a1742:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1744:	4620      	mov	r0, r4
 80a1746:	a903      	add	r1, sp, #12
 80a1748:	f7ff fd5c 	bl	80a1204 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a174c:	e7f7      	b.n	80a173e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a174e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a174e:	2200      	movs	r2, #0
 80a1750:	6840      	ldr	r0, [r0, #4]
 80a1752:	4611      	mov	r1, r2
 80a1754:	f7ff bc60 	b.w	80a1018 <network_listening>

080a1758 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1758:	2200      	movs	r2, #0
 80a175a:	6840      	ldr	r0, [r0, #4]
 80a175c:	4611      	mov	r1, r2
 80a175e:	f7ff bc6b 	b.w	80a1038 <network_get_listen_timeout>

080a1762 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1762:	2200      	movs	r2, #0
 80a1764:	6840      	ldr	r0, [r0, #4]
 80a1766:	f7ff bc5f 	b.w	80a1028 <network_set_listen_timeout>

080a176a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a176a:	2200      	movs	r2, #0
 80a176c:	6840      	ldr	r0, [r0, #4]
 80a176e:	f081 0101 	eor.w	r1, r1, #1
 80a1772:	f7ff bc49 	b.w	80a1008 <network_listen>

080a1776 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1776:	2300      	movs	r3, #0
 80a1778:	6840      	ldr	r0, [r0, #4]
 80a177a:	461a      	mov	r2, r3
 80a177c:	4619      	mov	r1, r3
 80a177e:	f7ff bc3b 	b.w	80a0ff8 <network_off>

080a1782 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1782:	2300      	movs	r3, #0
 80a1784:	6840      	ldr	r0, [r0, #4]
 80a1786:	461a      	mov	r2, r3
 80a1788:	4619      	mov	r1, r3
 80a178a:	f7ff bc2d 	b.w	80a0fe8 <network_on>

080a178e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a178e:	2200      	movs	r2, #0
 80a1790:	6840      	ldr	r0, [r0, #4]
 80a1792:	4611      	mov	r1, r2
 80a1794:	f7ff bc10 	b.w	80a0fb8 <network_connecting>

080a1798 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1798:	2200      	movs	r2, #0
 80a179a:	2102      	movs	r1, #2
 80a179c:	6840      	ldr	r0, [r0, #4]
 80a179e:	f7ff bc13 	b.w	80a0fc8 <network_disconnect>

080a17a2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a17a2:	2300      	movs	r3, #0
 80a17a4:	6840      	ldr	r0, [r0, #4]
 80a17a6:	461a      	mov	r2, r3
 80a17a8:	f7ff bbfe 	b.w	80a0fa8 <network_connect>

080a17ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a17ac:	2204      	movs	r2, #4
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a17b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a17b2:	4a02      	ldr	r2, [pc, #8]	; (80a17bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a17b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a17b6:	4770      	bx	lr
 80a17b8:	20000b94 	.word	0x20000b94
 80a17bc:	080a1e80 	.word	0x080a1e80

080a17c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a17c0:	4b01      	ldr	r3, [pc, #4]	; (80a17c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a17c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a17c4:	4770      	bx	lr
 80a17c6:	bf00      	nop
 80a17c8:	20000014 	.word	0x20000014

080a17cc <serialEventRun>:
{
 80a17cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a17ce:	4b13      	ldr	r3, [pc, #76]	; (80a181c <serialEventRun+0x50>)
 80a17d0:	b143      	cbz	r3, 80a17e4 <serialEventRun+0x18>
 80a17d2:	f7ff ff37 	bl	80a1644 <_Z16_fetch_usbserialv>
 80a17d6:	6803      	ldr	r3, [r0, #0]
 80a17d8:	691b      	ldr	r3, [r3, #16]
 80a17da:	4798      	blx	r3
 80a17dc:	2800      	cmp	r0, #0
 80a17de:	dd01      	ble.n	80a17e4 <serialEventRun+0x18>
        serialEvent();
 80a17e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a17e4:	4b0e      	ldr	r3, [pc, #56]	; (80a1820 <serialEventRun+0x54>)
 80a17e6:	b143      	cbz	r3, 80a17fa <serialEventRun+0x2e>
 80a17e8:	f7ff fe9c 	bl	80a1524 <_Z22__fetch_global_Serial1v>
 80a17ec:	6803      	ldr	r3, [r0, #0]
 80a17ee:	691b      	ldr	r3, [r3, #16]
 80a17f0:	4798      	blx	r3
 80a17f2:	2800      	cmp	r0, #0
 80a17f4:	dd01      	ble.n	80a17fa <serialEventRun+0x2e>
        serialEvent1();
 80a17f6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a17fa:	4b0a      	ldr	r3, [pc, #40]	; (80a1824 <serialEventRun+0x58>)
 80a17fc:	b10b      	cbz	r3, 80a1802 <serialEventRun+0x36>
 80a17fe:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1802:	4b09      	ldr	r3, [pc, #36]	; (80a1828 <serialEventRun+0x5c>)
 80a1804:	b143      	cbz	r3, 80a1818 <serialEventRun+0x4c>
 80a1806:	f7ff ff57 	bl	80a16b8 <_Z17_fetch_usbserial1v>
 80a180a:	6803      	ldr	r3, [r0, #0]
 80a180c:	691b      	ldr	r3, [r3, #16]
 80a180e:	4798      	blx	r3
 80a1810:	2800      	cmp	r0, #0
 80a1812:	dd01      	ble.n	80a1818 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1814:	f3af 8000 	nop.w
}
 80a1818:	bd08      	pop	{r3, pc}
 80a181a:	bf00      	nop
	...

080a182c <_post_loop>:
{
 80a182c:	b508      	push	{r3, lr}
	serialEventRun();
 80a182e:	f7ff ffcd 	bl	80a17cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1832:	f7ff fa79 	bl	80a0d28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1836:	4b01      	ldr	r3, [pc, #4]	; (80a183c <_post_loop+0x10>)
 80a1838:	6018      	str	r0, [r3, #0]
}
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	20000bb4 	.word	0x20000bb4

080a1840 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1840:	4805      	ldr	r0, [pc, #20]	; (80a1858 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1842:	4a06      	ldr	r2, [pc, #24]	; (80a185c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1844:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1846:	1a12      	subs	r2, r2, r0
 80a1848:	4905      	ldr	r1, [pc, #20]	; (80a1860 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a184a:	f000 f933 	bl	80a1ab4 <memcpy>
    __backup_sram_signature = signature;
 80a184e:	4b05      	ldr	r3, [pc, #20]	; (80a1864 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1850:	4a05      	ldr	r2, [pc, #20]	; (80a1868 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1852:	601a      	str	r2, [r3, #0]
}
 80a1854:	bd08      	pop	{r3, pc}
 80a1856:	bf00      	nop
 80a1858:	40024000 	.word	0x40024000
 80a185c:	40024004 	.word	0x40024004
 80a1860:	080a1ee0 	.word	0x080a1ee0
 80a1864:	40024000 	.word	0x40024000
 80a1868:	9a271c1e 	.word	0x9a271c1e

080a186c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a186c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a186e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1870:	461a      	mov	r2, r3
 80a1872:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1876:	9300      	str	r3, [sp, #0]
 80a1878:	f7ff fb84 	bl	80a0f84 <system_ctrl_set_result>
}
 80a187c:	b003      	add	sp, #12
 80a187e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1884 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1884:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1886:	8843      	ldrh	r3, [r0, #2]
 80a1888:	2b0a      	cmp	r3, #10
 80a188a:	d008      	beq.n	80a189e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a188c:	2b50      	cmp	r3, #80	; 0x50
 80a188e:	d10b      	bne.n	80a18a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1890:	4b09      	ldr	r3, [pc, #36]	; (80a18b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1892:	681b      	ldr	r3, [r3, #0]
 80a1894:	b14b      	cbz	r3, 80a18aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1896:	b003      	add	sp, #12
 80a1898:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a189c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a189e:	f7ff ffe5 	bl	80a186c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a18a2:	b003      	add	sp, #12
 80a18a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a18a8:	2300      	movs	r3, #0
 80a18aa:	461a      	mov	r2, r3
 80a18ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a18b0:	9300      	str	r3, [sp, #0]
 80a18b2:	f7ff fb67 	bl	80a0f84 <system_ctrl_set_result>
}
 80a18b6:	e7f4      	b.n	80a18a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a18b8:	20000ba0 	.word	0x20000ba0

080a18bc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a18bc:	2100      	movs	r1, #0
{
 80a18be:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a18c0:	4811      	ldr	r0, [pc, #68]	; (80a1908 <module_user_init_hook+0x4c>)
 80a18c2:	f7ff fbe1 	bl	80a1088 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a18c6:	4b11      	ldr	r3, [pc, #68]	; (80a190c <module_user_init_hook+0x50>)
 80a18c8:	681a      	ldr	r2, [r3, #0]
 80a18ca:	4b11      	ldr	r3, [pc, #68]	; (80a1910 <module_user_init_hook+0x54>)
 80a18cc:	429a      	cmp	r2, r3
 80a18ce:	bf0c      	ite	eq
 80a18d0:	2201      	moveq	r2, #1
 80a18d2:	2200      	movne	r2, #0
 80a18d4:	4b0f      	ldr	r3, [pc, #60]	; (80a1914 <module_user_init_hook+0x58>)
 80a18d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a18d8:	d001      	beq.n	80a18de <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a18da:	f7ff ffb1 	bl	80a1840 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a18de:	f7ff fa1b 	bl	80a0d18 <HAL_RNG_GetRandomNumber>
 80a18e2:	4604      	mov	r4, r0
    srand(seed);
 80a18e4:	f000 f8fc 	bl	80a1ae0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a18e8:	4b0b      	ldr	r3, [pc, #44]	; (80a1918 <module_user_init_hook+0x5c>)
 80a18ea:	b113      	cbz	r3, 80a18f2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a18f2:	2100      	movs	r1, #0
 80a18f4:	4808      	ldr	r0, [pc, #32]	; (80a1918 <module_user_init_hook+0x5c>)
 80a18f6:	f7ff fb4f 	bl	80a0f98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a18fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a18fe:	2100      	movs	r1, #0
 80a1900:	4806      	ldr	r0, [pc, #24]	; (80a191c <module_user_init_hook+0x60>)
 80a1902:	f7ff bb35 	b.w	80a0f70 <system_ctrl_set_app_request_handler>
 80a1906:	bf00      	nop
 80a1908:	080a17c1 	.word	0x080a17c1
 80a190c:	40024000 	.word	0x40024000
 80a1910:	9a271c1e 	.word	0x9a271c1e
 80a1914:	20000b9c 	.word	0x20000b9c
 80a1918:	00000000 	.word	0x00000000
 80a191c:	080a1885 	.word	0x080a1885

080a1920 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1920:	4b02      	ldr	r3, [pc, #8]	; (80a192c <__tcf_0+0xc>)
 80a1922:	6898      	ldr	r0, [r3, #8]
 80a1924:	b108      	cbz	r0, 80a192a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1926:	f7ff b9ef 	b.w	80a0d08 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a192a:	4770      	bx	lr
 80a192c:	20000ba8 	.word	0x20000ba8

080a1930 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1930:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1932:	b570      	push	{r4, r5, r6, lr}
 80a1934:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1936:	d901      	bls.n	80a193c <pinAvailable+0xc>
    return false;
 80a1938:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a193a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a193c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1940:	2b02      	cmp	r3, #2
 80a1942:	d90b      	bls.n	80a195c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1944:	2801      	cmp	r0, #1
 80a1946:	d824      	bhi.n	80a1992 <pinAvailable+0x62>
 80a1948:	f000 f878 	bl	80a1a3c <_Z19__fetch_global_Wirev>
 80a194c:	2100      	movs	r1, #0
 80a194e:	7c00      	ldrb	r0, [r0, #16]
 80a1950:	f7ff fa52 	bl	80a0df8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1954:	f080 0001 	eor.w	r0, r0, #1
 80a1958:	b2c0      	uxtb	r0, r0
 80a195a:	e7ee      	b.n	80a193a <pinAvailable+0xa>
 80a195c:	4e12      	ldr	r6, [pc, #72]	; (80a19a8 <pinAvailable+0x78>)
 80a195e:	7831      	ldrb	r1, [r6, #0]
 80a1960:	f3bf 8f5b 	dmb	ish
 80a1964:	f011 0501 	ands.w	r5, r1, #1
 80a1968:	d10d      	bne.n	80a1986 <pinAvailable+0x56>
 80a196a:	4630      	mov	r0, r6
 80a196c:	f7fe fb97 	bl	80a009e <__cxa_guard_acquire>
 80a1970:	b148      	cbz	r0, 80a1986 <pinAvailable+0x56>
 80a1972:	4629      	mov	r1, r5
 80a1974:	480d      	ldr	r0, [pc, #52]	; (80a19ac <pinAvailable+0x7c>)
 80a1976:	f7ff fd57 	bl	80a1428 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a197a:	4630      	mov	r0, r6
 80a197c:	f7fe fb94 	bl	80a00a8 <__cxa_guard_release>
 80a1980:	480b      	ldr	r0, [pc, #44]	; (80a19b0 <pinAvailable+0x80>)
 80a1982:	f000 f891 	bl	80a1aa8 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1986:	4b09      	ldr	r3, [pc, #36]	; (80a19ac <pinAvailable+0x7c>)
 80a1988:	7818      	ldrb	r0, [r3, #0]
 80a198a:	f7ff fa59 	bl	80a0e40 <hal_spi_is_enabled>
 80a198e:	2800      	cmp	r0, #0
 80a1990:	d1d2      	bne.n	80a1938 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1992:	3c12      	subs	r4, #18
 80a1994:	2c01      	cmp	r4, #1
 80a1996:	d805      	bhi.n	80a19a4 <pinAvailable+0x74>
 80a1998:	f7ff fdc4 	bl	80a1524 <_Z22__fetch_global_Serial1v>
 80a199c:	7c00      	ldrb	r0, [r0, #16]
 80a199e:	f7ff fa87 	bl	80a0eb0 <hal_usart_is_enabled>
 80a19a2:	e7d7      	b.n	80a1954 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a19a4:	2001      	movs	r0, #1
 80a19a6:	e7c8      	b.n	80a193a <pinAvailable+0xa>
 80a19a8:	20000ba4 	.word	0x20000ba4
 80a19ac:	20000ba8 	.word	0x20000ba8
 80a19b0:	080a1921 	.word	0x080a1921

080a19b4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a19b4:	2817      	cmp	r0, #23
{
 80a19b6:	b538      	push	{r3, r4, r5, lr}
 80a19b8:	4604      	mov	r4, r0
 80a19ba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a19bc:	d80a      	bhi.n	80a19d4 <pinMode+0x20>
 80a19be:	29ff      	cmp	r1, #255	; 0xff
 80a19c0:	d008      	beq.n	80a19d4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a19c2:	f7ff ffb5 	bl	80a1930 <pinAvailable>
 80a19c6:	b128      	cbz	r0, 80a19d4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a19c8:	4629      	mov	r1, r5
 80a19ca:	4620      	mov	r0, r4
}
 80a19cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a19d0:	f7ff b9b2 	b.w	80a0d38 <HAL_Pin_Mode>
}
 80a19d4:	bd38      	pop	{r3, r4, r5, pc}

080a19d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a19d6:	b538      	push	{r3, r4, r5, lr}
 80a19d8:	4604      	mov	r4, r0
 80a19da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a19dc:	f7ff f9b4 	bl	80a0d48 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a19e0:	28ff      	cmp	r0, #255	; 0xff
 80a19e2:	d010      	beq.n	80a1a06 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a19e4:	2806      	cmp	r0, #6
 80a19e6:	d804      	bhi.n	80a19f2 <digitalWrite+0x1c>
 80a19e8:	234d      	movs	r3, #77	; 0x4d
 80a19ea:	fa23 f000 	lsr.w	r0, r3, r0
 80a19ee:	07c3      	lsls	r3, r0, #31
 80a19f0:	d409      	bmi.n	80a1a06 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a19f2:	4620      	mov	r0, r4
 80a19f4:	f7ff ff9c 	bl	80a1930 <pinAvailable>
 80a19f8:	b128      	cbz	r0, 80a1a06 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a19fa:	4629      	mov	r1, r5
 80a19fc:	4620      	mov	r0, r4
}
 80a19fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1a02:	f7ff b9a9 	b.w	80a0d58 <HAL_GPIO_Write>
}
 80a1a06:	bd38      	pop	{r3, r4, r5, pc}

080a1a08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a08:	4770      	bx	lr
	...

080a1a0c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1a0c:	2300      	movs	r3, #0
{
 80a1a0e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1a10:	2520      	movs	r5, #32
 80a1a12:	8043      	strh	r3, [r0, #2]
 80a1a14:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a16:	4e08      	ldr	r6, [pc, #32]	; (80a1a38 <_Z17acquireWireBufferv+0x2c>)
{
 80a1a18:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1a1a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a1c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1a1e:	6085      	str	r5, [r0, #8]
 80a1a20:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a22:	4628      	mov	r0, r5
 80a1a24:	f000 f83e 	bl	80a1aa4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a28:	4631      	mov	r1, r6
	};
 80a1a2a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a2c:	4628      	mov	r0, r5
 80a1a2e:	f000 f839 	bl	80a1aa4 <_ZnajRKSt9nothrow_t>
	};
 80a1a32:	60e0      	str	r0, [r4, #12]
}
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	bd70      	pop	{r4, r5, r6, pc}
 80a1a38:	080a1eb4 	.word	0x080a1eb4

080a1a3c <_Z19__fetch_global_Wirev>:
{
 80a1a3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a3e:	4d0e      	ldr	r5, [pc, #56]	; (80a1a78 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1a40:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a42:	7829      	ldrb	r1, [r5, #0]
 80a1a44:	f3bf 8f5b 	dmb	ish
 80a1a48:	f011 0401 	ands.w	r4, r1, #1
 80a1a4c:	d111      	bne.n	80a1a72 <_Z19__fetch_global_Wirev+0x36>
 80a1a4e:	4628      	mov	r0, r5
 80a1a50:	f7fe fb25 	bl	80a009e <__cxa_guard_acquire>
 80a1a54:	b168      	cbz	r0, 80a1a72 <_Z19__fetch_global_Wirev+0x36>
 80a1a56:	a801      	add	r0, sp, #4
 80a1a58:	f7ff ffd8 	bl	80a1a0c <_Z17acquireWireBufferv>
 80a1a5c:	4621      	mov	r1, r4
 80a1a5e:	aa01      	add	r2, sp, #4
 80a1a60:	4806      	ldr	r0, [pc, #24]	; (80a1a7c <_Z19__fetch_global_Wirev+0x40>)
 80a1a62:	f7ff fb49 	bl	80a10f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1a66:	4628      	mov	r0, r5
 80a1a68:	f7fe fb1e 	bl	80a00a8 <__cxa_guard_release>
 80a1a6c:	4804      	ldr	r0, [pc, #16]	; (80a1a80 <_Z19__fetch_global_Wirev+0x44>)
 80a1a6e:	f000 f81b 	bl	80a1aa8 <atexit>
	return wire;
}
 80a1a72:	4802      	ldr	r0, [pc, #8]	; (80a1a7c <_Z19__fetch_global_Wirev+0x40>)
 80a1a74:	b007      	add	sp, #28
 80a1a76:	bd30      	pop	{r4, r5, pc}
 80a1a78:	20000bb8 	.word	0x20000bb8
 80a1a7c:	20000bbc 	.word	0x20000bbc
 80a1a80:	080a1a09 	.word	0x080a1a09

080a1a84 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1a84:	2300      	movs	r3, #0
 80a1a86:	b507      	push	{r0, r1, r2, lr}
 80a1a88:	461a      	mov	r2, r3
 80a1a8a:	4619      	mov	r1, r3
 80a1a8c:	9300      	str	r3, [sp, #0]
 80a1a8e:	4803      	ldr	r0, [pc, #12]	; (80a1a9c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1a90:	f7ff fbe0 	bl	80a1254 <_ZN9IPAddressC1Ehhhh>
 80a1a94:	b003      	add	sp, #12
 80a1a96:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1a9a:	bf00      	nop
 80a1a9c:	20000bd0 	.word	0x20000bd0

080a1aa0 <_ZdlPvj>:
 80a1aa0:	f7fe bafb 	b.w	80a009a <_ZdlPv>

080a1aa4 <_ZnajRKSt9nothrow_t>:
 80a1aa4:	f7fe baf7 	b.w	80a0096 <_Znaj>

080a1aa8 <atexit>:
 80a1aa8:	2300      	movs	r3, #0
 80a1aaa:	4601      	mov	r1, r0
 80a1aac:	461a      	mov	r2, r3
 80a1aae:	4618      	mov	r0, r3
 80a1ab0:	f000 b842 	b.w	80a1b38 <__register_exitproc>

080a1ab4 <memcpy>:
 80a1ab4:	440a      	add	r2, r1
 80a1ab6:	4291      	cmp	r1, r2
 80a1ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a1abc:	d100      	bne.n	80a1ac0 <memcpy+0xc>
 80a1abe:	4770      	bx	lr
 80a1ac0:	b510      	push	{r4, lr}
 80a1ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1ac6:	4291      	cmp	r1, r2
 80a1ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1acc:	d1f9      	bne.n	80a1ac2 <memcpy+0xe>
 80a1ace:	bd10      	pop	{r4, pc}

080a1ad0 <memset>:
 80a1ad0:	4603      	mov	r3, r0
 80a1ad2:	4402      	add	r2, r0
 80a1ad4:	4293      	cmp	r3, r2
 80a1ad6:	d100      	bne.n	80a1ada <memset+0xa>
 80a1ad8:	4770      	bx	lr
 80a1ada:	f803 1b01 	strb.w	r1, [r3], #1
 80a1ade:	e7f9      	b.n	80a1ad4 <memset+0x4>

080a1ae0 <srand>:
 80a1ae0:	b538      	push	{r3, r4, r5, lr}
 80a1ae2:	4b0d      	ldr	r3, [pc, #52]	; (80a1b18 <srand+0x38>)
 80a1ae4:	4604      	mov	r4, r0
 80a1ae6:	681d      	ldr	r5, [r3, #0]
 80a1ae8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1aea:	b97b      	cbnz	r3, 80a1b0c <srand+0x2c>
 80a1aec:	2018      	movs	r0, #24
 80a1aee:	f7ff fabb 	bl	80a1068 <malloc>
 80a1af2:	4a0a      	ldr	r2, [pc, #40]	; (80a1b1c <srand+0x3c>)
 80a1af4:	4b0a      	ldr	r3, [pc, #40]	; (80a1b20 <srand+0x40>)
 80a1af6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a1af8:	e9c0 2300 	strd	r2, r3, [r0]
 80a1afc:	4b09      	ldr	r3, [pc, #36]	; (80a1b24 <srand+0x44>)
 80a1afe:	2201      	movs	r2, #1
 80a1b00:	6083      	str	r3, [r0, #8]
 80a1b02:	230b      	movs	r3, #11
 80a1b04:	8183      	strh	r3, [r0, #12]
 80a1b06:	2300      	movs	r3, #0
 80a1b08:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1b0c:	2200      	movs	r2, #0
 80a1b0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1b10:	611c      	str	r4, [r3, #16]
 80a1b12:	615a      	str	r2, [r3, #20]
 80a1b14:	bd38      	pop	{r3, r4, r5, pc}
 80a1b16:	bf00      	nop
 80a1b18:	20000014 	.word	0x20000014
 80a1b1c:	abcd330e 	.word	0xabcd330e
 80a1b20:	e66d1234 	.word	0xe66d1234
 80a1b24:	0005deec 	.word	0x0005deec

080a1b28 <strlen>:
 80a1b28:	4603      	mov	r3, r0
 80a1b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1b2e:	2a00      	cmp	r2, #0
 80a1b30:	d1fb      	bne.n	80a1b2a <strlen+0x2>
 80a1b32:	1a18      	subs	r0, r3, r0
 80a1b34:	3801      	subs	r0, #1
 80a1b36:	4770      	bx	lr

080a1b38 <__register_exitproc>:
 80a1b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1b3c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1bfc <__register_exitproc+0xc4>
 80a1b40:	4606      	mov	r6, r0
 80a1b42:	f8d8 0000 	ldr.w	r0, [r8]
 80a1b46:	461f      	mov	r7, r3
 80a1b48:	460d      	mov	r5, r1
 80a1b4a:	4691      	mov	r9, r2
 80a1b4c:	f000 f858 	bl	80a1c00 <__retarget_lock_acquire_recursive>
 80a1b50:	4b26      	ldr	r3, [pc, #152]	; (80a1bec <__register_exitproc+0xb4>)
 80a1b52:	681c      	ldr	r4, [r3, #0]
 80a1b54:	b934      	cbnz	r4, 80a1b64 <__register_exitproc+0x2c>
 80a1b56:	4c26      	ldr	r4, [pc, #152]	; (80a1bf0 <__register_exitproc+0xb8>)
 80a1b58:	601c      	str	r4, [r3, #0]
 80a1b5a:	4b26      	ldr	r3, [pc, #152]	; (80a1bf4 <__register_exitproc+0xbc>)
 80a1b5c:	b113      	cbz	r3, 80a1b64 <__register_exitproc+0x2c>
 80a1b5e:	681b      	ldr	r3, [r3, #0]
 80a1b60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1b64:	6863      	ldr	r3, [r4, #4]
 80a1b66:	2b1f      	cmp	r3, #31
 80a1b68:	dd07      	ble.n	80a1b7a <__register_exitproc+0x42>
 80a1b6a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1b6e:	f000 f849 	bl	80a1c04 <__retarget_lock_release_recursive>
 80a1b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1b7a:	b35e      	cbz	r6, 80a1bd4 <__register_exitproc+0x9c>
 80a1b7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1b80:	b988      	cbnz	r0, 80a1ba6 <__register_exitproc+0x6e>
 80a1b82:	4b1d      	ldr	r3, [pc, #116]	; (80a1bf8 <__register_exitproc+0xc0>)
 80a1b84:	b923      	cbnz	r3, 80a1b90 <__register_exitproc+0x58>
 80a1b86:	f8d8 0000 	ldr.w	r0, [r8]
 80a1b8a:	f000 f83a 	bl	80a1c02 <__retarget_lock_release>
 80a1b8e:	e7f0      	b.n	80a1b72 <__register_exitproc+0x3a>
 80a1b90:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1b94:	f7ff fa68 	bl	80a1068 <malloc>
 80a1b98:	2800      	cmp	r0, #0
 80a1b9a:	d0f4      	beq.n	80a1b86 <__register_exitproc+0x4e>
 80a1b9c:	2300      	movs	r3, #0
 80a1b9e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1ba2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1ba6:	2201      	movs	r2, #1
 80a1ba8:	6863      	ldr	r3, [r4, #4]
 80a1baa:	2e02      	cmp	r6, #2
 80a1bac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1bb0:	fa02 f203 	lsl.w	r2, r2, r3
 80a1bb4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1bb8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1bbc:	ea43 0302 	orr.w	r3, r3, r2
 80a1bc0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1bc4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1bc8:	bf02      	ittt	eq
 80a1bca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1bce:	431a      	orreq	r2, r3
 80a1bd0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1bd4:	6863      	ldr	r3, [r4, #4]
 80a1bd6:	f8d8 0000 	ldr.w	r0, [r8]
 80a1bda:	1c5a      	adds	r2, r3, #1
 80a1bdc:	3302      	adds	r3, #2
 80a1bde:	6062      	str	r2, [r4, #4]
 80a1be0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1be4:	f000 f80e 	bl	80a1c04 <__retarget_lock_release_recursive>
 80a1be8:	2000      	movs	r0, #0
 80a1bea:	e7c4      	b.n	80a1b76 <__register_exitproc+0x3e>
 80a1bec:	20000c74 	.word	0x20000c74
 80a1bf0:	20000be8 	.word	0x20000be8
 80a1bf4:	00000000 	.word	0x00000000
 80a1bf8:	080a1069 	.word	0x080a1069
 80a1bfc:	20000078 	.word	0x20000078

080a1c00 <__retarget_lock_acquire_recursive>:
 80a1c00:	4770      	bx	lr

080a1c02 <__retarget_lock_release>:
 80a1c02:	4770      	bx	lr

080a1c04 <__retarget_lock_release_recursive>:
 80a1c04:	4770      	bx	lr

080a1c06 <link_code_end>:
	...

080a1c08 <dynalib_user>:
 80a1c08:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1c18:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a1c28:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a1c38:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a1c48:	6f70 6577 2e72 4100 7474 6361 2068 6573     power..Attach se
 80a1c58:	736e 726f 7420 206f 6966 676e 7265 7720     nsor to finger w
 80a1c68:	7469 2068 7572 6262 7265 6220 6e61 2064     ith rubber band 
 80a1c78:	6f74 4220 6765 6e69 0021 4e20 206f 6966     to Begin!. No fi
 80a1c88:	676e 7265 003f 6946 676e 7265 4420 7465     nger?.Finger Det
 80a1c98:	6365 6574 2064 2d2d 4920 696e 6974 6c61     ected -- Initial
 80a1ca8:	7a69 6e69 0067 2e2e 002e 5248 203d 2000     izing.....HR= . 
 80a1cb8:	5042 004d 202c 5053 324f 203d 2500           BPM., SPO2= .%.

080a1cc7 <_ZL14uch_spo2_table>:
 80a1cc7:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
 80a1cd7:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
 80a1ce7:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
 80a1cf7:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
 80a1d07:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
 80a1d17:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
 80a1d27:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
 80a1d37:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
 80a1d47:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
 80a1d57:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
 80a1d67:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
 80a1d77:	0709 0506 0203 0001                          .........

080a1d80 <_ZTV7TwoWire>:
	...
 80a1d88:	109f 080a 10e9 080a 10c1 080a 10a1 080a     ................
 80a1d98:	10c9 080a 10d1 080a 10d9 080a 10e1 080a     ................

080a1da8 <_ZTV9IPAddress>:
	...
 80a1db0:	11b5 080a 11a5 080a 11a7 080a 7061 0070     ............app.

080a1dc0 <_ZTVN5spark12NetworkClassE>:
	...
 80a1dc8:	127d 080a 1287 080a 1291 080a 129b 080a     }...............
 80a1dd8:	12a5 080a 12b1 080a 12bd 080a 12c5 080a     ................
 80a1de8:	12cd 080a 12d9 080a 12e1 080a 12eb 080a     ................
 80a1df8:	12f5 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a1e08:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1e18 <_ZTV11USARTSerial>:
	...
 80a1e20:	1481 080a 14eb 080a 14c7 080a 1359 080a     ............Y...
 80a1e30:	1497 080a 14b3 080a 14a5 080a 14c1 080a     ................
 80a1e40:	1483 080a 1489 080a                         ........

080a1e48 <_ZTV9USBSerial>:
	...
 80a1e50:	1573 080a 15d9 080a 15b1 080a 1359 080a     s...........Y...
 80a1e60:	15a3 080a 1575 080a 1585 080a 15d3 080a     ....u...........
 80a1e70:	1595 080a 156d 080a                         ....m...

080a1e78 <_ZTVN5spark9WiFiClassE>:
	...
 80a1e80:	17a3 080a 1799 080a 178f 080a 1701 080a     ................
 80a1e90:	1783 080a 1777 080a 12bd 080a 12c5 080a     ....w...........
 80a1ea0:	176b 080a 1763 080a 1759 080a 174f 080a     k...c...Y...O...
 80a1eb0:	170b 080a                                   ....

080a1eb4 <_ZSt7nothrow>:
	...

080a1eb5 <link_const_variable_data_end>:
 80a1eb5:	00          	.byte	0x00
	...

080a1eb8 <link_constructors_location>:
 80a1eb8:	080a0401 	.word	0x080a0401
 80a1ebc:	080a126d 	.word	0x080a126d
 80a1ec0:	080a1345 	.word	0x080a1345
 80a1ec4:	080a141d 	.word	0x080a141d
 80a1ec8:	080a1449 	.word	0x080a1449
 80a1ecc:	080a146d 	.word	0x080a146d
 80a1ed0:	080a17ad 	.word	0x080a17ad
 80a1ed4:	080a1a85 	.word	0x080a1a85

080a1ed8 <link_constructors_end>:
	...
